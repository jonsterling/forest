<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Lars Birkedal</fr:link>
      </fr:author>
      <fr:author>
        <fr:link href="/rasmusm%C3%B8gelberg/" title="Rasmus Ejlers Møgelberg" uri="https://www.jonmsterling.com/rasmusmøgelberg/" display-uri="rasmusmøgelberg" type="local">Rasmus Ejlers Møgelberg</fr:link>
      </fr:author>
      <fr:author>
        <fr:link href="/janschwinghammer/" title="Jan Schwinghammer" uri="https://www.jonmsterling.com/janschwinghammer/" display-uri="janschwinghammer" type="local">Jan Schwinghammer</fr:link>
      </fr:author>
      <fr:author>
        <fr:link href="/kristianst%C3%B8vring/" title="Kristian Støvring" uri="https://www.jonmsterling.com/kristianstøvring/" display-uri="kristianstøvring" type="local">Kristian Støvring</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2011</fr:year>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/bmss-2011/</fr:uri>
    <fr:display-uri>bmss-2011</fr:display-uri>
    <fr:route>/bmss-2011/</fr:route>
    <fr:title text="First steps in synthetic guarded domain theory: step-indexing in the topos of trees">First steps in synthetic guarded domain theory: step-indexing in the topos of trees</fr:title>
    <fr:taxon>Reference</fr:taxon>
    <fr:meta name="bibtex"><![CDATA[@inproceedings{bmss-2011,
  author = {Birkedal, Lars and M{\o{}}gelberg, Rasmus Ejlers and Schwinghammer, Jan and St\o{}vring, Kristian},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  booktitle = {Proceedings of the 2011 IEEE 26th Annual Symposium on Logic in Computer Science},
  year = {2011},
  doi = {10.1109/LICS.2011.16},
  eprint = {1208.3596},
  eprintclass = {cs.LO},
  eprinttype = {arXiv},
  isbn = {978-0-7695-4412-0},
  pages = {55--64},
  title = {First Steps in Synthetic Guarded Domain Theory: Step-Indexing in the Topos of Trees},
}]]></fr:meta>
    <fr:meta name="doi">10.1109/LICS.2011.16</fr:meta>
    <fr:meta name="venue">Proceedings of the 2011 IEEE 26th Annual Symposium on Logic in Computer Science</fr:meta>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>We present the topos <fr:tex display="inline"><![CDATA[\mathcal {S}]]></fr:tex> of trees as a model of guarded recursion. We study the internal dependently-typed higher-order logic of <fr:tex display="inline"><![CDATA[\mathcal {S}]]></fr:tex> and show that <fr:tex display="inline"><![CDATA[\mathcal {S}]]></fr:tex> models two modal operators, on predicates and types, which serve as guards in recursive definitions of terms, predicates, and types. In particular, we show how to solve recursive type equations involving dependent types. We propose that the internal logic of <fr:tex display="inline"><![CDATA[\mathcal {S}]]></fr:tex> provides the right setting for the synthetic construction of abstract versions of step-indexed models of programming languages and program logics. As an example, we show how to construct a model of a programming language with higher-order store and recursive types entirely inside the internal logic of <fr:tex display="inline"><![CDATA[\mathcal {S}]]></fr:tex>.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/danielgratzer/" title="Daniel Gratzer" uri="https://www.jonmsterling.com/danielgratzer/" display-uri="danielgratzer" type="local">Daniel Gratzer</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Lars Birkedal</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2024</fr:year>
              <fr:month>2</fr:month>
              <fr:day>7</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-gratzer-birkedal-2024-univalent/</fr:uri>
            <fr:display-uri>sterling-gratzer-birkedal-2024-univalent</fr:display-uri>
            <fr:route>/sterling-gratzer-birkedal-2024-univalent/</fr:route>
            <fr:title text="Towards univalent reference types">Towards univalent reference types</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.4230/LIPIcs.CSL.2024.47</fr:meta>
            <fr:meta name="venue">
              <fr:link href="/csl-2024/" title="CSL ’24: 32nd EACSL Annual Conference on Computer Science Logic 2024" uri="https://www.jonmsterling.com/csl-2024/" display-uri="csl-2024" type="local"><html:em>CSL ’24</html:em>: 32nd EACSL Annual Conference on Computer Science Logic 2024</fr:link>
            </fr:meta>
            <fr:meta name="bibtex"><![CDATA[@inproceedings{sterling-gratzer-birkedal-2024-univalent,
  author = {Sterling, Jonathan and Gratzer, Daniel and Birkedal, Lars},
  title = {{Towards Univalent Reference Types: The Impact of Univalence on Denotational Semantics}},
  booktitle = {32nd EACSL Annual Conference on Computer Science Logic (CSL 2024)},
  pages = {47:1--47:21},
  series = {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN = {978-3-95977-310-2},
  ISSN = {1868-8969},
  year = {2024},
  volume = {288},
  editor = {Murano, Aniello and Silva, Alexandra},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address = {Dagstuhl, Germany},
  doi =  {10.4230/LIPIcs.CSL.2024.47},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We develop a denotational semantics for general reference types in an <fr:link href="/awodey-frey-speight-2018/" title="Impredicative encodings of (higher) inductive types" uri="https://www.jonmsterling.com/awodey-frey-speight-2018/" display-uri="awodey-frey-speight-2018" type="local">impredicative version</fr:link> of <fr:link href="/bbcgsv-2019/" title="Guarded cubical type theory" uri="https://www.jonmsterling.com/bbcgsv-2019/" display-uri="bbcgsv-2019" type="local"><html:strong><html:em>guarded homotopy type theory</html:em></html:strong></fr:link>, an adaptation of <fr:link href="/bmss-2011/" title="First steps in synthetic guarded domain theory: step-indexing in the topos of trees" uri="https://www.jonmsterling.com/bmss-2011/" display-uri="bmss-2011" type="local">synthetic guarded domain theory</fr:link> to Voevodsky’s <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local">univalent foundations</fr:link>. We observe for the first time the profound impact of univalence on the <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">denotational semantics of mutable state</fr:link>. Univalence automatically ensures that all computations are invariant under symmetries of the heap—a bountiful source of program equivalences. In particular, even the most simplistic univalent model enjoys many new program equivalences that do not hold when the same constructions are carried out in the universes of traditional set-level (extensional) type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>8</fr:month>
              <fr:day>15</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0076/</fr:uri>
            <fr:display-uri>jms-0076</fr:display-uri>
            <fr:route>/jms-0076/</fr:route>
            <fr:title text="Context and overall objectives">Context and overall objectives</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Software systems mediate a growing proportion of human activity, e.g. communication, transport, medicine, industrial and agricultural production, etc. As a result, it is urgent to understand and better control both the correctness and security properties of these increasingly complex software systems. The diversity of verification requirements speaks to a need for models of program execution that smoothly interpolate between many different levels of abstraction. Models of program execution vary in expressiveness along the spectrum of possible programming languages and specification logics. At one extreme, dependent type theory is a language for mathematically-inspired functional programming that is sufficiently expressive to serve as its own specification logic. Dependent type theory has struggled, however, to incorporate several computational effects that are common in every-day programming languages, such as state and concurrency. One of the most extreme forms of computational effect is “higher-order mutable state”, which is when programs can read and write data as well as entire subroutines to the computer’s memory during execution.  Programming languages that support these features require very sophisticated specification logics due to the myriad details that must be surfaced in their semantic models.</html:p>
            <html:p>Recently there have been several significant technical advances in mathematical semantics for programming languages that have been ripe for exploitation. For instance, in <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">my doctoral thesis</fr:link> I developed a new technique called <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">Synthetic Tait Computability</fr:link> or “STC” that smoothly combines multiple levels of abstraction into a single language. Inspired by sophisticated mathematical techniques invented in topos theory and category theory for entirely different purposes, STC enables low-level details (even down to execution steps) to be manipulated in a simpler and more abstract way than ever before, making them easier to control mathematically. Perhaps more importantly, the STC method makes it possible to import ideas and techniques from other mathematical fields that are comparatively more developed than programming languages. Another related advance is the use of <fr:link href="/bmss-2011/" title="First steps in synthetic guarded domain theory: step-indexing in the topos of trees" uri="https://www.jonmsterling.com/bmss-2011/" display-uri="bmss-2011" type="local">Synthetic Guarded Domain Theory</fr:link> or “SGDT” as a mathematical language in which to describe and reason about the behavior of computer programs, potentially exhibiting complex interactions with their environment and with other programs. A third advance setting the stage for this project is the development of <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local">Univalent Foundations and Homotopy Type Theory</fr:link>, a new and backwards-compatible foundation of mathematics that places symmetries and reversible transformations of mathematical structures in the forefront.</html:p>
            <html:p>The goal of the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> project has been to combine these three ideas to break a long-standing logjam in the mathematical understanding of computer programming: the denotational semantics and equational separation logic of higher-order mutable state.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/danielepalombi/" title="Daniele Palombi" uri="https://www.jonmsterling.com/danielepalombi/" display-uri="danielepalombi" type="local">Daniele Palombi</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>22</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/palombi-sterling-2023/</fr:uri>
            <fr:display-uri>palombi-sterling-2023</fr:display-uri>
            <fr:route>/palombi-sterling-2023/</fr:route>
            <fr:title text="Classifying topoi in synthetic guarded domain theory: the universal property of multi-clock guarded recursion">Classifying topoi in synthetic guarded domain theory: the universal property of multi-clock guarded recursion</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="bibtex"><![CDATA[@inproceedings{palombi-sterling-2023,
  author = {Palombi, Daniele and Sterling, Jonathan},
  booktitle = {Proceedings 38th Conference on Mathematical Foundations of Programming Semantics, {MFPS} 2022},
  year = {2023},
  month = feb,
  title = {Classifying topoi in synthetic guarded domain theory},
  doi = {10.46298/entics.10323},
}]]></fr:meta>
            <fr:meta name="doi">10.46298/entics.10323</fr:meta>
            <fr:meta name="venue">38th International Conference on Mathematical Foundations of Programming Semantics</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Several different topoi have played an important role in the development and applications of <html:em><fr:link href="/bmss-2011/" title="First steps in synthetic guarded domain theory: step-indexing in the topos of trees" uri="https://www.jonmsterling.com/bmss-2011/" display-uri="bmss-2011" type="local">synthetic guarded domain theory</fr:link></html:em> (SGDT), a new kind of synthetic domain theory that abstracts the concept of <html:em>guarded recursion</html:em> frequently employed in the semantics of programming languages. In order to unify the accounts of guarded recursion and coinduction, <fr:link href="/atkey-mcbride-2013/" title="Productive coprogramming with guarded recursion" uri="https://www.jonmsterling.com/atkey-mcbride-2013/" display-uri="atkey-mcbride-2013" type="local">several</fr:link> <fr:link href="/bizjak-mogelberg-2020/" title="Denotational semantics for guarded dependent type theory" uri="https://www.jonmsterling.com/bizjak-mogelberg-2020/" display-uri="bizjak-mogelberg-2020" type="local">authors</fr:link> have enriched SGDT with multiple “clocks” parameterizing different time-streams, leading to more complex and difficult to understand topos models. Until now these topoi have been understood very concretely <html:em>qua</html:em> categories of presheaves, and the logico-geometrical question of what theories these topoi classify has remained open. We show that several important topos models of SGDT classify very simple geometric theories, and that the passage to various forms of multi-clock guarded recursion can be rephrased more compositionally in terms of the lower bagtopos construction of <fr:link href="/vickers-1992/" title="Geometric theories and databases" uri="https://www.jonmsterling.com/vickers-1992/" display-uri="vickers-1992" type="local">Vickers</fr:link> and variations thereon due to <fr:link href="/johnstone-1994/" title="Variations on the bagdomain theme" uri="https://www.jonmsterling.com/johnstone-1994/" display-uri="johnstone-1994" type="local">Johnstone</fr:link>. We contribute to the consolidation of SGDT by isolating the universal property of multi-clock guarded recursion as a modular construction that applies to any topos model of single-clock guarded recursion.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
