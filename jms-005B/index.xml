<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>5</fr:month>
      <fr:day>18</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-005B/</fr:uri>
    <fr:display-uri>jms-005B</fr:display-uri>
    <fr:route>/jms-005B/</fr:route>
    <fr:title text="Virtual bicategory theory">Virtual bicategory theory</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0055/</fr:uri>
        <fr:display-uri>jms-0055</fr:display-uri>
        <fr:route>/jms-0055/</fr:route>
        <fr:title text="Directed graph">Directed graph</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>A <html:em>directed graph</html:em> <fr:tex display="inline"><![CDATA[G]]></fr:tex> is defined to be a collection of 0-cells <fr:tex display="inline"><![CDATA[A,B,C,\ldots \in  G]]></fr:tex> together with a collection of edges <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{e}}{B}\in  G]]></fr:tex>.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0056/</fr:uri>
        <fr:display-uri>jms-0056</fr:display-uri>
        <fr:route>/jms-0056/</fr:route>
        <fr:title text="Free category on a directed graph">Free category on a directed graph</fr:title>
        <fr:taxon>Construction</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[G]]></fr:tex> be a <fr:link href="/jms-0055/" title="Directed graph" uri="https://www.jonmsterling.com/jms-0055/" display-uri="jms-0055" type="local">directed graph</fr:link>; a <html:em>path</html:em> in <fr:tex display="inline"><![CDATA[G]]></fr:tex> is defined to be a sequence of compatible edges <fr:tex display="inline"><![CDATA[{\mathopen {}\left  [A_0\xrightarrow {f_0}A_1\xrightarrow {f_1}\ldots \xrightarrow {f_{n-1}}A_n\right  ]\mathclose {}}]]></fr:tex>. Evidently, the free category <fr:tex display="inline"><![CDATA[G^{\star }]]></fr:tex> on <fr:tex display="inline"><![CDATA[G]]></fr:tex> has morphisms given by paths.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0054/</fr:uri>
        <fr:display-uri>jms-0054</fr:display-uri>
        <fr:route>/jms-0054/</fr:route>
        <fr:title text="Virtual bicategory">Virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>A <html:em>virtual bicategory</html:em> <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is a <fr:link href="/jms-0055/" title="Directed graph" uri="https://www.jonmsterling.com/jms-0055/" display-uri="jms-0055" type="local">directed graph</fr:link> equipped with the following additional data:</html:p>
        <html:ol><html:li>for each <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and each edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}\in \mathcal {K}]]></fr:tex>, a collection of 2-cells <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}\in \mathcal {K}{\mathopen {}\left (A,B\right )\mathclose {}}]]></fr:tex>;</html:li>
  <html:li>for any edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, an <html:em>identity 2-cell</html:em> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f\right  ]\mathclose {}}}\xrightarrow {{1_{f}}}{f}\in \mathcal {K}{\mathopen {}\left (A,B\right )\mathclose {}}]]></fr:tex>;</html:li>
  <html:li>for any sequence of compatible paths <fr:tex display="inline"><![CDATA[A_0\xrightarrow {\Psi _0}\ldots \xrightarrow {\Psi _{n-1}}A_n\in  \mathcal {K}^{\star }]]></fr:tex> and 2-cells <fr:tex display="inline"><![CDATA[{\Psi _i}\xrightarrow {{\alpha _i}}{f_i}\in \mathcal {K}{\mathopen {}\left (A_i,A_{i+1}\right )\mathclose {}}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f_i\mid  i<n\right  ]\mathclose {}}}\xrightarrow {{\beta }}{g}\in \mathcal {K}{\mathopen {}\left (A_0,A_n\right )\mathclose {}}]]></fr:tex>, a <html:em>composite</html:em> 2-cell <fr:tex display="inline"><![CDATA[{\Psi _0;\ldots ;\Psi _n}\xrightarrow {{{\mathopen {}\left  [\alpha _i\mid  i<n\right  ]\mathclose {}};\beta }}{g}]]></fr:tex>;</html:li>
  <html:li>such that the composition of 2-cells is both associative and unital with respect to identity 2-cells.</html:li></html:ol>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0057/</fr:uri>
        <fr:display-uri>jms-0057</fr:display-uri>
        <fr:route>/jms-0057/</fr:route>
        <fr:title text="Cocartesian 2-cells in a virtual bicategory">Cocartesian 2-cells in a virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; given a path <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>cocartesian</html:em> if any 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;\Psi ;\Xi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;{\mathopen {}\left  [f\right  ]\mathclose {}};\Xi }\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\overrightarrow {1_{\Phi _i}\ldots },\alpha ,\overrightarrow {1_{\Xi _i}\ldots }\right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0058/</fr:uri>
        <fr:display-uri>jms-0058</fr:display-uri>
        <fr:route>/jms-0058/</fr:route>
        <fr:title text="Left- and right-cocartesian 2-cells in a virtual bicategory">Left- and right-cocartesian 2-cells in a virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; given a <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>left-cocartesian</html:em> if for 2-cell <fr:tex display="inline"><![CDATA[{\Psi ;\Xi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f\right  ]\mathclose {}};\Psi }\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\alpha ,\overrightarrow {1_{\Xi _i}\ldots }\right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p>
        <html:p>Dually, given a path <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{\Psi }}{C}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{f}}{C}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>right-cocartesian</html:em> if for 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;\Psi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;{\mathopen {}\left  [f\right  ]\mathclose {}}}\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\overrightarrow {1_{\Phi _i}\ldots },\alpha \right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p>
        <html:p>These definitions are due to <fr:link href="/arkor-mcdermott-2023-formal/" title="The formal theory of relative monads" uri="https://www.jonmsterling.com/arkor-mcdermott-2023-formal/" display-uri="arkor-mcdermott-2023-formal" type="local">Arkor and McDermott</fr:link>.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-0059/</fr:uri>
        <fr:display-uri>jms-0059</fr:display-uri>
        <fr:route>/jms-0059/</fr:route>
        <fr:title text="Composites in a virtual bicategory">Composites in a virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>, and let <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> be a <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex>. Then we define:</html:p>
        <html:ol><html:li>a <html:em>composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0057/" title="Cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0057/" display-uri="jms-0057" type="local">cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>;</html:li>
  <html:li>a <html:em>left half-composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0058/" title="Left- and right-cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0058/" display-uri="jms-0058" type="local">left-cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>;</html:li>
  <html:li>a <html:em>right half-composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0058/" title="Left- and right-cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0058/" display-uri="jms-0058" type="local">right-cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>.</html:li></html:ol>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-005A/</fr:uri>
        <fr:display-uri>jms-005A</fr:display-uri>
        <fr:route>/jms-005A/</fr:route>
        <fr:title text="Bicategories are virtual bicategories with all composites">Bicategories are virtual bicategories with all composites</fr:title>
        <fr:taxon>Observation</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>A <fr:link href="/jms-000E/" title="Bicategory" uri="https://www.jonmsterling.com/jms-000E/" display-uri="jms-000E" type="local">bicategory</fr:link> is the same thing as a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link> that has <html:em>all</html:em> <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">composites</fr:link>, as  observed by <fr:link href="https://www.hedonisticlearning.com/posts/enriched-indexed-categories-syntactically.html" type="external">Derek Elkins</fr:link>.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <html:p>I still don't know if the following are the correct definitions. One would have to check that the left-composite of a pair of maps is isomorphic to the right-composite if both exist, which sounds plausible.</html:p>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-005C/</fr:uri>
        <fr:display-uri>jms-005C</fr:display-uri>
        <fr:route>/jms-005C/</fr:route>
        <fr:title text="Thunkable and linear maps in a virtual bicategory">Thunkable and linear maps in a virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; we isolate two classes of edges:</html:p>
        <html:ol><html:li>an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is called <html:em>thunkable</html:em> if and only if for any edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{g}}{C}]]></fr:tex> there exists a <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">left half-composite</fr:link> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f;g\right  ]\mathclose {}}}\xrightarrow {{\lambda }}{h}]]></fr:tex>;</html:li>
  <html:li>dually, an edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{g}}{C}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is called <html:em>linear</html:em> if and only if for any edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> there exists a <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">right half-composite</fr:link> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f;g\right  ]\mathclose {}}}\xrightarrow {{\rho }}{h}]]></fr:tex>.</html:li></html:ol>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>5</fr:month>
          <fr:day>18</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-005D/</fr:uri>
        <fr:display-uri>jms-005D</fr:display-uri>
        <fr:route>/jms-005D/</fr:route>
        <fr:title text="Polarity in a virtual bicategory">Polarity in a virtual bicategory</fr:title>
        <fr:taxon>Definition</fr:taxon>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; we isolate two classes of objects in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex>, by analogy with the <fr:link href="/jms-004B/" title="Positive and negative objects" uri="https://www.jonmsterling.com/jms-004B/" display-uri="jms-004B" type="local">case</fr:link> for <fr:link href="/jms-0048/" title="Deductive system" uri="https://www.jonmsterling.com/jms-0048/" display-uri="jms-0048" type="local">deductive systems</fr:link>:</html:p>
        <html:ol><html:li>an object <fr:tex display="inline"><![CDATA[B\in \mathcal {K}]]></fr:tex> is called <html:em>positive</html:em> when every edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{f}}{C}]]></fr:tex> is <fr:link href="/jms-005C/" title="Thunkable and linear maps in a virtual bicategory" uri="https://www.jonmsterling.com/jms-005C/" display-uri="jms-005C" type="local">linear</fr:link>;</html:li>
  <html:li>an object <fr:tex display="inline"><![CDATA[B\in \mathcal {K}]]></fr:tex> is called <html:em>negative</html:em> when every edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> is <fr:link href="/jms-005C/" title="Thunkable and linear maps in a virtual bicategory" uri="https://www.jonmsterling.com/jms-005C/" display-uri="jms-005C" type="local">thunkable</fr:link>.</html:li></html:ol>
        <html:p>Then we say that an object is <html:em>polarized</html:em> when it is either positive or negative in the above sense.</html:p>
      </fr:mainmatter>
    </fr:tree>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/nathanaelarkor/" title="Nathanael Arkor" uri="https://www.jonmsterling.com/nathanaelarkor/" display-uri="nathanaelarkor" type="local">Nathanael Arkor</fr:link>
              </fr:author>
              <fr:author>Dylan McDermott</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>27</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/arkor-mcdermott-2023-formal/</fr:uri>
            <fr:display-uri>arkor-mcdermott-2023-formal</fr:display-uri>
            <fr:route>/arkor-mcdermott-2023-formal/</fr:route>
            <fr:title text="The formal theory of relative monads">The formal theory of relative monads</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.48550/arXiv.2302.14014</fr:meta>
            <fr:meta name="bibtex"><![CDATA[@misc{arkor-mcdermott-2023-formal,
  title={The formal theory of relative monads},
  author={Nathanael Arkor and Dylan McDermott},
  year={2023},
  eprint={2302.14014},
  archivePrefix={arXiv},
  primaryClass={math.CT}
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We develop the theory of relative monads and relative adjunctions in a virtual equipment, extending the theory of monads and adjunctions in a 2-category. The theory of relative comonads and relative coadjunctions follows by duality. While some aspects of the theory behave analogously to the non-relative setting, others require new insights. In particular, the universal properties that define the algebra object and the opalgebra object for a monad qua trivial relative monad are stronger than the classical notions of algebra object and opalgebra object for a monad qua monad. Inter alia, we prove a number of representation theorems for relative monads, establishing the unity of several concepts in the literature, including the devices of Walters, the <fr:tex display="inline"><![CDATA[j]]></fr:tex>-monads of Diers, and the relative monads of Altenkirch, Chapman, and Uustalu. A motivating setting is the virtual equipment <fr:tex display="inline"><![CDATA[\mathbb {V}\text {-}\mathbf {Cat}]]></fr:tex> of categories enriched in a monoidal category <fr:tex display="inline"><![CDATA[\mathbb {V}]]></fr:tex>, though many of our results are new even for <fr:tex display="inline"><![CDATA[\mathbb {V}=\mathbf {Set}]]></fr:tex>.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:contributor>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:contributor>
              <fr:contributor>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:contributor>
            </fr:authors>
            <fr:uri>https://www.jonmsterling.com/jms-005E/</fr:uri>
            <fr:display-uri>jms-005E</fr:display-uri>
            <fr:route>/jms-005E/</fr:route>
            <fr:title text="The top of my mind">The top of my mind</fr:title>
          </fr:frontmatter>
          <fr:mainmatter><html:p>These are the trees that I am thinking about right now.</html:p>
  
  <fr:tree show-metadata="false" expanded="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005B/</fr:uri><fr:display-uri>jms-005B</fr:display-uri><fr:route>/jms-005B/</fr:route><fr:title text="Virtual bicategory theory">Virtual bicategory theory</fr:title></fr:frontmatter><fr:mainmatter><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0055/</fr:uri><fr:display-uri>jms-0055</fr:display-uri><fr:route>/jms-0055/</fr:route><fr:title text="Directed graph">Directed graph</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A <html:em>directed graph</html:em> <fr:tex display="inline"><![CDATA[G]]></fr:tex> is defined to be a collection of 0-cells <fr:tex display="inline"><![CDATA[A,B,C,\ldots \in  G]]></fr:tex> together with a collection of edges <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{e}}{B}\in  G]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0056/</fr:uri><fr:display-uri>jms-0056</fr:display-uri><fr:route>/jms-0056/</fr:route><fr:title text="Free category on a directed graph">Free category on a directed graph</fr:title><fr:taxon>Construction</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[G]]></fr:tex> be a <fr:link href="/jms-0055/" title="Directed graph" uri="https://www.jonmsterling.com/jms-0055/" display-uri="jms-0055" type="local">directed graph</fr:link>; a <html:em>path</html:em> in <fr:tex display="inline"><![CDATA[G]]></fr:tex> is defined to be a sequence of compatible edges <fr:tex display="inline"><![CDATA[{\mathopen {}\left  [A_0\xrightarrow {f_0}A_1\xrightarrow {f_1}\ldots \xrightarrow {f_{n-1}}A_n\right  ]\mathclose {}}]]></fr:tex>. Evidently, the free category <fr:tex display="inline"><![CDATA[G^{\star }]]></fr:tex> on <fr:tex display="inline"><![CDATA[G]]></fr:tex> has morphisms given by paths.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0054/</fr:uri><fr:display-uri>jms-0054</fr:display-uri><fr:route>/jms-0054/</fr:route><fr:title text="Virtual bicategory">Virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A <html:em>virtual bicategory</html:em> <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is a <fr:link href="/jms-0055/" title="Directed graph" uri="https://www.jonmsterling.com/jms-0055/" display-uri="jms-0055" type="local">directed graph</fr:link> equipped with the following additional data:</html:p><html:ol><html:li>for each <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and each edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}\in \mathcal {K}]]></fr:tex>, a collection of 2-cells <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}\in \mathcal {K}{\mathopen {}\left (A,B\right )\mathclose {}}]]></fr:tex>;</html:li>
  <html:li>for any edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, an <html:em>identity 2-cell</html:em> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f\right  ]\mathclose {}}}\xrightarrow {{1_{f}}}{f}\in \mathcal {K}{\mathopen {}\left (A,B\right )\mathclose {}}]]></fr:tex>;</html:li>
  <html:li>for any sequence of compatible paths <fr:tex display="inline"><![CDATA[A_0\xrightarrow {\Psi _0}\ldots \xrightarrow {\Psi _{n-1}}A_n\in  \mathcal {K}^{\star }]]></fr:tex> and 2-cells <fr:tex display="inline"><![CDATA[{\Psi _i}\xrightarrow {{\alpha _i}}{f_i}\in \mathcal {K}{\mathopen {}\left (A_i,A_{i+1}\right )\mathclose {}}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f_i\mid  i<n\right  ]\mathclose {}}}\xrightarrow {{\beta }}{g}\in \mathcal {K}{\mathopen {}\left (A_0,A_n\right )\mathclose {}}]]></fr:tex>, a <html:em>composite</html:em> 2-cell <fr:tex display="inline"><![CDATA[{\Psi _0;\ldots ;\Psi _n}\xrightarrow {{{\mathopen {}\left  [\alpha _i\mid  i<n\right  ]\mathclose {}};\beta }}{g}]]></fr:tex>;</html:li>
  <html:li>such that the composition of 2-cells is both associative and unital with respect to identity 2-cells.</html:li></html:ol></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0057/</fr:uri><fr:display-uri>jms-0057</fr:display-uri><fr:route>/jms-0057/</fr:route><fr:title text="Cocartesian 2-cells in a virtual bicategory">Cocartesian 2-cells in a virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; given a path <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>cocartesian</html:em> if any 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;\Psi ;\Xi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;{\mathopen {}\left  [f\right  ]\mathclose {}};\Xi }\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\overrightarrow {1_{\Phi _i}\ldots },\alpha ,\overrightarrow {1_{\Xi _i}\ldots }\right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0058/</fr:uri><fr:display-uri>jms-0058</fr:display-uri><fr:route>/jms-0058/</fr:route><fr:title text="Left- and right-cocartesian 2-cells in a virtual bicategory">Left- and right-cocartesian 2-cells in a virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; given a <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>left-cocartesian</html:em> if for 2-cell <fr:tex display="inline"><![CDATA[{\Psi ;\Xi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f\right  ]\mathclose {}};\Psi }\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\alpha ,\overrightarrow {1_{\Xi _i}\ldots }\right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p><html:p>Dually, given a path <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{\Psi }}{C}\in \mathcal {K}^{\star }]]></fr:tex> and an edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{f}}{C}]]></fr:tex>, a 2-cell <fr:tex display="inline"><![CDATA[{\Psi }\xrightarrow {{\alpha }}{f}]]></fr:tex> is called <html:em>right-cocartesian</html:em> if for 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;\Psi }\xrightarrow {{\beta }}{s}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> in the sense that there exists a unique 2-cell <fr:tex display="inline"><![CDATA[{\Phi ;{\mathopen {}\left  [f\right  ]\mathclose {}}}\xrightarrow {{\beta \setminus \alpha }}{s}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\beta  = {\mathopen {}\left  [\overrightarrow {1_{\Phi _i}\ldots },\alpha \right  ]\mathclose {}};{\mathopen {}\left (\beta \setminus \alpha \right )\mathclose {}}]]></fr:tex>.</html:p><html:p>These definitions are due to <fr:link href="/arkor-mcdermott-2023-formal/" title="The formal theory of relative monads" uri="https://www.jonmsterling.com/arkor-mcdermott-2023-formal/" display-uri="arkor-mcdermott-2023-formal" type="local">Arkor and McDermott</fr:link>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0059/</fr:uri><fr:display-uri>jms-0059</fr:display-uri><fr:route>/jms-0059/</fr:route><fr:title text="Composites in a virtual bicategory">Composites in a virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>, and let <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\Psi }}{B}\in \mathcal {K}^{\star }]]></fr:tex> be a <fr:link href="/jms-0056/" title="Free category on a directed graph" uri="https://www.jonmsterling.com/jms-0056/" display-uri="jms-0056" type="local">path</fr:link> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex>. Then we define:</html:p><html:ol><html:li>a <html:em>composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0057/" title="Cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0057/" display-uri="jms-0057" type="local">cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>;</html:li>
  <html:li>a <html:em>left half-composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0058/" title="Left- and right-cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0058/" display-uri="jms-0058" type="local">left-cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>;</html:li>
  <html:li>a <html:em>right half-composite</html:em> of <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex> is a <fr:link href="/jms-0058/" title="Left- and right-cocartesian 2-cells in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0058/" display-uri="jms-0058" type="local">right-cocartesian 2-cell</fr:link> with domain <fr:tex display="inline"><![CDATA[\Psi ]]></fr:tex>.</html:li></html:ol></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005A/</fr:uri><fr:display-uri>jms-005A</fr:display-uri><fr:route>/jms-005A/</fr:route><fr:title text="Bicategories are virtual bicategories with all composites">Bicategories are virtual bicategories with all composites</fr:title><fr:taxon>Observation</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A <fr:link href="/jms-000E/" title="Bicategory" uri="https://www.jonmsterling.com/jms-000E/" display-uri="jms-000E" type="local">bicategory</fr:link> is the same thing as a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link> that has <html:em>all</html:em> <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">composites</fr:link>, as  observed by <fr:link href="https://www.hedonisticlearning.com/posts/enriched-indexed-categories-syntactically.html" type="external">Derek Elkins</fr:link>.</html:p></fr:mainmatter></fr:tree><html:p>I still don't know if the following are the correct definitions. One would have to check that the left-composite of a pair of maps is isomorphic to the right-composite if both exist, which sounds plausible.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005C/</fr:uri><fr:display-uri>jms-005C</fr:display-uri><fr:route>/jms-005C/</fr:route><fr:title text="Thunkable and linear maps in a virtual bicategory">Thunkable and linear maps in a virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; we isolate two classes of edges:</html:p><html:ol><html:li>an edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is called <html:em>thunkable</html:em> if and only if for any edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{g}}{C}]]></fr:tex> there exists a <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">left half-composite</fr:link> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f;g\right  ]\mathclose {}}}\xrightarrow {{\lambda }}{h}]]></fr:tex>;</html:li>
  <html:li>dually, an edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{g}}{C}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> is called <html:em>linear</html:em> if and only if for any edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> there exists a <fr:link href="/jms-0059/" title="Composites in a virtual bicategory" uri="https://www.jonmsterling.com/jms-0059/" display-uri="jms-0059" type="local">right half-composite</fr:link> <fr:tex display="inline"><![CDATA[{{\mathopen {}\left  [f;g\right  ]\mathclose {}}}\xrightarrow {{\rho }}{h}]]></fr:tex>.</html:li></html:ol></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>18</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005D/</fr:uri><fr:display-uri>jms-005D</fr:display-uri><fr:route>/jms-005D/</fr:route><fr:title text="Polarity in a virtual bicategory">Polarity in a virtual bicategory</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex> be a <fr:link href="/jms-0054/" title="Virtual bicategory" uri="https://www.jonmsterling.com/jms-0054/" display-uri="jms-0054" type="local">virtual bicategory</fr:link>; we isolate two classes of objects in <fr:tex display="inline"><![CDATA[\mathcal {K}]]></fr:tex>, by analogy with the <fr:link href="/jms-004B/" title="Positive and negative objects" uri="https://www.jonmsterling.com/jms-004B/" display-uri="jms-004B" type="local">case</fr:link> for <fr:link href="/jms-0048/" title="Deductive system" uri="https://www.jonmsterling.com/jms-0048/" display-uri="jms-0048" type="local">deductive systems</fr:link>:</html:p><html:ol><html:li>an object <fr:tex display="inline"><![CDATA[B\in \mathcal {K}]]></fr:tex> is called <html:em>positive</html:em> when every edge <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{f}}{C}]]></fr:tex> is <fr:link href="/jms-005C/" title="Thunkable and linear maps in a virtual bicategory" uri="https://www.jonmsterling.com/jms-005C/" display-uri="jms-005C" type="local">linear</fr:link>;</html:li>
  <html:li>an object <fr:tex display="inline"><![CDATA[B\in \mathcal {K}]]></fr:tex> is called <html:em>negative</html:em> when every edge <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> is <fr:link href="/jms-005C/" title="Thunkable and linear maps in a virtual bicategory" uri="https://www.jonmsterling.com/jms-005C/" display-uri="jms-005C" type="local">thunkable</fr:link>.</html:li></html:ol><html:p>Then we say that an object is <html:em>polarized</html:em> when it is either positive or negative in the above sense.</html:p></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree>
  <fr:tree show-metadata="false" expanded="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor><fr:contributor><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001E/</fr:uri><fr:display-uri>jms-001E</fr:display-uri><fr:route>/jms-001E/</fr:route><fr:title text="Constructive domain theory">Constructive domain theory</fr:title></fr:frontmatter><fr:mainmatter><html:p>I am accumulating an understanding of constructive domain theory — that is, the domain theory that can be carried out in an elementary topos with a natural numbers object. These notes are based on the work of <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong</fr:link> and <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Escardó</fr:link>; these notes, however, assume the propositional resizing principle whereas <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">de Jong</fr:link> and <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Escardó</fr:link> explore a predicative version domain theory based on large and locally small domains.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002U/</fr:uri><fr:display-uri>jms-002U</fr:display-uri><fr:route>/jms-002U/</fr:route><fr:title text="Results in constructive monad theory">Results in constructive monad theory</fr:title></fr:frontmatter><fr:mainmatter><html:p>In this section, we gather some useful definitions and results concerning creation of (co)limits. The reason for stating these things explicitly is that the usual definitions of <fr:link href="/jms-001I/" title="The disorder of created limits" uri="https://www.jonmsterling.com/jms-001I/" display-uri="jms-001I" type="local">created (co)limits are deeply irrational in a variety of incompatible ways</fr:link>, so it is important to fix definitions that can work from the start. It would be good to reformulate this in terms of <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed categories</fr:link> of algebras.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>11</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001H/</fr:uri><fr:display-uri>jms-001H</fr:display-uri><fr:route>/jms-001H/</fr:route><fr:title text="Creation of (co)limits">Creation of (co)limits</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathcal {C}}\xrightarrow {{U}}{\mathcal {D}}]]></fr:tex> be a functor and let <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex> be a category. The functor <fr:tex display="inline"><![CDATA[U]]></fr:tex> is said to <html:em>create (co)limits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures</html:em> when for any diagram <fr:tex display="inline"><![CDATA[{\mathcal {I}}\xrightarrow {{C_\bullet }}{\mathcal {C}}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\mathcal {I}\xrightarrow {C_\bullet }\mathcal {C}\xrightarrow {U}\mathcal {D}]]></fr:tex> has a (co)limit, then <fr:tex display="inline"><![CDATA[C_\bullet ]]></fr:tex> has a (co)limit that is both preserved and reflected by <fr:tex display="inline"><![CDATA[U]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><html:p>We aim to understand sufficient conditions for a forgetful functor to <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">create colimits</fr:link>. As we will show below, <fr:link href="/jms-001K/" title="Creation of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001K/" display-uri="jms-001K" type="local">it is sufficient for these colimits to be preserved the the monad</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001J/</fr:uri><fr:display-uri>jms-001J</fr:display-uri><fr:route>/jms-001J/</fr:route><fr:title text="Algebra structure on the colimit apex">Algebra structure on the colimit apex</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be a category and let <fr:tex display="inline"><![CDATA[\mathbb {T} = {\mathopen {}\left (T,\eta ,\mu \right )\mathclose {}}]]></fr:tex> be a monad on <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, writing <fr:tex display="inline"><![CDATA[{\mathcal {C}^{\mathbb {T}}}\xrightarrow {{U}}{\mathcal {C}}]]></fr:tex> for the forgetful functor from the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex>. Suppose that <fr:tex display="inline"><![CDATA[T]]></fr:tex> preserves colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures for a given small category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>. Let <fr:tex display="inline"><![CDATA[{\mathcal {I}}\xrightarrow {{X_\bullet }}{\mathcal {C}^{\mathbb {T}}}]]></fr:tex> be a diagram in <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\mathcal {I}\xrightarrow {X_\bullet }\mathcal {C}^{\mathbb {T}}\xrightarrow {U}\mathcal {C}]]></fr:tex> has a universal cocone <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{c_\bullet }}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex>. We may lift <fr:tex display="inline"><![CDATA[C]]></fr:tex> to an essentially unique <fr:tex display="inline"><![CDATA[\mathbb {T}]]></fr:tex>-algebra structure <fr:tex display="inline"><![CDATA[\bar {C}]]></fr:tex> with <fr:tex display="inline"><![CDATA[U\bar {C}=C]]></fr:tex> in a canonical way such that <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{c_\bullet }}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex> lifts to a cocone of algebras <fr:tex display="inline"><![CDATA[{X_{\bullet }}\xrightarrow {{\bar {c}_{\bullet }}}{\bar {C}}]]></fr:tex> with <fr:tex display="inline"><![CDATA[U\bar {c}_\bullet =c_\bullet ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>By assumption, <fr:tex display="inline"><![CDATA[{TUX_\bullet }\xrightarrow {{Tc_\bullet }}{{\mathopen {}\left \{TC\right \}\mathclose {}}}]]></fr:tex> is a universal cocone. We may define a further cocone <fr:tex display="inline"><![CDATA[TUX_\bullet \xrightarrow {\alpha _{X_\bullet }}UX_\bullet \xrightarrow {c_\bullet }{\mathopen {}\left \{C\right \}\mathclose {}}]]></fr:tex>. The universal property of <fr:tex display="inline"><![CDATA[Tc_\bullet ]]></fr:tex> then gives us a unique morphism <fr:tex display="inline"><![CDATA[{TC}\xrightarrow {{\beta }}{C}]]></fr:tex> satisfying the following condition:</html:p>

  
 
  
  <html:figure><fr:resource hash="ebe727c8b0f1eed6c22e6b8ea27078da"><fr:resource-content><html:img src="/ebe727c8b0f1eed6c22e6b8ea27078da.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = TUX_\bullet ,
      sw = UX_\bullet ,
      ne = {\mathopen {}\left \{TC\right \}\mathclose {}},
      se = {\mathopen {}\left \{C\right \}\mathclose {}},
      west = \alpha _{X_\bullet },
      south = c_\bullet ,
      east = \exists !{\mathopen {}\left \{\beta \right \}\mathclose {}},
      north = Tc_\bullet ,
      east/style = {exists,->},
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must show that the map <fr:tex display="inline"><![CDATA[{TC}\xrightarrow {{\beta }}{C}]]></fr:tex> depicted above satisfies the axioms of a <fr:tex display="inline"><![CDATA[\mathbb {T}]]></fr:tex>-algebra.</html:p>

  <html:ol><html:li><html:p>To show that <fr:tex display="inline"><![CDATA[C\xrightarrow {\eta _C}TC\xrightarrow {\beta }C]]></fr:tex> is the identity, we note that <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{c_\bullet }}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex> is universal so it suffices to check that <fr:tex display="inline"><![CDATA[UX_\bullet \xrightarrow {c_\bullet }{\mathopen {}\left \{C\right \}\mathclose {}}\xrightarrow {{\mathopen {}\left \{\eta _C\right \}\mathclose {}}}{\mathopen {}\left \{TC\right \}\mathclose {}}\xrightarrow {{\mathopen {}\left \{\beta \right \}\mathclose {}}}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex> is equal to <fr:tex display="inline"><![CDATA[c_\bullet ]]></fr:tex> by the uniqueness property. This follows by inspection of the following commuting diagram, in which the top square is the naturality of the unit:</html:p>


      
 
  
  <html:figure><fr:resource hash="ea38e560714acc78e46bd44be5f620ba"><fr:resource-content><html:img src="/ea38e560714acc78e46bd44be5f620ba.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \SpliceDiagramSquare <n/>{
            nw = UX_\bullet ,
            ne = {\mathopen {}\left \{C\right \}\mathclose {}},
            sw = TUX_\bullet ,
            se = {\mathopen {}\left \{TC\right \}\mathclose {}},
            north = c_\bullet ,
            east = {\mathopen {}\left \{\eta _C\right \}\mathclose {}},
            west = \eta _{X_\bullet },
            south = Tc_\bullet ,
            south/node/style = upright desc,
            west/node/style = upright desc,
            width = 2.5cm,
          }
          \node [below=of n/sw] (s/sw) {$UX_\bullet $};
          \node [below=of n/se] (s/se) {${\mathopen {}\left \{C\right \}\mathclose {}}$};
          \draw [->] (n/sw) to node[upright desc] {$\alpha _{X_\bullet }$} (s/sw);
          \draw [->,bend right=45] (n/nw) to node[left] {$1_{UX_\bullet }$} (s/sw);
          \draw [->] (n/se) to node[right] {${\mathopen {}\left \{\beta \right \}\mathclose {}}$} (s/se);
          \draw [->] (s/sw) to node[below] {$c_\bullet $} (s/se);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure></html:li>

    <html:li><html:p>We must check that the the following multiplication square commutes:</html:p>
      
 
  
  <html:figure><fr:resource hash="ccd36aa301200d1e36bc32d6b600f7ea"><fr:resource-content><html:img src="/ccd36aa301200d1e36bc32d6b600f7ea.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \DiagramSquare {
          nw = TTC,
          ne = TC,
          sw = TC,
          se = C,
          east = \beta ,
          south = \beta ,
          north = T\beta ,
          west = \mu _C,
        }
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>By assumption, we know that <fr:tex display="inline"><![CDATA[{TTUX_\bullet }\xrightarrow {{TTc_\bullet }}{{\mathopen {}\left \{TTC\right \}\mathclose {}}}]]></fr:tex> is a universal cocone; using this fact as well as the naturality of <fr:tex display="inline"><![CDATA[\mu ]]></fr:tex>, it suffices to check that the following diagram commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="072880a61cf470a4f1ed14ecee71ff85"><fr:resource-content><html:img src="/072880a61cf470a4f1ed14ecee71ff85.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \SpliceDiagramSquare <l/>{
            east/style = {draw=none},
            nw = TTUX_\bullet ,
            sw = TUX_\bullet ,
            ne = {\mathopen {}\left \{TTC\right \}\mathclose {}},
            se = {\mathopen {}\left \{TC\right \}\mathclose {}},
            north = TTc_\bullet ,
            south = Tc_\bullet ,
            west = \mu _{UX_\bullet },
            width = 2.5cm,
          }
          \SpliceDiagramSquare <r/>{
            glue target = l/, glue = west,
            ne = {\mathopen {}\left \{TC\right \}\mathclose {}},
            se = {\mathopen {}\left \{C\right \}\mathclose {}},
            north = {\mathopen {}\left \{T\beta \right \}\mathclose {}},
            east = {\mathopen {}\left \{\beta \right \}\mathclose {}},
            south = {\mathopen {}\left \{\beta \right \}\mathclose {}},
            width = 2.5cm,
          }
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>We compute algebraically, using the algebra property of <fr:tex display="inline"><![CDATA[X]]></fr:tex> among other assumptions:</html:p>

      <fr:tex display="block"><![CDATA[  \begin {aligned}
        TTc_\bullet ;{\mathopen {}\left \{T\beta \right \}\mathclose {}};{\mathopen {}\left \{\beta \right \}\mathclose {}}
        & =
        T{\mathopen {}\left (Tc_\bullet ;{\mathopen {}\left \{\beta \right \}\mathclose {}}\right )\mathclose {}};{\mathopen {}\left \{\beta \right \}\mathclose {}}
        \\
        & =
        T{\mathopen {}\left (\alpha _{X_\bullet };c_\bullet \right )\mathclose {}};{\mathopen {}\left \{\beta \right \}\mathclose {}}
        \\
        & =
        T\alpha _{X_\bullet };Tc_\bullet ;{\mathopen {}\left \{\beta \right \}\mathclose {}}
        \\
        & =
        T\alpha _{X_\bullet };\alpha _{X_\bullet };c_\bullet 
        \\
        & =
        \mu _{UX_\bullet };
        \alpha _{X_\bullet };
        c_\bullet 
        \\
        & =
        \mu _{UX_\bullet };Tc_\bullet ;{\mathopen {}\left \{\beta \right \}\mathclose {}}
      \end {aligned}
      ]]></fr:tex></html:li></html:ol>
  <html:p>Hence we may define a <fr:tex display="inline"><![CDATA[\mathbb {T}]]></fr:tex>-algebra structure <fr:tex display="inline"><![CDATA[\bar {C}]]></fr:tex> with <fr:tex display="inline"><![CDATA[U\bar {C}=C]]></fr:tex>, setting <fr:tex display="inline"><![CDATA[{TC}\xrightarrow {{\alpha _{\bar {C}}}}{C}]]></fr:tex> to be <fr:tex display="inline"><![CDATA[\beta ]]></fr:tex>. That <fr:tex display="inline"><![CDATA[c_\bullet ]]></fr:tex> lifts to a cocone of algebras is <html:em>exactly</html:em> the defining condition of <fr:tex display="inline"><![CDATA[\alpha _{\bar {C}}=\beta ]]></fr:tex> via the universal property of <fr:tex display="inline"><![CDATA[{TUX_\bullet }\xrightarrow {{Tc_\bullet }}{{\mathopen {}\left \{TC\right \}\mathclose {}}}]]></fr:tex>; uniqueness of the algebra structure with this property follows from the same universal property.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>11</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001G/</fr:uri><fr:display-uri>jms-001G</fr:display-uri><fr:route>/jms-001G/</fr:route><fr:title text="Reflection of colimits by the forgetful functor">Reflection of colimits by the forgetful functor</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be a category and let <fr:tex display="inline"><![CDATA[\mathbb {T} = {\mathopen {}\left (T,\eta ,\mu \right )\mathclose {}}]]></fr:tex> be a monad on <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, writing <fr:tex display="inline"><![CDATA[{\mathcal {C}^{\mathbb {T}}}\xrightarrow {{U}}{\mathcal {C}}]]></fr:tex> for the forgetful functor from the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex>. If <fr:tex display="inline"><![CDATA[T]]></fr:tex> preserves colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures for a given indexing category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, then <fr:tex display="inline"><![CDATA[{\mathcal {C}^{\mathbb {T}}}\xrightarrow {{U}}{\mathcal {C}}]]></fr:tex> reflects colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>11</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[{\mathcal {I}}\xrightarrow {{X_\bullet }}{\mathcal {C}^{\mathbb {T}}}]]></fr:tex> be a diagram in <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex> and let <fr:tex display="inline"><![CDATA[{X_\bullet }\xrightarrow {{y_\bullet }}{{\mathopen {}\left \{Y\right \}\mathclose {}}}]]></fr:tex> be a cocone in <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{Uy_\bullet }}{{\mathopen {}\left \{UY\right \}\mathclose {}}}]]></fr:tex> is a universal cocone for <fr:tex display="inline"><![CDATA[UX_\bullet  = \mathcal {I}\xrightarrow {X_\bullet }\mathcal {C}^{\mathbb {T}}\xrightarrow {U}\mathcal {C}]]></fr:tex>. We must show that <fr:tex display="inline"><![CDATA[{X_\bullet }\xrightarrow {{y_\bullet }}{{\mathopen {}\left \{Y\right \}\mathclose {}}}]]></fr:tex> is a universal cocone.</html:p>

  <html:p>In particular, we must factor any cocone <fr:tex display="inline"><![CDATA[{X_\bullet }\xrightarrow {{z_\bullet }}{{\mathopen {}\left \{Z\right \}\mathclose {}}}]]></fr:tex> uniquely through <fr:tex display="inline"><![CDATA[{X_\bullet }\xrightarrow {{y_\bullet }}{{\mathopen {}\left \{Y\right \}\mathclose {}}}]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[Uy_\bullet ]]></fr:tex> is universal, there exists a unique <fr:tex display="inline"><![CDATA[{Y}\xrightarrow {{h}}{Z}]]></fr:tex> such that the following diagram commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="1d3db6d34c43a311f42c2348b84bf9ea"><fr:resource-content><html:img src="/1d3db6d34c43a311f42c2348b84bf9ea.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$UX_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{UY\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{UZ\right \}\mathclose {}}$};
      \draw [->] (nw) to node[above] {$Uy_\bullet $} (ne);
      \draw [->] (nw) to node[sloped,below] {$Uz_\bullet $} (se);
      \draw [->] (ne) to node[right] {$\exists !{\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must check that <fr:tex display="inline"><![CDATA[h]]></fr:tex> is a homomorphism of <fr:tex display="inline"><![CDATA[\mathbb {T}]]></fr:tex>-algebras:</html:p>

  
 
  
  <html:figure><fr:resource hash="d094eb6b13f672db1a41bc821a945521"><fr:resource-content><html:img src="/d094eb6b13f672db1a41bc821a945521.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = TUY,
      sw = TUZ,
      ne = UY,
      se = UZ,
      south = \alpha _Z,
      north = \alpha _Y,
      west = Th,
      east = h,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>To see that <fr:tex display="inline"><![CDATA[\alpha _Y;h = Th;\alpha _Z]]></fr:tex> it suffices to observe that they both factor the cocone</html:p>

  <fr:tex display="block"><![CDATA[TUX_\bullet \xrightarrow {\alpha _{X_\bullet }}UX_\bullet \xrightarrow {Uz_\bullet }{\mathopen {}\left \{UZ\right \}\mathclose {}}]]></fr:tex>


  <html:p>through the  cocone <fr:tex display="inline"><![CDATA[{TUX_\bullet }\xrightarrow {{TUy_\bullet }}{{\mathopen {}\left \{TUY\right \}\mathclose {}}}]]></fr:tex>, which is universal by our assumption that <fr:tex display="inline"><![CDATA[T]]></fr:tex> preserves <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-colimits.</html:p>

  <html:ol><html:li><html:p>First we must check that the following diagram commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="c404f0e087546704750cc698e44eacf5"><fr:resource-content><html:img src="/c404f0e087546704750cc698e44eacf5.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \DiagramSquare {
          nw = TUX_\bullet ,
          sw = UX_\bullet ,
          se = {\mathopen {}\left \{UZ\right \}\mathclose {}},
          ne = {\mathopen {}\left \{TUY\right \}\mathclose {}},
          north = TUy_\bullet ,
          west = \alpha _{X_\bullet },
          south = Uz_\bullet ,
          east = \alpha _Y;h,
          width = 2.5cm,
        }
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>This holds immediately from the homomorphism property of <fr:tex display="inline"><![CDATA[y_\bullet ]]></fr:tex>.</html:p></html:li>

    <html:li><html:p>Second, we must check that the following diagram commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="54b06e27e8e860e21d2049735bdd76fb"><fr:resource-content><html:img src="/54b06e27e8e860e21d2049735bdd76fb.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \DiagramSquare {
          nw = TUX_\bullet ,
          sw = UX_\bullet ,
          se = {\mathopen {}\left \{UZ\right \}\mathclose {}},
          ne = {\mathopen {}\left \{TUY\right \}\mathclose {}},
          north = TUy_\bullet ,
          west = \alpha _{X_\bullet },
          south = Uz_\bullet ,
          east = Th;\alpha _Z,
          width = 2.5cm,
        }
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>This follows from the factorization <fr:tex display="inline"><![CDATA[Uy_\bullet ;h=Uz_\bullet ]]></fr:tex> and the homomorphism property of <fr:tex display="inline"><![CDATA[z_\bullet ]]></fr:tex>.</html:p></html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001K/</fr:uri><fr:display-uri>jms-001K</fr:display-uri><fr:route>/jms-001K/</fr:route><fr:title text="Creation of colimits by the forgetful functor">Creation of colimits by the forgetful functor</fr:title><fr:taxon>Theorem</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be a category and let <fr:tex display="inline"><![CDATA[\mathbb {T} = {\mathopen {}\left (T,\eta ,\mu \right )\mathclose {}}]]></fr:tex> be a monad on <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, writing <fr:tex display="inline"><![CDATA[{\mathcal {C}^{\mathbb {T}}}\xrightarrow {{U}}{\mathcal {C}}]]></fr:tex> for the forgetful functor from the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathcal {C}^{\mathbb {T}}]]></fr:tex>. If <fr:tex display="inline"><![CDATA[T]]></fr:tex> preserves colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures for a given small category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, then <fr:tex display="inline"><![CDATA[{\mathcal {C}^{\mathbb {T}}}\xrightarrow {{U}}{\mathcal {C}}]]></fr:tex> <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">creates</fr:link> colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[{\mathcal {I}}\xrightarrow {{X_\bullet }}{\mathcal {C}^{\mathbb {T}}}]]></fr:tex> be a diagram such that <fr:tex display="inline"><![CDATA[\mathcal {I}\xrightarrow {X_\bullet }\mathcal {C}^{\mathbb {T}}\xrightarrow {U}\mathcal {C}]]></fr:tex> has a (co)limit cocone <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{c_\bullet }}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex>. Let <fr:tex display="inline"><![CDATA[\bar {C}={\mathopen {}\left (C,\alpha _{\bar {C}}\right )\mathclose {}}]]></fr:tex> be the <fr:link href="/jms-001J/" title="Algebra structure on the colimit apex" uri="https://www.jonmsterling.com/jms-001J/" display-uri="jms-001J" type="local">canonical algebra structure on the colimit apex</fr:link> <fr:tex display="inline"><![CDATA[C]]></fr:tex> such that <fr:tex display="inline"><![CDATA[{UX_\bullet }\xrightarrow {{c_\bullet }}{{\mathopen {}\left \{C\right \}\mathclose {}}}]]></fr:tex> lifts to a cocone of algebras. Then we conclude that this cocone is universal because <fr:tex display="inline"><![CDATA[U]]></fr:tex> <fr:link href="/jms-001G/" title="Reflection of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001G/" display-uri="jms-001G" type="local">reflects colimits of <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>-figures</fr:link>. It is evident (by definition) that <fr:tex display="inline"><![CDATA[U]]></fr:tex> preserves this colimit.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001W/</fr:uri><fr:display-uri>jms-001W</fr:display-uri><fr:route>/jms-001W/</fr:route><fr:title text="Pointed dcpos and lift-algebras">Pointed dcpos and lift-algebras</fr:title></fr:frontmatter><fr:mainmatter><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001S/</fr:uri><fr:display-uri>jms-001S</fr:display-uri><fr:route>/jms-001S/</fr:route><fr:title text="Pointed dcpo">Pointed dcpo</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A dcpo is called <html:em>pointed</html:em> when it has a bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> under the information order.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001U/</fr:uri><fr:display-uri>jms-001U</fr:display-uri><fr:route>/jms-001U/</fr:route><fr:title text="Suprema of semidirected subsets in pointed dcpos">Suprema of semidirected subsets in pointed dcpos</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> if and only if it is closed under suprema of semidirected subsets.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is closed under suprema of semidirected subsets. In particular, we may consider the supremum <fr:tex display="inline"><![CDATA[\bigsqcup {\mathopen {}\left \{\right \}\mathclose {}}]]></fr:tex> of the empty set. This is evidently the bottom element, using the universal property of the supremum.</html:p>

  <html:p>Conversely, suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is pointed and let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be semidirected. We may replace <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> by the directed subset <fr:tex display="inline"><![CDATA[I' = I\cup  {\mathopen {}\left \{\bot \right \}\mathclose {}}]]></fr:tex>; the inclusion <fr:tex display="inline"><![CDATA[I\subseteq  I']]></fr:tex> is clearly cofinal, so the supremum of <fr:tex display="inline"><![CDATA[I']]></fr:tex> is also the supremum of <fr:tex display="inline"><![CDATA[I]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001T/</fr:uri><fr:display-uri>jms-001T</fr:display-uri><fr:route>/jms-001T/</fr:route><fr:title text="Pointed dcpos are lift-algebras">Pointed dcpos are lift-algebras</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo carries a (unique) <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra structure.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The algebra structure is unique if it exists because <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex> is a Kock–Zöberlein monad, i.e. a monad for which the structure maps of algebras are left adjoint to the unit in the order-enrichment. Therefore, it suffices to show that there merely exists an algebra structure <fr:tex display="inline"><![CDATA[{\mathsf {L}{A}}\xrightarrow {{\alpha }}{A}]]></fr:tex> for any <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>

  <html:p>We define the structure map <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> to take <fr:tex display="inline"><![CDATA[u\in \mathsf {L}{A}]]></fr:tex> to the <fr:link href="/jms-001U/" title="Suprema of semidirected subsets in pointed dcpos" uri="https://www.jonmsterling.com/jms-001U/" display-uri="jms-001U" type="local">supremum of the semidirected subset</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{x\in  A \mid  u = \eta _Ax\right \}\mathclose {}}]]></fr:tex>, so we may write <fr:tex display="inline"><![CDATA[\alpha  u = \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>. It is not difficult to see that this assignment is continuous.</html:p>

  <html:p>The unit law for the algebra is trivial. The multiplication law is verified as follows:</html:p>

  <fr:tex display="block"><![CDATA[\alpha {\mathopen {}\left (\mathsf {L}{\alpha } {\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  = \alpha {\mathopen {}\left (\phi , \alpha  u\right )\mathclose {}}
  =
  \bigsqcup _{p:u{\downarrow }}
  \bigsqcup _{q:u[p]{\downarrow }}
  u[p][q]
  = \alpha {\mathopen {}\left (\mu _A{\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001V/</fr:uri><fr:display-uri>jms-001V</fr:display-uri><fr:route>/jms-001V/</fr:route><fr:title text="Lift-algebras are pointed">Lift-algebras are pointed</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> be a <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra; then the underlying dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>To define the bottom element of <fr:tex display="inline"><![CDATA[A]]></fr:tex>, we choose <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[n\in  A]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  n]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> is a Kock–Zöberlein monad and thus we have <fr:tex display="inline"><![CDATA[\alpha \dashv \eta _{A}]]></fr:tex>, it is equivalent to observe that <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  \eta _{A}n]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001X/</fr:uri><fr:display-uri>jms-001X</fr:display-uri><fr:route>/jms-001X/</fr:route><fr:title text="Bottom-preserving maps vs. algebra morphisms">Bottom-preserving maps vs. algebra morphisms</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{\mathopen {}\left (B,\beta \right )\mathclose {}}]]></fr:tex> be two <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras; then a morphism of dcpos <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> is a homomorphism of algebras if and only if it preserves the <fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">bottom element</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>It is clear that a homomorphism of algebras must preserve the bottom element. On the other hand, suppose that <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> preserves the bottom element to check that the following diagram commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="a12c1f3a32a1b3f57c1bd9b0cbcdb3e3"><fr:resource-content><html:img src="/a12c1f3a32a1b3f57c1bd9b0cbcdb3e3.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = TA,
      ne = TB,
      sw = A,
      se = B,
      north = Tf,
      south = f,
      west = \alpha ,
      east = \beta ,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Because both composites preserve the bottom element, it is enough to observe that they both take <fr:tex display="inline"><![CDATA[u\in  TA]]></fr:tex> to the supremum of the following <html:em>semi</html:em>directed subset:</html:p>

  <fr:tex display="block"><![CDATA[{\mathopen {}\left \{n\in  B\mid  \exists  m:A. u=\eta _{A}m \land  n=fm\right \}\mathclose {}}]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001Y/</fr:uri><fr:display-uri>jms-001Y</fr:display-uri><fr:route>/jms-001Y/</fr:route><fr:title text="Monadicity of pointed dcpos">Monadicity of pointed dcpos</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The category of <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras and homomorphisms is (canonically) equivalent to the category of <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> and bottom-preserving morphisms of dcpos. It follows that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos are <html:em>monadic</html:em> over dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Having a bottom element and being an algebra are both <html:em>properties</html:em> of dcpos, because these structures are uniquely determined. Therefore, we will argue that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> with bottom-preserving morphisms form the same <html:em>subcategory</html:em> of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}]]></fr:tex> as the category of algebras with algebra-preserving maps. We have already seen that pointed structure and algebra structure are interchangeable:</html:p>

  <html:ol><html:li><fr:link href="/jms-001T/" title="Pointed dcpos are lift-algebras" uri="https://www.jonmsterling.com/jms-001T/" display-uri="jms-001T" type="local">Pointed dcpos are lift-algebras</fr:link></html:li>
    <html:li><fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">Lift-algebras are pointed</fr:link></html:li></html:ol>


  <html:p>To finish, we recall that a morphism of dcpos <fr:link href="/jms-001X/" title="Bottom-preserving maps vs. algebra morphisms" uri="https://www.jonmsterling.com/jms-001X/" display-uri="jms-001X" type="local">preserves algebra structure if and only if it preserves the bottom element</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><html:p>By virtue of the <fr:link href="/jms-001Y/" title="Monadicity of pointed dcpos" uri="https://www.jonmsterling.com/jms-001Y/" display-uri="jms-001Y" type="local">monadicity result</fr:link>, we will refer to <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos and <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras interchangeably.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001R/</fr:uri><fr:display-uri>jms-001R</fr:display-uri><fr:route>/jms-001R/</fr:route><fr:title text="Cocompleteness of lift-algebras">Cocompleteness of lift-algebras</fr:title></fr:frontmatter><fr:mainmatter><html:p>We will deduce the closure of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under connected colimits using <fr:link href="/jms-002U/" title="Results in constructive monad theory" uri="https://www.jonmsterling.com/jms-002U/" display-uri="jms-002U" type="local">general results about monads</fr:link>. Then we use the results of <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link> to <fr:link href="/jms-005G/" title="The category of lift-algebras is cocomplete" uri="https://www.jonmsterling.com/jms-005G/" display-uri="jms-005G" type="local">deduce</fr:link> the cocompleteness of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex>. <html:mark>Note that the proof establishing that the lift monad preserves connected colimits has an error in it. I have a fix for it, suggested by <fr:link href="/ohadkammar/" title="Ohad Kammar" uri="https://www.jonmsterling.com/ohadkammar/" display-uri="ohadkammar" type="local">Ohad Kammar</fr:link>, but I haven't written it down yet here.</html:mark></html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001D/</fr:uri><fr:display-uri>jms-001D</fr:display-uri><fr:route>/jms-001D/</fr:route><fr:title text="Lifting as a co-comma construction">Lifting as a co-comma construction</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>For any dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>, the following is a co-comma square in the posetal 2-category of dcpos, where <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> takes a dcpo to its <html:em>lift</html:em> or <html:em>Scott-open partial map classifier</html:em>.</html:p>
 
  
  <html:figure><fr:resource hash="0b33979e8323ca58b43bb7f762d8e0b5"><fr:resource-content><html:img src="/0b33979e8323ca58b43bb7f762d8e0b5.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \SpliceDiagramSquare {
      nw = A,
      sw = A,
      ne = \mathbf {1}_{},
      se = \mathsf {L}{A},
      north = !_{A},
      east = \bot ,
      east/style = embedding,
      south/style = embedding,
      south = \eta _A,
      west/style = double,
    }
    \node  [between = nw and se] {$\sqsupseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix another lax square of the following form:</html:p>

  
 
  
  <html:figure><fr:resource hash="8bed4dbcbef36330f8096a7b4a0e14af"><fr:resource-content><html:img src="/8bed4dbcbef36330f8096a7b4a0e14af.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare {
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A},
        east = d_\bot ,
        south = d_A,
        west/style = double,
      }
      \node  [between = nw and se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must show that there exists a <html:em>unique</html:em> morphism <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> factoring the square above through <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{d_\bot \sqsubseteq  d_A\right \}\mathclose {}}]]></fr:tex> as follows:</html:p>

  
 
  
  <html:figure><fr:resource hash="a466ed161a36af5f98013c1dd2a44cee"><fr:resource-content><html:img src="/a466ed161a36af5f98013c1dd2a44cee.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A},
        north = !_{A},
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _A,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$d_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$d_A$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !d$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We will define <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> to take <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex> to the least upper bound of the directed subset <fr:tex display="inline"><![CDATA[U = {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{d_A a\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\subseteq  D]]></fr:tex>. As this assignment evidently has the correct factorization property, it remains just to check that it is continuous. Letting <fr:tex display="inline"><![CDATA[V]]></fr:tex> be a directed subset of <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>, we compute:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d\bigsqcup  V & = \bigsqcup \,{\mathopen {}\left (
      {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup 
      {\mathopen {}\left \{d_Aa\mid  \bigsqcup  V = \eta _A a\right \}\mathclose {}}
    \right )\mathclose {}}
    \\
                & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  \eta _Aa\in  V\right \}\mathclose {}}\right )\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{\bigsqcup  {\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}} \mid  a^{?}\in  V\right \}\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{da^{?}\mid  a^{?}\in  V\right \}\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For uniqueness, suppose that we have two morphisms <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d,d'}D]]></fr:tex> factoring our square in the sense described above and fix <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex>:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d a^{?} & = d\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d'\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d'\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'a^{?}
  \end {aligned}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001F/</fr:uri><fr:display-uri>jms-001F</fr:display-uri><fr:route>/jms-001F/</fr:route><fr:title text="Lifting preserves connected colimits">Lifting preserves connected colimits</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex> be a diagram of dcpos indexed in a connected category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>. Then the lifting endofunctor <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> on dcpos preserves the colimit of <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet \xrightarrow {\iota _\bullet }{\mathopen {}\left \{A_\infty \right \}\mathclose {}}]]></fr:tex> be a universal cocone; we must show that <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> is universal as well, i.e. show any cocone <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {d_\bullet }{\mathopen {}\left \{D\right \}\mathclose {}}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> in the following sense:</html:p>

  
 
  
  <html:figure><fr:resource hash="4fd9a1490d281cbc24b652123bac4ff4"><fr:resource-content><html:img src="/4fd9a1490d281cbc24b652123bac4ff4.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [exists,->] (ne) to node[right] {$\exists !{\mathopen {}\left \{d_\infty \right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the <fr:link href="/jms-001D/" title="Lifting as a co-comma construction" uri="https://www.jonmsterling.com/jms-001D/" display-uri="jms-001D" type="local">universal property of <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> as a co-comma dcpo</fr:link>, we may define <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }\xrightarrow {d_\infty }D]]></fr:tex> to be the universal map determined by a certain lax square in the following configuration:</html:p>

  
 
  
  <html:figure><fr:resource hash="756d18c413e345dee58f06695c582131"><fr:resource-content><html:img src="/756d18c413e345dee58f06695c582131.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A_\infty },
        east = {h_\bot },
        east/style = {exists,->},
        south/style = {exists,->},
        south = {h_{A_\infty }},
        west/style = double,
      }
      \node [between = sq/nw and sq/se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>First we define <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{h_\bot }}{D}]]></fr:tex> to be the element <fr:tex display="inline"><![CDATA[d_i\bot ]]></fr:tex> determined by an <html:em>arbitrary</html:em> object <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex>. To see that this is well-defined, fix <fr:tex display="inline"><![CDATA[i,j\in  \mathcal {I}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[d_i\bot =d_j\bot ]]></fr:tex>. As <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex> is connected, we may proceed by induction on a zigzag <fr:tex display="inline"><![CDATA[i\leadsto  j\in  \mathcal {I}]]></fr:tex>; ultimately, this amounts to checking that for any span <fr:tex display="inline"><![CDATA[i\leftarrow  k \rightarrow  j]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[d_i\bot =d_k\bot =d_j\bot ]]></fr:tex>. This follows from the strictness of lifted morphisms as well as the naturality of the cocone <fr:tex display="inline"><![CDATA[d_\bullet ]]></fr:tex>.</html:p>

  <html:p>Next we define <fr:tex display="inline"><![CDATA[{A_\infty }\xrightarrow {{h_{A_\infty }}}{D}]]></fr:tex> using the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="5a4977e222292b9bffcdd38beea7dd93"><fr:resource-content><html:img src="/5a4977e222292b9bffcdd38beea7dd93.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = A_\bullet ,
      sw = \mathsf {L}{A_\bullet },
      ne = {\mathopen {}\left \{A_\infty \right \}\mathclose {}},
      se = {\mathopen {}\left \{D\right \}\mathclose {}},
      west/style = embedding,
      west = \eta _{A_\bullet },
      north = \iota _\bullet ,
      south = d_\bullet ,
      east/style = {exists,->},
      east = \exists !{\mathopen {}\left \{h_{A_\infty }\right \}\mathclose {}},
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>To arrange <fr:tex display="inline"><![CDATA[h_{A_\infty }]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_\bot ]]></fr:tex> into the desired lax square, we must check that for all <fr:tex display="inline"><![CDATA[a_\infty :A_\infty ]]></fr:tex> we have <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }a_\infty ]]></fr:tex>. Fixing arbitrary <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }\iota _{i}a]]></fr:tex>. As <fr:tex display="inline"><![CDATA[h_\bot =d_i\bot ]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_{A_\infty }\iota _ia = d_i\eta _{A_i}a]]></fr:tex>, our goal follows directly from the monotonicity of <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_i}}\xrightarrow {{d_i}}{D}]]></fr:tex>.</html:p>

  <html:p><html:mark>The reasoning above is not correct, we do not know that we can restrict attention to <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>. This is indeed the case, but need to make it explicit.</html:mark></html:p>

  <html:p>Thus we have the desired lax square and a unique morphism <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{h}}{D}]]></fr:tex> factoring it through the co-comma square that defines <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="7cb13a9c50b1f1e22ae054dd0587dc91"><fr:resource-content><html:img src="/7cb13a9c50b1f1e22ae054dd0587dc91.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A_\infty },
        north = !_{A_\infty },
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _{A_\infty },
        width = 2.5cm,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$h_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$h_{A_\infty }$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !h$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Our goal is to show that we may choose the universal map <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{d_\infty }}{D}]]></fr:tex> corresponding to the cocone <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> to be the morphism <fr:tex display="inline"><![CDATA[h]]></fr:tex> defined above. First we must prove that the following triangle commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="d803bf48a41518517c81554b8bf81852"><fr:resource-content><html:img src="/d803bf48a41518517c81554b8bf81852.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the universal property of the co-comma squares for each <fr:tex display="inline"><![CDATA[\mathsf {L}{A_i}]]></fr:tex>, it suffices to check that two diagrams commute:</html:p>
  <html:ol><html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="a7e2afefaf975f34a17b894fa9991765"><fr:resource-content><html:img src="/a7e2afefaf975f34a17b894fa9991765.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {${\mathopen {}\left \{\mathbf {1}_{}\right \}\mathclose {}}$};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\bot $} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting using the strictness of lifted morphisms, this amounts to the established fact that <fr:tex display="inline"><![CDATA[h\bot  = h_\bot ]]></fr:tex>.</html:p></html:li>

    <html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="fddc455f17cd3f5ddbc90bc089731c90"><fr:resource-content><html:img src="/fddc455f17cd3f5ddbc90bc089731c90.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\eta _{A_\bullet }$} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting with established equations, it suffices to observe that the outer diagram below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="f2f99c5cb6ff34b8755f764313e0c992"><fr:resource-content><html:img src="/f2f99c5cb6ff34b8755f764313e0c992.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [below = of nww] (sww) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \node [right = 2.5cm of nww] (nw) {$LA_\bullet $};
          \node [right = 2.5cm of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->,gray] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->,gray] (nw) to node[upright desc,] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding,gray] (nww) to node[upright desc,] {$\eta _{A_\bullet }$} (nw);
          \draw [->] (nww) to node[left] {$\iota _{\bullet }$} (sww);
          \draw [->] (sww) to node[below] {$h_{A_\infty }$} (se);
          \node [above = of nw] (nnw) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \draw [->] (nww) to node[sloped,above] {$\iota _\bullet $} (nnw);
          \draw [->] (nnw) to node[sloped,above] {${\mathopen {}\left \{\eta _{A_\infty }\right \}\mathclose {}}$} (ne);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure></html:li>

    <html:p>Finally, we must check that any two morphisms <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{k,k'}}{D}]]></fr:tex> factoring <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> through <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{\mathsf {L}{\iota _\bullet }}}{{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}}]]></fr:tex> are equal. To that end, we will use the universal property of the co-comma square defining <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> once more to reduce this to checking that <fr:tex display="inline"><![CDATA[k,k']]></fr:tex> agree on <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> and on <fr:tex display="inline"><![CDATA[\eta _{A_\bullet }]]></fr:tex>. The former follows directly from the strictness of <fr:tex display="inline"><![CDATA[\mathsf {L}{\iota _\bullet }]]></fr:tex>, as we have <fr:tex display="inline"><![CDATA[k\bot  = k{\mathopen {}\left (\mathsf {L} \iota _\bullet \bot \right )\mathclose {}}=d_\bullet \bot ]]></fr:tex>. For the latter, we must check that <fr:tex display="inline"><![CDATA[k\circ  \eta _{A_\infty }=k'\circ  \eta _{A_\infty }]]></fr:tex>; by the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[k\circ \eta _{A_\infty }\circ  \iota _\bullet  = k'\circ \eta _{A_\infty }\circ \iota _\bullet ]]></fr:tex>. By naturality of the unit, these are both equal to <fr:tex display="inline"><![CDATA[d_\bullet \circ  \eta _{A_\bullet }]]></fr:tex>.</html:p></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001L/</fr:uri><fr:display-uri>jms-001L</fr:display-uri><fr:route>/jms-001L/</fr:route><fr:title text="Connected colimits of lift-algebras">Connected colimits of lift-algebras</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> be the lifting monad on dcpos; the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> is closed under connected colimits, and these colimits are <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">created</fr:link> by the forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the following facts:</html:p>
  <html:ol><html:li>The category of dcpos is (even constructively) <fr:link href="/jung-moshier-vickers-2008/" title="Presenting dcpos and dcpo algebras" uri="https://www.jonmsterling.com/jung-moshier-vickers-2008/" display-uri="jung-moshier-vickers-2008" type="local">known to be cocomplete</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">Lifting preserves connected colimits</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001K/" title="Creation of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001K/" display-uri="jms-001K" type="local">The forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex> creates whatever colimits <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> preserves</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005F/</fr:uri><fr:display-uri>jms-005F</fr:display-uri><fr:route>/jms-005F/</fr:route><fr:title text="Coproducts of lift-algebras">Coproducts of lift-algebras</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos has all small coproducts.</html:p><html:p>This is the first part of Corollary 2 of Linton's <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Coequalizers in categories of algebras</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The coproduct of lift-algebras is computed as a reflexive coequalizer, whose existence we have <fr:link href="/jms-001L/" title="Connected colimits of lift-algebras" uri="https://www.jonmsterling.com/jms-001L/" display-uri="jms-001L" type="local">already established</fr:link>. Given an index set <fr:tex display="inline"><![CDATA[I]]></fr:tex> and a diagram <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex>, the colimit of the following reflexive pair is the coproduct of <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex> as shown by <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link>:</html:p>
  
 
  
  <html:figure><fr:resource hash="8c54957660ade9f9bef9650c25a07c4d"><fr:resource-content><html:img src="/8c54957660ade9f9bef9650c25a07c4d.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (0) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {L}\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 4.5cm of 0] (1) {$\mathsf {F}^{\mathbb {L}}\mathsf {L}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 3cm of 1] (2) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \draw [->] (0) to node[above] {$\mathsf {F}^{\mathbb {L}}{\mathopen {}\left  [i\mid  \mathsf {L}\,\mathsf {in}_{i}\right  ]\mathclose {}}$} (1);
      \draw [->] (1) to node[above] {$\epsilon $} (2);
      \draw [->,bend right=30] (0) to node[below] {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\alpha _{X_\bullet }}$} (2);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 

</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005G/</fr:uri><fr:display-uri>jms-005G</fr:display-uri><fr:route>/jms-005G/</fr:route><fr:title text="The category of lift-algebras is cocomplete">The category of lift-algebras is cocomplete</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos is cocomplete.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows because <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under <fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">connected colimits</fr:link> and <fr:link href="/jms-005F/" title="Coproducts of lift-algebras" uri="https://www.jonmsterling.com/jms-005F/" display-uri="jms-005F" type="local">coproducts</fr:link></html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor><fr:contributor><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001Q/</fr:uri><fr:display-uri>jms-001Q</fr:display-uri><fr:route>/jms-001Q/</fr:route><fr:title text="Positivity in constructive domain theory">Positivity in constructive domain theory</fr:title></fr:frontmatter><fr:mainmatter><html:p>These notes were prepared by <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>, based in part on discussions with <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link> and <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>. Any errors belong to <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002C/</fr:uri><fr:display-uri>jms-002C</fr:display-uri><fr:route>/jms-002C/</fr:route><fr:title text="Basic properties of positivity">Basic properties of positivity</fr:title></fr:frontmatter><fr:mainmatter><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001M/</fr:uri><fr:display-uri>jms-001M</fr:display-uri><fr:route>/jms-001M/</fr:route><fr:title text="The positive elements of a pointed dcpo">The positive elements of a pointed dcpo</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>An element <fr:tex display="inline"><![CDATA[u]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dpco <fr:tex display="inline"><![CDATA[A]]></fr:tex> is called <html:em>positive</html:em> when for any semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, if <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> then <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited. We will write <fr:tex display="inline"><![CDATA[\mathsf {pos}\,{u}]]></fr:tex> to mean that <fr:tex display="inline"><![CDATA[u]]></fr:tex> is a positive element.</html:p><html:p>(This is adapted from <fr:link href="/johnstone-1984/" title="Open locales and exponentiation" uri="https://www.jonmsterling.com/johnstone-1984/" display-uri="johnstone-1984" type="local">Johnstone</fr:link>’s definition of positive elements of frames to the case of dcpos by <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong</fr:link>.)</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002H/</fr:uri><fr:display-uri>jms-002H</fr:display-uri><fr:route>/jms-002H/</fr:route><fr:title text="The bottom element is not positive">The bottom element is not positive</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> of a pointed dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is not <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Suppose that <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> was positive. The empty set <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{\right \}\mathclose {}}\subseteq  A]]></fr:tex> is semidirected and <fr:tex display="inline"><![CDATA[\bot \sqsubseteq  \bigsqcup {\mathopen {}\left \{\right \}\mathclose {}}=\bot ]]></fr:tex>, but nonetheless <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{\right \}\mathclose {}}]]></fr:tex> is not inhabited.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0029/</fr:uri><fr:display-uri>jms-0029</fr:display-uri><fr:route>/jms-0029/</fr:route><fr:title text="Positivity is upward-closed">Positivity is upward-closed</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[i\sqsubseteq  j]]></fr:tex> in a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[i]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>; then <fr:tex display="inline"><![CDATA[j]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Fixing semidirected <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[j\sqsubseteq  \bigsqcup {J}]]></fr:tex>, we must show that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited. This follows from our assumption that <fr:tex display="inline"><![CDATA[i]]></fr:tex> is positive becuase <fr:tex display="inline"><![CDATA[i\sqsubseteq  j\sqsubseteq  \bigsqcup {J}]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001O/</fr:uri><fr:display-uri>jms-001O</fr:display-uri><fr:route>/jms-001O/</fr:route><fr:title text="Closure of positivity under directed suprema">Closure of positivity under directed suprema</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; the <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity predicate</fr:link> <fr:tex display="inline"><![CDATA[{\Gamma  A}\xrightarrow {{\mathsf {pos}}}{\Omega }]]></fr:tex> is closed under directed suprema.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> be a directed subset such that every <fr:tex display="inline"><![CDATA[u\in  J]]></fr:tex> is positive; we must show that <fr:tex display="inline"><![CDATA[\bigsqcup {J}]]></fr:tex> is positive. Fixing a subdirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\bigsqcup {J}\sqsubseteq  \bigsqcup  I]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited. The inequality <fr:tex display="inline"><![CDATA[\bigsqcup {J}\sqsubseteq  \bigsqcup  I]]></fr:tex> holds if and only if <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> for all <fr:tex display="inline"><![CDATA[u\in  u]]></fr:tex>; as <fr:tex display="inline"><![CDATA[J]]></fr:tex> is directed, we therefore have some positive <fr:tex display="inline"><![CDATA[u\in  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> from which it follows that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001P/</fr:uri><fr:display-uri>jms-001P</fr:display-uri><fr:route>/jms-001P/</fr:route><fr:title text="The subdcpo spanned by positive elements">The subdcpo spanned by positive elements</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; then the subposet <fr:tex display="inline"><![CDATA[A^+\subseteq  A]]></fr:tex> spanned by <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> is a dcpo.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the <fr:link href="/jms-001O/" title="Closure of positivity under directed suprema" uri="https://www.jonmsterling.com/jms-001O/" display-uri="jms-001O" type="local">closure of positive elements in an algebra under directed suprema</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0028/</fr:uri><fr:display-uri>jms-0028</fr:display-uri><fr:route>/jms-0028/</fr:route><fr:title text="The positive part of a semidirected subset is semidirected">The positive part of a semidirected subset is semidirected</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be a semidirected subset of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>; then the intersection <fr:tex display="inline"><![CDATA[I \cap  A^+]]></fr:tex> is semidirected, where <fr:tex display="inline"><![CDATA[A^+]]></fr:tex> is the <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo spanned by positive elements</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[i,j]]></fr:tex> be two <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> elements of <fr:tex display="inline"><![CDATA[I]]></fr:tex>; we must show that there exists a positive element <fr:tex display="inline"><![CDATA[k\in  I]]></fr:tex> such that <fr:tex display="inline"><![CDATA[i\sqsubseteq  k]]></fr:tex> and <fr:tex display="inline"><![CDATA[j\sqsubseteq  k]]></fr:tex>. This follows immediately from the directedness of <fr:tex display="inline"><![CDATA[I]]></fr:tex> and <fr:link href="/jms-0029/" title="Positivity is upward-closed" uri="https://www.jonmsterling.com/jms-0029/" display-uri="jms-0029" type="local">the fact that positivity is monotone</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001N/</fr:uri><fr:display-uri>jms-001N</fr:display-uri><fr:route>/jms-001N/</fr:route><fr:title text="Positivity = definedness in a lifted dcpo">Positivity = definedness in a lifted dcpo</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> elements of a lifted dcpo <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex> are exactly the <html:em>defined</html:em> elements, i.e. those lying in the image of <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\eta }}{\mathsf {L}{A}}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[a\in  A]]></fr:tex> be an element of the dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>. To show that <fr:tex display="inline"><![CDATA[\eta _A a]]></fr:tex> is positive, we fix a semidirected subset <fr:tex display="inline"><![CDATA[U\subseteq  \mathsf {L}{A}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\eta _A a\sqsubseteq  \bigsqcup  U]]></fr:tex> to show that <fr:tex display="inline"><![CDATA[U]]></fr:tex> is inhabited. The inequality implies that <fr:tex display="inline"><![CDATA[\top \sqsubseteq  \exists  u\in  U. u{\downarrow }]]></fr:tex>, so we know that <fr:tex display="inline"><![CDATA[U]]></fr:tex> is inhabited.</html:p>

  <html:p>Conversely, suppose that <fr:tex display="inline"><![CDATA[u\in \mathsf {L}{A}]]></fr:tex> is a positive element. Let <fr:tex display="inline"><![CDATA[U]]></fr:tex> be the semidirected family <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{v \mid  v = u \land  u\downarrow \right \}\mathclose {}}]]></fr:tex>; we evidently have <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {U}]]></fr:tex>, so <fr:tex display="inline"><![CDATA[U]]></fr:tex> is inhabited. Thus it follows that <fr:tex display="inline"><![CDATA[u]]></fr:tex> is defined.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002T/</fr:uri><fr:display-uri>jms-002T</fr:display-uri><fr:route>/jms-002T/</fr:route><fr:title text="Characterization of positivity in terms of partial elements">Characterization of positivity in terms of partial elements</fr:title><fr:taxon>Theorem</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then an element <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> if and only if for any partial element <fr:tex display="inline"><![CDATA[u: LA]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Therefore, we first suppose that any <fr:tex display="inline"><![CDATA[u: LA]]></fr:tex> is defined supposing <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[a]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>. Fixing a semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {I}]]></fr:tex>, we must show that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.
  We consider the partial element <fr:tex display="inline"><![CDATA[u={\mathopen {}\left (\exists  i\in  I. \top , \lambda \_.\bigsqcup {I}\right )\mathclose {}}:LA]]></fr:tex>, and observe that <fr:tex display="inline"><![CDATA[\bigsqcup {I}=\bigsqcup _{i\in  I} \bigsqcup {I}=\bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, and so we have <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex> and thus it follows that <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex> and so <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.</html:p>

  <html:p>Conversely, if <fr:tex display="inline"><![CDATA[a]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>, it follows that any partial element <fr:tex display="inline"><![CDATA[u]]></fr:tex> is defined when <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, because the subset <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{y\mid  y=a\land  u{\downarrow }\right \}\mathclose {}}]]></fr:tex> is semidirected.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002X/</fr:uri><fr:display-uri>jms-002X</fr:display-uri><fr:route>/jms-002X/</fr:route><fr:title text="Positivity and the strictly-below relation">Positivity and the strictly-below relation</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>It follows from our <fr:link href="/jms-002T/" title="Characterization of positivity in terms of partial elements" uri="https://www.jonmsterling.com/jms-002T/" display-uri="jms-002T" type="local">characterization</fr:link> of <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity</fr:link> in terms of partial elements that an element <fr:tex display="inline"><![CDATA[a: A]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> if and only if it is <fr:link href="/jms-002W/" title="The strictly-below relation" uri="https://www.jonmsterling.com/jms-002W/" display-uri="jms-002W" type="local">strictly above</fr:link> the bottom element, i.e. <fr:tex display="inline"><![CDATA[\bot \sqsubset  a]]></fr:tex>.</html:p><html:p>(See also Proposition 6.2.12 of <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong’s thesis</fr:link>.)</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002O/</fr:uri><fr:display-uri>jms-002O</fr:display-uri><fr:route>/jms-002O/</fr:route><fr:title text="A general characterization of positivity">A general characterization of positivity</fr:title></fr:frontmatter><fr:mainmatter><html:p>So far we have studied <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity</fr:link> as an order-theoretic property of domains; in this section, we explore a non-order-theoretic generalization of this condition that is applicable in the setting of axiomatic domain theory. This notion is inspired by the <fr:link href="/jms-002T/" title="Characterization of positivity in terms of partial elements" uri="https://www.jonmsterling.com/jms-002T/" display-uri="jms-002T" type="local">alternative characterization positivity in terms of partial elements</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002P/</fr:uri><fr:display-uri>jms-002P</fr:display-uri><fr:route>/jms-002P/</fr:route><fr:title text="The Sierpiński interval of a dominion">The Sierpiński interval of a dominion</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be a category with pullbacks, a terminal object and let <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex> be a dominion on <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>. A <html:em>Sierpiński space</html:em> for <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex> is defined to be a universal <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex>-partial map, i.e. a morphism <fr:tex display="inline"><![CDATA[{\mathbf {1}_{\mathcal {C}}}\xrightarrow {{\top }}{\Sigma }\in \mathcal {M}]]></fr:tex> such that for any <fr:tex display="inline"><![CDATA[{U}\xrightarrow {{i}}{A}\in  \mathcal {M}]]></fr:tex> there exists a unique map <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\chi _i}}{\Sigma }]]></fr:tex> making the following square cartesian:</html:p>
 
  
  <html:figure><fr:resource hash="23d06d21ba7b8cae296d9b9a89642b63"><fr:resource-content><html:img src="/23d06d21ba7b8cae296d9b9a89642b63.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \DiagramSquare {
    ne = \mathbf {1}_{\mathcal {C}},
    se = \Sigma ,
    east = \top \in  \mathcal {M},
    sw = A,
    nw = U,
    west = \mathcal {M}\ni  i,
    south = \chi _i,
    south/style = {->,exists},
    west/style = >->,
    east/style = >->,
    nw/style = pullback,
  }
]]></fr:resource-source></fr:resource></html:figure>
 
<html:p>When <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> has an initial object <fr:tex display="inline"><![CDATA[\mathbf {0}_{\mathcal {C}}]]></fr:tex> and every <fr:tex display="inline"><![CDATA[{\mathbf {0}_{\mathcal {C}}}\xrightarrow {{}}{A}]]></fr:tex> lies in <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex>, the Sierpiński space becomes an “interval object” <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\Sigma ,\top ,\bot \right )\mathclose {}}]]></fr:tex> where <fr:tex display="inline"><![CDATA[{\mathbf {1}_{\mathcal {C}}}\xrightarrow {{\bot }}{\Sigma }]]></fr:tex> is given as follows:</html:p>
 
  
  <html:figure><fr:resource hash="90281a7184eaad2cfe27c224a486ee82"><fr:resource-content><html:img src="/90281a7184eaad2cfe27c224a486ee82.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \DiagramSquare {
    ne = \mathbf {1}_{\mathcal {C}},
    se = \Sigma ,
    east = \top ,
    sw = \mathbf {1}_{\mathcal {C}},
    nw = \mathbf {0}_{\mathcal {C}},
    south = \bot ,
    south/style = {->,exists},
    west/style = >->,
    east/style = >->,
    nw/style = pullback,
  }
]]></fr:resource-source></fr:resource></html:figure>
 
<html:p>Under these circumstances, we refer to <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex> as a dominion that has a <html:em>Sierpiński interval</html:em>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002Q/</fr:uri><fr:display-uri>jms-002Q</fr:display-uri><fr:route>/jms-002Q/</fr:route><fr:title text="Paths in a dominion">Paths in a dominion</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be category with pullbacks, a terminal object, and an initial object, equipped with a dominion <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex> that has a <fr:link href="/jms-002P/" title="The Sierpiński interval of a dominion" uri="https://www.jonmsterling.com/jms-002P/" display-uri="jms-002P" type="local">Sierpiński interval</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\Sigma ,\top ,\bot \right )\mathclose {}}]]></fr:tex>. A <html:em>path</html:em> from <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{f}}{C}]]></fr:tex> to <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{g}}{C}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> is defined to be a morphism <fr:tex display="inline"><![CDATA[{\Sigma \times  I}\xrightarrow {{p}}{C}]]></fr:tex> such that the following diagram commutes:</html:p>
 
  
  <html:figure><fr:resource hash="fcf5d2401e69e9d2846dee7512cbe681"><fr:resource-content><html:img src="/fcf5d2401e69e9d2846dee7512cbe681.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \node  (IxSigma) {$I\times \Sigma $};
    \node [above = of IxSigma] (I/n) {$I$};
    \node [below = of IxSigma] (I/s) {$I$};
    \node [right = of IxSigma] (C) {$C$};
    \draw [>->] (I/n) to node[left] {${\mathopen {}\left \langle 1_{I},\bot \right \rangle \mathclose {}}$} (IxSigma);
    \draw [>->] (I/s) to node[left] {${\mathopen {}\left \langle 1_{I},\top \right \rangle \mathclose {}}$} (IxSigma);
    \draw [->] (IxSigma) to node[upright desc] {$p$} (C);
    \draw [->] (I/n) to node[sloped,above] {$f$} (C);
    \draw [->] (I/s) to node[sloped,below] {$g$} (C);
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 
<html:p>We shall write <fr:tex display="inline"><![CDATA[p:f\leadsto  g]]></fr:tex> to denote a path from <fr:tex display="inline"><![CDATA[f]]></fr:tex> to <fr:tex display="inline"><![CDATA[g]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002R/</fr:uri><fr:display-uri>jms-002R</fr:display-uri><fr:route>/jms-002R/</fr:route><fr:title text="Positive elements in a dominion">Positive elements in a dominion</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be category with pullbacks, a terminal object, and an initial object, equipped with a dominion <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex> that has a <fr:link href="/jms-002P/" title="The Sierpiński interval of a dominion" uri="https://www.jonmsterling.com/jms-002P/" display-uri="jms-002P" type="local">Sierpiński interval</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\Sigma ,\top ,\bot \right )\mathclose {}}]]></fr:tex>, such that <fr:tex display="inline"><![CDATA[\mathcal {M}]]></fr:tex>-partial map classifiers <fr:tex display="inline"><![CDATA[LA]]></fr:tex> exist for all <fr:tex display="inline"><![CDATA[A\in \mathcal {C}]]></fr:tex>. We will write <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (L,\eta ,\mu \right )\mathclose {}}]]></fr:tex> for the resulting partial map classifier monad on <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>.</html:p><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> be an <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra in <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, and let <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{x}}{A}]]></fr:tex> be a generalized element of <fr:tex display="inline"><![CDATA[A]]></fr:tex>. We say that <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{x}}{A}]]></fr:tex> is <html:em>positive</html:em> when for any <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{u}}{LA}]]></fr:tex> such that there exists a path from <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{x}}{A}]]></fr:tex> to <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{u;\alpha }}{A}]]></fr:tex>, then <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{u}}{LA}]]></fr:tex> factors through some (necessarily unique) <fr:tex display="inline"><![CDATA[{C}\xrightarrow {{y}}{A}]]></fr:tex> as below:</html:p>
 
  
  <html:figure><fr:resource hash="8f3c547094546fda0775672b1fdbf7b2"><fr:resource-content><html:img src="/8f3c547094546fda0775672b1fdbf7b2.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \node  (nw) {$C$};
    \node [right = of nw] (ne) {$A$};
    \node [below = of ne] (se) {$LA$};
    \draw [exists,->] (nw) to node[above] {$y$} (ne);
    \draw [>->] (ne) to node[right] {$\eta _A$} (se);
    \draw [->] (nw) to node[sloped,below] {$u$} (se);
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002S/</fr:uri><fr:display-uri>jms-002S</fr:display-uri><fr:route>/jms-002S/</fr:route><fr:title text="The two notions of positivity coincide for pointed dcpos">The two notions of positivity coincide for pointed dcpos</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then an element <fr:tex display="inline"><![CDATA[x:A]]></fr:tex> is a <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive element of the pointed dcpo</fr:link> if and only if <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{x}}{A}]]></fr:tex> is a <fr:link href="/jms-002R/" title="Positive elements in a dominion" uri="https://www.jonmsterling.com/jms-002R/" display-uri="jms-002R" type="local">positive element in the dominion</fr:link> <fr:tex display="inline"><![CDATA[\mathcal {O}]]></fr:tex> of Scott-open immersions of dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We first observe that the <fr:link href="/jms-002R/" title="Positive elements in a dominion" uri="https://www.jonmsterling.com/jms-002R/" display-uri="jms-002R" type="local">latter condition</fr:link> is equivalent to the following:</html:p>
  <html:blockquote>For any <fr:tex display="inline"><![CDATA[u\in  LA]]></fr:tex>, if <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p: u{\downarrow }}u[p]]]></fr:tex> then <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex>.</html:blockquote>

  <html:p>This follows from the <fr:link href="https://github.com/jonsterling/coq-domains/blob/main/theories/Path.v" type="external">(constructive) characterization</fr:link> of the <fr:link href="/jms-002Q/" title="Paths in a dominion" uri="https://www.jonmsterling.com/jms-002Q/" display-uri="jms-002Q" type="local">path</fr:link> order in dcpos. Therefore, our result follows from our <fr:link href="/jms-002T/" title="Characterization of positivity in terms of partial elements" uri="https://www.jonmsterling.com/jms-002T/" display-uri="jms-002T" type="local">earlier characterization</fr:link> of positive elements of a pointed dcpo in terms of partial elements.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor><fr:contributor><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002D/</fr:uri><fr:display-uri>jms-002D</fr:display-uri><fr:route>/jms-002D/</fr:route><fr:title text="Positive generation and open positivity predicates">Positive generation and open positivity predicates</fr:title></fr:frontmatter><fr:mainmatter><html:p>In a lifted dcpo <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>, the <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">positive elements</fr:link> form an <html:em>open</html:em> subdcpo <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{A}\right )\mathclose {}}^+\cong  A]]></fr:tex>: thus, it follows that positivity is always an open property in classical mathematics. On the other hand, it seems that constructive mathematics does not necessarily assert that the positive elements form an open subspace in general. In this section, we grapple with this subtlety by studying the relationship between openness of <fr:tex display="inline"><![CDATA[A^+]]></fr:tex> and a desirable property that we shall refer to as <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positive generation</fr:link>, which states that every element of <fr:tex display="inline"><![CDATA[A]]></fr:tex> is the supremum of its “positive part”.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0022/</fr:uri><fr:display-uri>jms-0022</fr:display-uri><fr:route>/jms-0022/</fr:route><fr:title text="Open positivity predicate">Open positivity predicate</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>We say that a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <html:em>open positivity predicate</html:em> if and only if any of the following equivalent conditions hold:</html:p><html:ol><html:li>The positivity predicate <fr:tex display="inline"><![CDATA[{\Gamma  A}\xrightarrow {{\mathsf {pos}}}{\Omega }]]></fr:tex> tracks a continuous morphism of dcpos <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {pos}}}{\Sigma }]]></fr:tex>.</html:li>

  <html:li>The embedding <fr:tex display="inline"><![CDATA[{A^+}\xrightarrow {{\iota ^+}}{A}]]></fr:tex> is a Scott-open immersion.</html:li>
  <html:li>For a directed subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, if <fr:tex display="inline"><![CDATA[\bigsqcup {A}]]></fr:tex> is positive then there exists an element <fr:tex display="inline"><![CDATA[a\in  I]]></fr:tex> that is positive in <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:li></html:ol></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002F/</fr:uri><fr:display-uri>jms-002F</fr:display-uri><fr:route>/jms-002F/</fr:route><fr:title text="Positively generated elements">Positively generated elements</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a dcpo; then an element <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> is called <html:em>positively generated</html:em> when it is the supremum of the semidirected subset <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{b:A\mid  b=a\land  \mathsf {pos}\,{a}\right \}\mathclose {}}]]></fr:tex>, i.e. we have <fr:tex display="inline"><![CDATA[a \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002J/</fr:uri><fr:display-uri>jms-002J</fr:display-uri><fr:route>/jms-002J/</fr:route><fr:title text="Non-negatively generated elements">Non-negatively generated elements</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>An element <fr:tex display="inline"><![CDATA[a]]></fr:tex> of a pointed dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is called <html:em>non-negatively generated</html:em> when <fr:tex display="inline"><![CDATA[a \sqsubseteq  \bigsqcup _{\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}}a]]></fr:tex> holds.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002N/</fr:uri><fr:display-uri>jms-002N</fr:display-uri><fr:route>/jms-002N/</fr:route><fr:title text="Positively generated elements are non-negatively generated">Positively generated elements are non-negatively generated</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[a]]></fr:tex> be a <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated element</fr:link> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[a]]></fr:tex> is also <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We must check that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p:\lnot {\mathopen {}\left (a = \bot \right )\mathclose {}}}a]]></fr:tex>. By assumption, it suffices to check that <fr:tex display="inline"><![CDATA[\bigsqcup _{p:\mathsf {pos}\,a}a\sqsubseteq \bigsqcup _{p:\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}}a]]></fr:tex>, which follows because <fr:link href="/jms-002H/" title="The bottom element is not positive" uri="https://www.jonmsterling.com/jms-002H/" display-uri="jms-002H" type="local">the bottom element is not positive</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002I/</fr:uri><fr:display-uri>jms-002I</fr:display-uri><fr:route>/jms-002I/</fr:route><fr:title text="Bottom and non-bottom elements are non-negatively generated">Bottom and non-bottom elements are non-negatively generated</fr:title><fr:taxon>Example</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>In a pointed dcpo, any non-bottom element is non-negatively generated.</html:p><html:ol><html:li>The bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex>.</html:li>
  <html:li>Any compact element <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> for which <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}]]></fr:tex> holds.</html:li></html:ol><html:p>Hence, any element <fr:tex display="inline"><![CDATA[a]]></fr:tex> for which it is decidable whether <fr:tex display="inline"><![CDATA[a=\bot ]]></fr:tex> is non-negatively generated.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The bottom element is clearly non-negatively generated, as it lies beneath any element. Now fix <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> and assume <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}]]></fr:tex>; we must check that <fr:tex display="inline"><![CDATA[a \sqsubseteq  \bigsqcup _{p:\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}}a]]></fr:tex> but the latter is equal to <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0023/</fr:uri><fr:display-uri>jms-0023</fr:display-uri><fr:route>/jms-0023/</fr:route><fr:title text="Positively generated dcpos">Positively generated dcpos</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>When a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> satisfies either of the following equivalent conditions, we will refer to it as <html:em>positively generated</html:em>.</html:p><html:ol><html:li>Every element <fr:tex display="inline"><![CDATA[a: A]]></fr:tex> is <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated</fr:link>, i.e. we have <fr:tex display="inline"><![CDATA[a = \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>.</html:li>
  <html:li>For any semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[\bigsqcup  I = \bigsqcup  {\mathopen {}\left \{a\in  I \mid  \mathsf {pos}\,a\right \}\mathclose {}}]]></fr:tex>.</html:li></html:ol>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>(2) implies (1) by setting <fr:tex display="inline"><![CDATA[I = {\mathopen {}\left \{a\right \}\mathclose {}}]]></fr:tex>. Conversely, assume that each element is the supremum of its positive part and fix a semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>. We compute:</html:p>

  <fr:tex display="block"><![CDATA[\bigsqcup {\mathopen {}\left \{a \in  I \mid  \mathsf {pos}\,a\right \}\mathclose {}}
  =
  \bigsqcup _{a\in  {\mathopen {}\left \{a \in  I\mid  \mathsf {pos}\,a\right \}\mathclose {}}}a
  =
  \bigsqcup _{a\in  I}\bigsqcup _{p\in  \mathsf {pos}\,a} a
  =
  \bigsqcup _{a\in  I} a
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0027/</fr:uri><fr:display-uri>jms-0027</fr:display-uri><fr:route>/jms-0027/</fr:route><fr:title text="Positively generated dcpos have open positivity predicates">Positively generated dcpos have open positivity predicates</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be a directed subset such that <fr:tex display="inline"><![CDATA[\bigsqcup {I}]]></fr:tex> is positive; we must find a positive element of <fr:tex display="inline"><![CDATA[I]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> we know that <fr:tex display="inline"><![CDATA[\bigsqcup {I} \sqsubseteq  \bigsqcup {\mathopen {}\left (I\cap  A^+\right )\mathclose {}}]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\bigsqcup {I}]]></fr:tex> is positive and <fr:tex display="inline"><![CDATA[I\cap  A^+]]></fr:tex> <fr:link href="/jms-0028/" title="The positive part of a semidirected subset is semidirected" uri="https://www.jonmsterling.com/jms-0028/" display-uri="jms-0028" type="local">is semidirected</fr:link>, it follows that the latter is inhabited.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0025/</fr:uri><fr:display-uri>jms-0025</fr:display-uri><fr:route>/jms-0025/</fr:route><fr:title text="Lifted dcpos are positively generated">Lifted dcpos are positively generated</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a dcpo; then the lift <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[u={\mathopen {}\left (\phi ,a\right )\mathclose {}}]]></fr:tex> be an element of <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>. Note that <fr:tex display="inline"><![CDATA[u]]></fr:tex> is equal to <fr:tex display="inline"><![CDATA[\bigsqcup _{p:\phi }u]]></fr:tex>; as <fr:link href="/jms-001N/" title="Positivity = definedness in a lifted dcpo" uri="https://www.jonmsterling.com/jms-001N/" display-uri="jms-001N" type="local">definedness coincides with positivity</fr:link> in lifted dcpos, we have <fr:tex display="inline"><![CDATA[\phi  = \mathsf {pos}\,u]]></fr:tex>, and so we are done.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0024/</fr:uri><fr:display-uri>jms-0024</fr:display-uri><fr:route>/jms-0024/</fr:route><fr:title text="Lifted dcpos have open positivity predicates">Lifted dcpos have open positivity predicates</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a dcpo; then the lifting <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>It <fr:link href="/jms-0027/" title="Positively generated dcpos have open positivity predicates" uri="https://www.jonmsterling.com/jms-0027/" display-uri="jms-0027" type="local">suffices</fr:link> to recall that a <fr:link href="/jms-0025/" title="Lifted dcpos are positively generated" uri="https://www.jonmsterling.com/jms-0025/" display-uri="jms-0025" type="local">lifted dcpo is positively generated</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor><fr:contributor><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002L/</fr:uri><fr:display-uri>jms-002L</fr:display-uri><fr:route>/jms-002L/</fr:route><fr:title text="When is a continuous pointed dcpo positively generated?">When is a continuous pointed dcpo positively generated?</fr:title></fr:frontmatter><fr:mainmatter><html:p>We describe some light conditions under which a continuous dcpo is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0026/</fr:uri><fr:display-uri>jms-0026</fr:display-uri><fr:route>/jms-0026/</fr:route><fr:title text="Non-negatively generated basis yields positive generation">Non-negatively generated basis yields positive generation</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> continuous dcpo presented by a basis <fr:tex display="inline"><![CDATA[B\subseteq  A]]></fr:tex> such that each element of <fr:tex display="inline"><![CDATA[B]]></fr:tex> is <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link> in <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We must show that for any <fr:tex display="inline"><![CDATA[a\in  A]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[a \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>. Let <fr:tex display="inline"><![CDATA[B_a]]></fr:tex> be the subset <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{b \in  B \mid  b\ll  a\right \}\mathclose {}}]]></fr:tex>. By assumption, it suffices to check that <fr:tex display="inline"><![CDATA[\bigsqcup  B_a \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[b\in  B_a]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[b\sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>.</html:p>

  <html:p>As <fr:tex display="inline"><![CDATA[b]]></fr:tex> is assumed to be <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link>, we have <fr:tex display="inline"><![CDATA[b=\bigsqcup _{p:\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}}b]]></fr:tex> so to check <fr:tex display="inline"><![CDATA[b\sqsubseteq \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex> it suffices to check that <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}]]></fr:tex> implies that <fr:tex display="inline"><![CDATA[a]]></fr:tex> is positive. We fix semidirected <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {J} = \bigsqcup {\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  J\right )\mathclose {}}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited. We recall that <fr:tex display="inline"><![CDATA[b\ll  a]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  J\right )\mathclose {}}]]></fr:tex>, so it follows by the definition of the <fr:link href="/jms-002V/" title="The way-below relation" uri="https://www.jonmsterling.com/jms-002V/" display-uri="jms-002V" type="local">way-below relation</fr:link> that either <fr:tex display="inline"><![CDATA[b\sqsubseteq  \bot ]]></fr:tex> or there exists <fr:tex display="inline"><![CDATA[j\in  J]]></fr:tex> such that <fr:tex display="inline"><![CDATA[b\sqsubseteq  j]]></fr:tex>. The first case is contradictory by our assumption that <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}]]></fr:tex>, and the second case verifies that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited, so <fr:tex display="inline"><![CDATA[a]]></fr:tex> is positive.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002K/</fr:uri><fr:display-uri>jms-002K</fr:display-uri><fr:route>/jms-002K/</fr:route><fr:title text="Basis with decidable bottomhood yields positive generation">Basis with decidable bottomhood yields positive generation</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a pointed continuous dcpo presented by a basis <fr:tex display="inline"><![CDATA[B\subseteq  A]]></fr:tex> for each element <fr:tex display="inline"><![CDATA[b\in  B]]></fr:tex> it is decidable whether <fr:tex display="inline"><![CDATA[b=\bot ]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We observe that <fr:link href="/jms-002I/" title="Bottom and non-bottom elements are non-negatively generated" uri="https://www.jonmsterling.com/jms-002I/" display-uri="jms-002I" type="local">every element of <fr:tex display="inline"><![CDATA[B]]></fr:tex> is non-negatively generated</fr:link>, so we <fr:link href="/jms-0026/" title="Non-negatively generated basis yields positive generation" uri="https://www.jonmsterling.com/jms-0026/" display-uri="jms-0026" type="local">may conclude</fr:link> that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002M/</fr:uri><fr:display-uri>jms-002M</fr:display-uri><fr:route>/jms-002M/</fr:route><fr:title text="Positively generated basis yields positive generation">Positively generated basis yields positive generation</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a pointed continuous dcpo presented by a basis <fr:tex display="inline"><![CDATA[B\subseteq  A]]></fr:tex> whose elements are all <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated</fr:link> in <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>As <fr:link href="/jms-002N/" title="Positively generated elements are non-negatively generated" uri="https://www.jonmsterling.com/jms-002N/" display-uri="jms-002N" type="local">positive generation implies non-negative generation</fr:link> for an element of a pointed dcpo, we <fr:link href="/jms-0026/" title="Non-negatively generated basis yields positive generation" uri="https://www.jonmsterling.com/jms-0026/" display-uri="jms-0026" type="local">may conclude</fr:link> that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is positively generated.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree><html:p>I am not sure how useful the <fr:link href="/jms-002G/" title="The positively generated core of a dcpo" uri="https://www.jonmsterling.com/jms-002G/" display-uri="jms-002G" type="local">following construction</fr:link> is. On the other hand, maybe it has a universal property at the level of posets.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002G/</fr:uri><fr:display-uri>jms-002G</fr:display-uri><fr:route>/jms-002G/</fr:route><fr:title text="The positively generated core of a dcpo">The positively generated core of a dcpo</fr:title><fr:taxon>Construction</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a pointed dcpo; the subposet <fr:tex display="inline"><![CDATA[A^{\mathit {pg}}\subseteq {A}]]></fr:tex> spanned by <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated elements</fr:link> is closed under directed suprema, and thus gives rise to a subdcpo that we shall refer to as the <html:em>positively generated core</html:em> of <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be a directed subset whose elements are all <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated</fr:link>. We must check that the supremum <fr:tex display="inline"><![CDATA[\bigsqcup {I}]]></fr:tex> is positively generated, i.e. <fr:tex display="inline"><![CDATA[\bigsqcup {I} \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,\bigsqcup {I}}\bigsqcup {I}]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[i\in  I]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[i\sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,{\bigsqcup {I}}}\bigsqcup {I}]]></fr:tex>. As <fr:tex display="inline"><![CDATA[i]]></fr:tex> is positively generated, we have <fr:tex display="inline"><![CDATA[i\sqsubseteq \bigsqcup _{p:\mathsf {pos}\,{i}}i]]></fr:tex>. As <fr:link href="/jms-0029/" title="Positivity is upward-closed" uri="https://www.jonmsterling.com/jms-0029/" display-uri="jms-0029" type="local">positivity is upward-closed</fr:link>, we have <fr:tex display="inline"><![CDATA[\mathsf {pos}\,{i}\sqsubseteq \mathsf {pos}\,\bigsqcup {I}]]></fr:tex>. Therefore, we deduce <fr:tex display="inline"><![CDATA[i\sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,i}i \sqsubseteq   \bigsqcup _{p:\mathsf {pos}\,{\bigsqcup {I}}}\bigsqcup {I}]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author><fr:contributor><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:contributor><fr:contributor><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:contributor></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001Z/</fr:uri><fr:display-uri>jms-001Z</fr:display-uri><fr:route>/jms-001Z/</fr:route><fr:title text="Characterizing freeness in terms of positivity">Characterizing freeness in terms of positivity</fr:title></fr:frontmatter><fr:mainmatter><html:p>In classical mathematics, every <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra is free; this does not appear to be asserted by constructive mathematics, but in this section we verify that freeness can be characterized in terms of positivity. The <fr:link href="/jms-002B/" title="Liftedness = positive generation" uri="https://www.jonmsterling.com/jms-002B/" display-uri="jms-002B" type="local">main result</fr:link> is that a pointed dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> if and only the evident map <fr:tex display="inline"><![CDATA[{\mathsf {L}{A^+}}\xrightarrow {{}}{A}]]></fr:tex> is an isomorphism.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0021/</fr:uri><fr:display-uri>jms-0021</fr:display-uri><fr:route>/jms-0021/</fr:route><fr:title text="The “purification” map">The “purification” map</fr:title><fr:taxon>Construction</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo with an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>; we define the “purification” map <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> into the lift of the <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo of positive elements</fr:link> to send <fr:tex display="inline"><![CDATA[a\in  A]]></fr:tex> to the partial element <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {pos}\,{a},\lambda  p. a\right )\mathclose {}}]]></fr:tex>; we note:</html:p><fr:tex display="block"><![CDATA[ \mathsf {purify}_Aa = {\mathopen {}\left (\mathsf {pos}\,{a},\lambda  p. a\right )\mathclose {}} = \bigsqcup _{p:\mathsf {pos}\,a}\eta _Aa]]></fr:tex><html:p>The mapping defined above  is continuous because we have assumed that <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>, so its domain of definition defines a Scott-open subdcpo of <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-0020/</fr:uri><fr:display-uri>jms-0020</fr:display-uri><fr:route>/jms-0020/</fr:route><fr:title text="Pointed dcpos with open positivity predicates are almost free">Pointed dcpos with open positivity predicates are almost free</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo with an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>; then the <fr:link href="/jms-0021/" title="The “purification” map" uri="https://www.jonmsterling.com/jms-0021/" display-uri="jms-0021" type="local">purification map</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> is the projection part of an embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv  \mathsf {purify}_A]]></fr:tex>.</html:p>
 
  
  <html:figure><fr:resource hash="5df958f6003a31c2a0eae7def6a479ed"><fr:resource-content><html:img src="/5df958f6003a31c2a0eae7def6a479ed.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \node  (nw) {$\mathsf {L}{A^+}$};
    \node [right = 2.5cm of nw] (ne) {$A$};
    \node [below = of ne] (se) {$\mathsf {L}{A^+}$};
    \draw [>->] (nw) to node[above] {$\mathsf {L}{\iota ^+};\alpha _A$} (ne);
    \draw [->>] (ne) to node[right] {$\mathsf {purify}_A$} (se);
    \draw [double] (nw) to node[sloped,below] {$1_{\mathsf {L}{A^+}}$} (se);
  \end {tikzpicture}
  \qquad 
  \begin {tikzpicture}[diagram]
    \node  (nw) {$A$};
    \node [below = of nw] (sw) {$\mathsf {L}{A^+}$};
    \node [right = 2.5cm of sw] (se) {$A$};
    \draw [->>] (nw) to node[left] {$\mathsf {purify}_A$} (sw);
    \draw [>->] (sw) to node[below] {$\mathsf {L}{\iota ^+};\alpha _A$} (se);
    \draw [double] (nw) to node[sloped,above] (idn) {$1_{A}$} (se);
    \node [between = sw and idn] {$\sqsubseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}: \mathsf {L}{A^+}]]></fr:tex> and compute explicitly using the fact that <fr:tex display="inline"><![CDATA[\mathsf {purify}_A]]></fr:tex> preserves the bottom element and therefore preserves semidirected subsets:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    \mathsf {purify}_A{\mathopen {}\left (\alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}\right )\mathclose {}}\right )\mathclose {}} & =
    \mathsf {purify}_A{\mathopen {}\left (\alpha _A{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}\right )\mathclose {}}
    \\
                                                              & = \mathsf {purify}_A\bigsqcup _{p:\phi } a^+p
    \\
                                                              & = \bigsqcup _{p:\phi } \mathsf {purify}_A{\mathopen {}\left (a^+p\right )\mathclose {}}
    \\
                                                              & = \bigsqcup _{p:\phi } \bigsqcup _{q:\mathsf {pos}{\mathopen {}\left (a^+p\right )\mathclose {}}} a^+p
    \\
                                                              & =
    \bigsqcup _{p:\phi } a^+p
    \\
                                                              & =
    {\mathopen {}\left (\phi ,a^+\right )\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For the deflation, we fix <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> and observe that
  <fr:tex display="inline"><![CDATA[
  \alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\mathsf {purify}_A a\right )\mathclose {}}\right )\mathclose {}} =
  \bigsqcup _{p:\mathsf {pos}\,a} a
  ]]></fr:tex> which is evidently below <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002A/</fr:uri><fr:display-uri>jms-002A</fr:display-uri><fr:route>/jms-002A/</fr:route><fr:title text="Positively generated pointed dcpos are free">Positively generated pointed dcpos are free</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is canonically <html:em>free</html:em> on its <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo of positive elements</fr:link> <fr:tex display="inline"><![CDATA[A^+]]></fr:tex>. More specifically, the embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv {A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> <fr:link href="/jms-0020/" title="Pointed dcpos with open positivity predicates are almost free" uri="https://www.jonmsterling.com/jms-0020/" display-uri="jms-0020" type="local">given by</fr:link> the <fr:link href="/jms-0021/" title="The “purification” map" uri="https://www.jonmsterling.com/jms-0021/" display-uri="jms-0021" type="local">purification map</fr:link> is an isomorphism of dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>First, we recall that the embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv \mathsf {purify}_A]]></fr:tex> <fr:link href="/jms-0020/" title="Pointed dcpos with open positivity predicates are almost free" uri="https://www.jonmsterling.com/jms-0020/" display-uri="jms-0020" type="local">exists</fr:link> because <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link> by <fr:link href="/jms-0027/" title="Positively generated dcpos have open positivity predicates" uri="https://www.jonmsterling.com/jms-0027/" display-uri="jms-0027" type="local">virtue of</fr:link> its <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positive generation</fr:link>. Therefore, the statement of this lemma is well-formed.</html:p>

  <html:p>Because <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv \mathsf {purify}_A]]></fr:tex> is an embedding-projection pair, it remains only to check that <fr:tex display="inline"><![CDATA[\mathsf {purify}_A;\mathsf {L}{\iota ^+};\alpha _A]]></fr:tex> is an <html:em>inflation</html:em>, i.e. for all <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> we must have <fr:tex display="inline"><![CDATA[a \sqsubseteq  \alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\mathsf {purify}_Aa\right )\mathclose {}}\right )\mathclose {}}]]></fr:tex>. As the latter is equal to <fr:tex display="inline"><![CDATA[\bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>, the inflation condition follows from our assumption that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-002B/</fr:uri><fr:display-uri>jms-002B</fr:display-uri><fr:route>/jms-002B/</fr:route><fr:title text="Liftedness = positive generation">Liftedness = positive generation</fr:title><fr:taxon>Corollary</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is lifted if and only if it is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from two existing lemmas:</html:p>

  <html:ol><html:li><fr:link href="/jms-0025/" title="Lifted dcpos are positively generated" uri="https://www.jonmsterling.com/jms-0025/" display-uri="jms-0025" type="local">Lifted dcpos (free algebras) are positively generated</fr:link>.</html:li>
    <html:li><fr:link href="/jms-002A/" title="Positively generated pointed dcpos are free" uri="https://www.jonmsterling.com/jms-002A/" display-uri="jms-002A" type="local">Positively generated pointed dcpos are free</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree>
  <fr:tree show-metadata="false" expanded="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001R/</fr:uri><fr:display-uri>jms-001R</fr:display-uri><fr:route>/jms-001R/</fr:route><fr:title text="Cocompleteness of lift-algebras">Cocompleteness of lift-algebras</fr:title></fr:frontmatter><fr:mainmatter><html:p>We will deduce the closure of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under connected colimits using <fr:link href="/jms-002U/" title="Results in constructive monad theory" uri="https://www.jonmsterling.com/jms-002U/" display-uri="jms-002U" type="local">general results about monads</fr:link>. Then we use the results of <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link> to <fr:link href="/jms-005G/" title="The category of lift-algebras is cocomplete" uri="https://www.jonmsterling.com/jms-005G/" display-uri="jms-005G" type="local">deduce</fr:link> the cocompleteness of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex>. <html:mark>Note that the proof establishing that the lift monad preserves connected colimits has an error in it. I have a fix for it, suggested by <fr:link href="/ohadkammar/" title="Ohad Kammar" uri="https://www.jonmsterling.com/ohadkammar/" display-uri="ohadkammar" type="local">Ohad Kammar</fr:link>, but I haven't written it down yet here.</html:mark></html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001D/</fr:uri><fr:display-uri>jms-001D</fr:display-uri><fr:route>/jms-001D/</fr:route><fr:title text="Lifting as a co-comma construction">Lifting as a co-comma construction</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>For any dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>, the following is a co-comma square in the posetal 2-category of dcpos, where <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> takes a dcpo to its <html:em>lift</html:em> or <html:em>Scott-open partial map classifier</html:em>.</html:p>
 
  
  <html:figure><fr:resource hash="0b33979e8323ca58b43bb7f762d8e0b5"><fr:resource-content><html:img src="/0b33979e8323ca58b43bb7f762d8e0b5.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \SpliceDiagramSquare {
      nw = A,
      sw = A,
      ne = \mathbf {1}_{},
      se = \mathsf {L}{A},
      north = !_{A},
      east = \bot ,
      east/style = embedding,
      south/style = embedding,
      south = \eta _A,
      west/style = double,
    }
    \node  [between = nw and se] {$\sqsupseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix another lax square of the following form:</html:p>

  
 
  
  <html:figure><fr:resource hash="8bed4dbcbef36330f8096a7b4a0e14af"><fr:resource-content><html:img src="/8bed4dbcbef36330f8096a7b4a0e14af.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare {
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A},
        east = d_\bot ,
        south = d_A,
        west/style = double,
      }
      \node  [between = nw and se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must show that there exists a <html:em>unique</html:em> morphism <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> factoring the square above through <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{d_\bot \sqsubseteq  d_A\right \}\mathclose {}}]]></fr:tex> as follows:</html:p>

  
 
  
  <html:figure><fr:resource hash="a466ed161a36af5f98013c1dd2a44cee"><fr:resource-content><html:img src="/a466ed161a36af5f98013c1dd2a44cee.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A},
        north = !_{A},
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _A,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$d_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$d_A$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !d$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We will define <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> to take <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex> to the least upper bound of the directed subset <fr:tex display="inline"><![CDATA[U = {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{d_A a\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\subseteq  D]]></fr:tex>. As this assignment evidently has the correct factorization property, it remains just to check that it is continuous. Letting <fr:tex display="inline"><![CDATA[V]]></fr:tex> be a directed subset of <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>, we compute:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d\bigsqcup  V & = \bigsqcup \,{\mathopen {}\left (
      {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup 
      {\mathopen {}\left \{d_Aa\mid  \bigsqcup  V = \eta _A a\right \}\mathclose {}}
    \right )\mathclose {}}
    \\
                & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  \eta _Aa\in  V\right \}\mathclose {}}\right )\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{\bigsqcup  {\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}} \mid  a^{?}\in  V\right \}\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{da^{?}\mid  a^{?}\in  V\right \}\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For uniqueness, suppose that we have two morphisms <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d,d'}D]]></fr:tex> factoring our square in the sense described above and fix <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex>:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d a^{?} & = d\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d'\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d'\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'a^{?}
  \end {aligned}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001F/</fr:uri><fr:display-uri>jms-001F</fr:display-uri><fr:route>/jms-001F/</fr:route><fr:title text="Lifting preserves connected colimits">Lifting preserves connected colimits</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex> be a diagram of dcpos indexed in a connected category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>. Then the lifting endofunctor <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> on dcpos preserves the colimit of <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet \xrightarrow {\iota _\bullet }{\mathopen {}\left \{A_\infty \right \}\mathclose {}}]]></fr:tex> be a universal cocone; we must show that <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> is universal as well, i.e. show any cocone <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {d_\bullet }{\mathopen {}\left \{D\right \}\mathclose {}}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> in the following sense:</html:p>

  
 
  
  <html:figure><fr:resource hash="4fd9a1490d281cbc24b652123bac4ff4"><fr:resource-content><html:img src="/4fd9a1490d281cbc24b652123bac4ff4.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [exists,->] (ne) to node[right] {$\exists !{\mathopen {}\left \{d_\infty \right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the <fr:link href="/jms-001D/" title="Lifting as a co-comma construction" uri="https://www.jonmsterling.com/jms-001D/" display-uri="jms-001D" type="local">universal property of <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> as a co-comma dcpo</fr:link>, we may define <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }\xrightarrow {d_\infty }D]]></fr:tex> to be the universal map determined by a certain lax square in the following configuration:</html:p>

  
 
  
  <html:figure><fr:resource hash="756d18c413e345dee58f06695c582131"><fr:resource-content><html:img src="/756d18c413e345dee58f06695c582131.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A_\infty },
        east = {h_\bot },
        east/style = {exists,->},
        south/style = {exists,->},
        south = {h_{A_\infty }},
        west/style = double,
      }
      \node [between = sq/nw and sq/se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>First we define <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{h_\bot }}{D}]]></fr:tex> to be the element <fr:tex display="inline"><![CDATA[d_i\bot ]]></fr:tex> determined by an <html:em>arbitrary</html:em> object <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex>. To see that this is well-defined, fix <fr:tex display="inline"><![CDATA[i,j\in  \mathcal {I}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[d_i\bot =d_j\bot ]]></fr:tex>. As <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex> is connected, we may proceed by induction on a zigzag <fr:tex display="inline"><![CDATA[i\leadsto  j\in  \mathcal {I}]]></fr:tex>; ultimately, this amounts to checking that for any span <fr:tex display="inline"><![CDATA[i\leftarrow  k \rightarrow  j]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[d_i\bot =d_k\bot =d_j\bot ]]></fr:tex>. This follows from the strictness of lifted morphisms as well as the naturality of the cocone <fr:tex display="inline"><![CDATA[d_\bullet ]]></fr:tex>.</html:p>

  <html:p>Next we define <fr:tex display="inline"><![CDATA[{A_\infty }\xrightarrow {{h_{A_\infty }}}{D}]]></fr:tex> using the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="5a4977e222292b9bffcdd38beea7dd93"><fr:resource-content><html:img src="/5a4977e222292b9bffcdd38beea7dd93.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = A_\bullet ,
      sw = \mathsf {L}{A_\bullet },
      ne = {\mathopen {}\left \{A_\infty \right \}\mathclose {}},
      se = {\mathopen {}\left \{D\right \}\mathclose {}},
      west/style = embedding,
      west = \eta _{A_\bullet },
      north = \iota _\bullet ,
      south = d_\bullet ,
      east/style = {exists,->},
      east = \exists !{\mathopen {}\left \{h_{A_\infty }\right \}\mathclose {}},
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>To arrange <fr:tex display="inline"><![CDATA[h_{A_\infty }]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_\bot ]]></fr:tex> into the desired lax square, we must check that for all <fr:tex display="inline"><![CDATA[a_\infty :A_\infty ]]></fr:tex> we have <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }a_\infty ]]></fr:tex>. Fixing arbitrary <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }\iota _{i}a]]></fr:tex>. As <fr:tex display="inline"><![CDATA[h_\bot =d_i\bot ]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_{A_\infty }\iota _ia = d_i\eta _{A_i}a]]></fr:tex>, our goal follows directly from the monotonicity of <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_i}}\xrightarrow {{d_i}}{D}]]></fr:tex>.</html:p>

  <html:p><html:mark>The reasoning above is not correct, we do not know that we can restrict attention to <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>. This is indeed the case, but need to make it explicit.</html:mark></html:p>

  <html:p>Thus we have the desired lax square and a unique morphism <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{h}}{D}]]></fr:tex> factoring it through the co-comma square that defines <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="7cb13a9c50b1f1e22ae054dd0587dc91"><fr:resource-content><html:img src="/7cb13a9c50b1f1e22ae054dd0587dc91.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A_\infty },
        north = !_{A_\infty },
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _{A_\infty },
        width = 2.5cm,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$h_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$h_{A_\infty }$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !h$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Our goal is to show that we may choose the universal map <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{d_\infty }}{D}]]></fr:tex> corresponding to the cocone <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> to be the morphism <fr:tex display="inline"><![CDATA[h]]></fr:tex> defined above. First we must prove that the following triangle commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="d803bf48a41518517c81554b8bf81852"><fr:resource-content><html:img src="/d803bf48a41518517c81554b8bf81852.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the universal property of the co-comma squares for each <fr:tex display="inline"><![CDATA[\mathsf {L}{A_i}]]></fr:tex>, it suffices to check that two diagrams commute:</html:p>
  <html:ol><html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="a7e2afefaf975f34a17b894fa9991765"><fr:resource-content><html:img src="/a7e2afefaf975f34a17b894fa9991765.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {${\mathopen {}\left \{\mathbf {1}_{}\right \}\mathclose {}}$};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\bot $} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting using the strictness of lifted morphisms, this amounts to the established fact that <fr:tex display="inline"><![CDATA[h\bot  = h_\bot ]]></fr:tex>.</html:p></html:li>

    <html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="fddc455f17cd3f5ddbc90bc089731c90"><fr:resource-content><html:img src="/fddc455f17cd3f5ddbc90bc089731c90.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\eta _{A_\bullet }$} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting with established equations, it suffices to observe that the outer diagram below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="f2f99c5cb6ff34b8755f764313e0c992"><fr:resource-content><html:img src="/f2f99c5cb6ff34b8755f764313e0c992.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [below = of nww] (sww) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \node [right = 2.5cm of nww] (nw) {$LA_\bullet $};
          \node [right = 2.5cm of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->,gray] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->,gray] (nw) to node[upright desc,] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding,gray] (nww) to node[upright desc,] {$\eta _{A_\bullet }$} (nw);
          \draw [->] (nww) to node[left] {$\iota _{\bullet }$} (sww);
          \draw [->] (sww) to node[below] {$h_{A_\infty }$} (se);
          \node [above = of nw] (nnw) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \draw [->] (nww) to node[sloped,above] {$\iota _\bullet $} (nnw);
          \draw [->] (nnw) to node[sloped,above] {${\mathopen {}\left \{\eta _{A_\infty }\right \}\mathclose {}}$} (ne);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure></html:li>

    <html:p>Finally, we must check that any two morphisms <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{k,k'}}{D}]]></fr:tex> factoring <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> through <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{\mathsf {L}{\iota _\bullet }}}{{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}}]]></fr:tex> are equal. To that end, we will use the universal property of the co-comma square defining <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> once more to reduce this to checking that <fr:tex display="inline"><![CDATA[k,k']]></fr:tex> agree on <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> and on <fr:tex display="inline"><![CDATA[\eta _{A_\bullet }]]></fr:tex>. The former follows directly from the strictness of <fr:tex display="inline"><![CDATA[\mathsf {L}{\iota _\bullet }]]></fr:tex>, as we have <fr:tex display="inline"><![CDATA[k\bot  = k{\mathopen {}\left (\mathsf {L} \iota _\bullet \bot \right )\mathclose {}}=d_\bullet \bot ]]></fr:tex>. For the latter, we must check that <fr:tex display="inline"><![CDATA[k\circ  \eta _{A_\infty }=k'\circ  \eta _{A_\infty }]]></fr:tex>; by the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[k\circ \eta _{A_\infty }\circ  \iota _\bullet  = k'\circ \eta _{A_\infty }\circ \iota _\bullet ]]></fr:tex>. By naturality of the unit, these are both equal to <fr:tex display="inline"><![CDATA[d_\bullet \circ  \eta _{A_\bullet }]]></fr:tex>.</html:p></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-001L/</fr:uri><fr:display-uri>jms-001L</fr:display-uri><fr:route>/jms-001L/</fr:route><fr:title text="Connected colimits of lift-algebras">Connected colimits of lift-algebras</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> be the lifting monad on dcpos; the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> is closed under connected colimits, and these colimits are <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">created</fr:link> by the forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the following facts:</html:p>
  <html:ol><html:li>The category of dcpos is (even constructively) <fr:link href="/jung-moshier-vickers-2008/" title="Presenting dcpos and dcpo algebras" uri="https://www.jonmsterling.com/jung-moshier-vickers-2008/" display-uri="jung-moshier-vickers-2008" type="local">known to be cocomplete</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">Lifting preserves connected colimits</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001K/" title="Creation of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001K/" display-uri="jms-001K" type="local">The forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex> creates whatever colimits <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> preserves</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005F/</fr:uri><fr:display-uri>jms-005F</fr:display-uri><fr:route>/jms-005F/</fr:route><fr:title text="Coproducts of lift-algebras">Coproducts of lift-algebras</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos has all small coproducts.</html:p><html:p>This is the first part of Corollary 2 of Linton's <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Coequalizers in categories of algebras</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The coproduct of lift-algebras is computed as a reflexive coequalizer, whose existence we have <fr:link href="/jms-001L/" title="Connected colimits of lift-algebras" uri="https://www.jonmsterling.com/jms-001L/" display-uri="jms-001L" type="local">already established</fr:link>. Given an index set <fr:tex display="inline"><![CDATA[I]]></fr:tex> and a diagram <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex>, the colimit of the following reflexive pair is the coproduct of <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex> as shown by <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link>:</html:p>
  
 
  
  <html:figure><fr:resource hash="8c54957660ade9f9bef9650c25a07c4d"><fr:resource-content><html:img src="/8c54957660ade9f9bef9650c25a07c4d.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (0) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {L}\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 4.5cm of 0] (1) {$\mathsf {F}^{\mathbb {L}}\mathsf {L}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 3cm of 1] (2) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \draw [->] (0) to node[above] {$\mathsf {F}^{\mathbb {L}}{\mathopen {}\left  [i\mid  \mathsf {L}\,\mathsf {in}_{i}\right  ]\mathclose {}}$} (1);
      \draw [->] (1) to node[above] {$\epsilon $} (2);
      \draw [->,bend right=30] (0) to node[below] {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\alpha _{X_\bullet }}$} (2);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 

</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005G/</fr:uri><fr:display-uri>jms-005G</fr:display-uri><fr:route>/jms-005G/</fr:route><fr:title text="The category of lift-algebras is cocomplete">The category of lift-algebras is cocomplete</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos is cocomplete.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows because <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under <fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">connected colimits</fr:link> and <fr:link href="/jms-005F/" title="Coproducts of lift-algebras" uri="https://www.jonmsterling.com/jms-005F/" display-uri="jms-005F" type="local">coproducts</fr:link></html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree></fr:mainmatter></fr:tree>
  <fr:tree show-metadata="false" expanded="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005H/</fr:uri><fr:display-uri>jms-005H</fr:display-uri><fr:route>/jms-005H/</fr:route><fr:title text="Displayed functors and natural transformations">Displayed functors and natural transformations</fr:title></fr:frontmatter><fr:mainmatter><html:p>We will develop the theory of functors between <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed categories</fr:link> or <fr:link href="/frct-0002/" title="Cartesian fibration" uri="https://www.jonmsterling.com/frct-0002/" display-uri="frct-0002" type="local">fibrations</fr:link> as well as natural transformations between these functors, building on <fr:link href="/ahrens-lumsdaine-2019/" title="Displayed categories" uri="https://www.jonmsterling.com/ahrens-lumsdaine-2019/" display-uri="ahrens-lumsdaine-2019" type="local">Ahrens and Lumsdaine</fr:link> and <fr:link href="/jacobs-1999/" title="Categorical logic and type theory" uri="https://www.jonmsterling.com/jacobs-1999/" display-uri="jacobs-1999" type="local">Jacobs</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005I/</fr:uri><fr:display-uri>jms-005I</fr:display-uri><fr:route>/jms-005I/</fr:route><fr:title text="Displayed functor">Displayed functor</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[X]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[B]]></fr:tex> and let <fr:tex display="inline"><![CDATA[Y]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[C]]></fr:tex>, and let <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{F}}{C}]]></fr:tex> be a functor. A <html:em>displayed functor</html:em> from <fr:tex display="inline"><![CDATA[X]]></fr:tex> to <fr:tex display="inline"><![CDATA[Y]]></fr:tex> over <fr:tex display="inline"><![CDATA[F]]></fr:tex>, written <fr:tex display="inline"><![CDATA[{X}\xrightarrow [F]{\bar F}{Y}]]></fr:tex> is defined by the following data:</html:p><html:ol><html:li>for each displayed object <fr:tex display="inline"><![CDATA[x\in  X^b]]></fr:tex>, an assigned object <fr:tex display="inline"><![CDATA[\bar F_b x \in  Y^{F b}]]></fr:tex>;</html:li>
  <html:li>for each displayed morphism <fr:tex display="inline"><![CDATA[{x}\xrightarrow [f]{\bar {f}}{y}]]></fr:tex> in <fr:tex display="inline"><![CDATA[X]]></fr:tex> over <fr:tex display="inline"><![CDATA[{b}\xrightarrow {{f}}{c}]]></fr:tex> in <fr:tex display="inline"><![CDATA[B]]></fr:tex>, an assigned morphism <fr:tex display="inline"><![CDATA[{\bar F_b{x}}\xrightarrow [F{f}]{\bar F_f\bar {f}}{\bar F_c y}]]></fr:tex>;</html:li>
  <html:li>such that <fr:tex display="inline"><![CDATA[\bar F_{1_{b}} 1_{x} = 1_{\bar F_b x}]]></fr:tex> and <fr:tex display="inline"><![CDATA[\bar F_{f;g}{\mathopen {}\left (\bar {f};\bar {g}\right )\mathclose {}}=\bar F_f{\bar {f}};\bar F_g{\bar {g}}]]></fr:tex>.</html:li></html:ol><html:p>When it does not cause confusion, we may drop some of the subscripts in our notation.</html:p></fr:mainmatter></fr:tree><html:p>The notion of <fr:link href="/jms-005J/" title="Fibered functor" uri="https://www.jonmsterling.com/jms-005J/" display-uri="jms-005J" type="local">fibered functor</fr:link> below makes sense for arbitrary <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed categories</fr:link>, but it is most useful when applied to <fr:link href="/frct-0002/" title="Cartesian fibration" uri="https://www.jonmsterling.com/frct-0002/" display-uri="frct-0002" type="local">fibrations</fr:link>.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005J/</fr:uri><fr:display-uri>jms-005J</fr:display-uri><fr:route>/jms-005J/</fr:route><fr:title text="Fibered functor">Fibered functor</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[X]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[B]]></fr:tex> and let <fr:tex display="inline"><![CDATA[Y]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[C]]></fr:tex>, and let <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{F}}{C}]]></fr:tex> be a functor. A <fr:link href="/jms-005I/" title="Displayed functor" uri="https://www.jonmsterling.com/jms-005I/" display-uri="jms-005I" type="local">displayed functor</fr:link> from <fr:tex display="inline"><![CDATA[X]]></fr:tex> to <fr:tex display="inline"><![CDATA[Y]]></fr:tex> over <fr:tex display="inline"><![CDATA[F]]></fr:tex> is called <html:em>fibered</html:em> when it preserves <fr:link href="/frct-0001/" title="Cartesian morphism" uri="https://www.jonmsterling.com/frct-0001/" display-uri="frct-0001" type="local">cartesian morphisms</fr:link>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005K/</fr:uri><fr:display-uri>jms-005K</fr:display-uri><fr:route>/jms-005K/</fr:route><fr:title text="Displayed natural transformation">Displayed natural transformation</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[X]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[B]]></fr:tex> and let <fr:tex display="inline"><![CDATA[Y]]></fr:tex> be a <fr:link href="/frct-0000/" title="Displayed category" uri="https://www.jonmsterling.com/frct-0000/" display-uri="frct-0000" type="local">displayed category</fr:link> over <fr:tex display="inline"><![CDATA[C]]></fr:tex>, and let <fr:tex display="inline"><![CDATA[{X}\xrightarrow [F]{\bar F}{Y}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{X}\xrightarrow [G]{\bar G}{Y}]]></fr:tex> be two displayed functors over <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{F,G}}{C}]]></fr:tex> respectively. Given a natural transformation <fr:tex display="inline"><![CDATA[{F}\xrightarrow {{\alpha }}{G}]]></fr:tex>, a <html:em>displayed dinatural transformation</html:em> from <fr:tex display="inline"><![CDATA[\bar F]]></fr:tex> to <fr:tex display="inline"><![CDATA[\bar G]]></fr:tex> over <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex>, written <fr:tex display="inline"><![CDATA[{\bar F}\xrightarrow [\alpha ]{\bar \alpha }{\bar G}]]></fr:tex>, is defined by the following data:</html:p><html:ol><html:li>for each displayed object <fr:tex display="inline"><![CDATA[x\in  X^b]]></fr:tex>, an assigned displayed morphism <fr:tex display="inline"><![CDATA[{\bar F{x}}\xrightarrow [\alpha _b]{\bar \alpha _x}{\bar G{x}}]]></fr:tex>;</html:li>
  <html:li>such that for each <fr:tex display="inline"><![CDATA[{x}\xrightarrow [f]{\bar {f}}{y}]]></fr:tex> in <fr:tex display="inline"><![CDATA[X]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[\bar \alpha _x; \bar G\bar {f} = \bar F\bar {f};\bar \alpha _y]]></fr:tex>.</html:li></html:ol></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005N/</fr:uri><fr:display-uri>jms-005N</fr:display-uri><fr:route>/jms-005N/</fr:route><fr:title text="Vertical functors and natural transformations">Vertical functors and natural transformations</fr:title><fr:taxon>Remark</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>In practice, we will frequently consider <html:em>vertical</html:em> displayed functors between fibrations over the same base category <fr:tex display="inline"><![CDATA[B]]></fr:tex>, i.e. <fr:link href="/jms-005I/" title="Displayed functor" uri="https://www.jonmsterling.com/jms-005I/" display-uri="jms-005I" type="local">functors displayed</fr:link> over the identity functor <fr:tex display="inline"><![CDATA[{B}\xrightarrow {{1_{B}}}{B}]]></fr:tex>. Likewise, we will often consider vertical natural transformations between vertical functors, i.e. <fr:link href="/jms-005K/" title="Displayed natural transformation" uri="https://www.jonmsterling.com/jms-005K/" display-uri="jms-005K" type="local">natural transformations</fr:link> whose components are vertical. The vertical and non-vertical perspectives give rise to two different (very large) displayed categories of displayed categories, one with unfixed base, and the other with a fixed base. Both viewpoints are important, but it is important not to get them confused.</html:p></fr:mainmatter></fr:tree><html:p>We wish to define displayed versions of <fr:link href="/jms-005M/" title="Dinatural transformation" uri="https://www.jonmsterling.com/jms-005M/" display-uri="jms-005M" type="local">dinatural transformations</fr:link>, but there is some question of how much verticality to assume in the definition: for instance, we could define a displayed dinatural transformation over a dinatural transformation, or we could define a totally vertical notion of dinatural transformation. It is unclear to me that the latter would be an instance of the former. We will focus on the latter, because it is most useful in practice when using displayed category theory to formalize reasoning over a fixed base category.</html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>31</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-005L/</fr:uri><fr:display-uri>jms-005L</fr:display-uri><fr:route>/jms-005L/</fr:route><fr:title text="Vertical dinatural transformation">Vertical dinatural transformation</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[X]]></fr:tex> and <fr:tex display="inline"><![CDATA[Y]]></fr:tex> be two <fr:link href="/frct-0002/" title="Cartesian fibration" uri="https://www.jonmsterling.com/frct-0002/" display-uri="frct-0002" type="local">fibrations</fr:link> over <fr:tex display="inline"><![CDATA[B]]></fr:tex>, and let <fr:tex display="inline"><![CDATA[{X^{\mathsf {op}}\times _{B} X}\xrightarrow [1_{B}]{F,G}{Y}]]></fr:tex> be two vertical <fr:link href="/jms-005J/" title="Fibered functor" uri="https://www.jonmsterling.com/jms-005J/" display-uri="jms-005J" type="local">fibered functors</fr:link> over <fr:tex display="inline"><![CDATA[B]]></fr:tex>, recalling the theory of <fr:link href="/frct-000Q/" title="Opposite categories" uri="https://www.jonmsterling.com/frct-000Q/" display-uri="frct-000Q" type="local">opposite fibrations</fr:link>. A <html:em>vertical dinatural transformation</html:em> <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> from <fr:tex display="inline"><![CDATA[F]]></fr:tex> to <fr:tex display="inline"><![CDATA[G]]></fr:tex> is defined by the following data:</html:p><html:ol><html:li>for each displayed object <fr:tex display="inline"><![CDATA[x\in  X^b]]></fr:tex>, an assigned vertical morphism <fr:tex display="inline"><![CDATA[{F_b{\mathopen {}\left (x,x\right )\mathclose {}}}\xrightarrow [1_{b}]{\alpha _x}{G_b{\mathopen {}\left (x,x\right )\mathclose {}}}]]></fr:tex>;</html:li>
  <html:li>such that for each displayed morphism <fr:tex display="inline"><![CDATA[{x}\xrightarrow [f]{\bar {f}}{y}]]></fr:tex> over <fr:tex display="inline"><![CDATA[{b}\xrightarrow {{f}}{c}\in B]]></fr:tex>, the following hexagon commutes:
    
 
  
  <html:figure><fr:resource hash="5c43227e8333ea59351f89bf6a09613f"><fr:resource-content><html:img src="/5c43227e8333ea59351f89bf6a09613f.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
      
      \begin {tikzpicture}[diagram]
        \node  (nw) {$F_b{\mathopen {}\left (x,x\right )\mathclose {}}$};
        \node [right = 3.25cm of nw] (ne) {$G_b{\mathopen {}\left (x,x\right )\mathclose {}}$};
        \node [below right = 3.25cm of ne] (e) {$G_b{\mathopen {}\left (x,f^{*}{y}\right )\mathclose {}}$};
        \node [below left = 3.25cm of e] (se) {$G_b{\mathopen {}\left (f^{*}y,f^{*}y\right )\mathclose {}}$};
        \node [below left = 3.25cm of nw] (w) {$F_b{\mathopen {}\left (f^{*}y,x\right )\mathclose {}}$};
        \node [below right = 3.25cm of w] (sw) {$F_b{\mathopen {}\left (f^{*}y,f^{*}y\right )\mathclose {}}$};
        \draw [->] (w) to node[sloped,above] {$F_b{\mathopen {}\left (\gamma _{\bar {f}},x\right )\mathclose {}}$} (nw);
        \draw [->] (nw) to node[above] {${\alpha }_x$} (ne);
        \draw [->] (sw) to node[below] {${\alpha }_{f^{*}y}$} (se);
        \draw [->] (ne) to node[sloped,above] {$G_b{\mathopen {}\left (x,\gamma _{\bar {f}}\right )\mathclose {}}$} (e);
        \draw [->] (w) to node[sloped,below] {$F_b{\mathopen {}\left (f^{*}{y},\gamma _{\bar {f}}\right )\mathclose {}}$} (sw);
        \draw [->] (se) to node[sloped,below] {$G_b{\mathopen {}\left (\gamma _{\bar {f}},f^{*}y\right )\mathclose {}}$} (e);
      \end {tikzpicture}
    ]]></fr:resource-source></fr:resource></html:figure></html:li></html:ol><html:p>Above, we have written <fr:tex display="inline"><![CDATA[{x}\xrightarrow [1_{b}]{\gamma _{\bar {f}}}{f^{*}{y}}\in  X^b]]></fr:tex> for the <html:em>vertical gap map</html:em> factoring <fr:tex display="inline"><![CDATA[{x}\xrightarrow [f]{\bar {f}}{y}]]></fr:tex> through the cartesian map <fr:tex display="inline"><![CDATA[{f^{*}{y}}\xrightarrow [f]{y^{*}f}{x}]]></fr:tex>. We have used <fr:link href="/frct-000S/" title="Exegesis of opposite categories" uri="https://www.jonmsterling.com/frct-000S/" display-uri="frct-000S" type="local">the fact</fr:link> that a vertical map in <fr:tex display="inline"><![CDATA[X^{\mathsf {op}}]]></fr:tex> is the same as a vertical map in <fr:tex display="inline"><![CDATA[X]]></fr:tex> going the other way.</html:p></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree>
<fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:title text="Drafts">Drafts</fr:title></fr:frontmatter><fr:mainmatter><fr:tree show-metadata="true" expanded="false" toc="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006I/</fr:uri><fr:display-uri>jms-006I</fr:display-uri><fr:route>/jms-006I/</fr:route><fr:title text="Independent sums in categories of monomorphisms">Independent sums in categories of monomorphisms</fr:title></fr:frontmatter><fr:mainmatter><html:p><html:em>Independent sums</html:em> play an important role in the semantics of local state, as developed by <fr:link href="/kammar-levy-moss-staton-2017/" title="A monad for full ground reference cells" uri="https://www.jonmsterling.com/kammar-levy-moss-staton-2017/" display-uri="kammar-levy-moss-staton-2017" type="local">Kammar, Levy, Moss, and Staton</fr:link> and further refined by <fr:link href="/polzer-goncharov-2020/" title="Local local reasoning: a BI-hyperdoctrine for full ground store" uri="https://www.jonmsterling.com/polzer-goncharov-2020/" display-uri="polzer-goncharov-2020" type="local">Polzer and Goncharov</fr:link>. Although these authors did not elucidate the universal property of independent sums, they alude to <fr:link href="/simpson-2018/" title="Category-theoretic structure for independence and conditional independence" uri="https://www.jonmsterling.com/simpson-2018/" display-uri="simpson-2018" type="local">Alex Simpson’s notion of independence structure</fr:link> — which ought to provide, after taking opposite categories, a suitable abstract interface to the notion of independent coproduct. We will explore a special case of this abstract structure that is more concrete than the general case, but nonetheless allows for a conceptual reconstruction of the ideas of <fr:link href="/kammar-levy-moss-staton-2017/" title="A monad for full ground reference cells" uri="https://www.jonmsterling.com/kammar-levy-moss-staton-2017/" display-uri="kammar-levy-moss-staton-2017" type="local">Kammar <html:em>et al.</html:em></fr:link> based on simpler and more intuitive universal properties. Although it is important to <html:em>be able</html:em> to give explicit computations, a presentation that <html:em>requires</html:em> explicit computations does not scale to verifying the beautiful and intricate constructions of <html:em>op. cit.</html:em></html:p><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006J/</fr:uri><fr:display-uri>jms-006J</fr:display-uri><fr:route>/jms-006J/</fr:route><fr:title text="Independent co-span">Independent co-span</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>A co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  w\hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> of monomorphisms in a category <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> is called <html:em>independent</html:em> when its pullback is a span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u \hookleftarrow  \mathbf {0}_{\mathcal {C}} \hookrightarrow  v\right \}\mathclose {}}]]></fr:tex> in which <fr:tex display="inline"><![CDATA[\mathbf {0}_{\mathcal {C}}]]></fr:tex> is initial in <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006L/</fr:uri><fr:display-uri>jms-006L</fr:display-uri><fr:route>/jms-006L/</fr:route><fr:title text="Independent sum">Independent sum</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The <html:em>independent sum</html:em> of a pair of objects <fr:tex display="inline"><![CDATA[u,v\in \mathcal {C}]]></fr:tex> defined to be the <html:em>initial</html:em> <fr:link href="/jms-006J/" title="Independent co-span" uri="https://www.jonmsterling.com/jms-006J/" display-uri="jms-006J" type="local">independent co-span</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u \hookrightarrow  u\oplus  v \hookleftarrow  v\right \}\mathclose {}}]]></fr:tex>, when it exists.</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006P/</fr:uri><fr:display-uri>jms-006P</fr:display-uri><fr:route>/jms-006P/</fr:route><fr:title text="Independent complement">Independent complement</fr:title><fr:taxon>Definition</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>The <html:em>independent complement</html:em> of a monomorphism <fr:tex display="inline"><![CDATA[\rho  : u\hookrightarrow  v]]></fr:tex> in a category <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> is, if it exists, the greatest monomorphism <fr:tex display="inline"><![CDATA[v\ominus  \rho  \hookrightarrow  v]]></fr:tex> such that the co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{v\ominus \rho \hookrightarrow  v \hookleftarrow  u\right \}\mathclose {}}]]></fr:tex> is an <fr:link href="/jms-006L/" title="Independent sum" uri="https://www.jonmsterling.com/jms-006L/" display-uri="jms-006L" type="local">independent sum</fr:link>.</html:p><html:p><html:strong>Question</html:strong>. Would it suffice to simply ask that the co-span is independent, but not universally so?</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006M/</fr:uri><fr:display-uri>jms-006M</fr:display-uri><fr:route>/jms-006M/</fr:route><fr:title text="Disjoint coproducts are independent sums">Disjoint coproducts are independent sums</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>In an extensive category, any coproduct co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u \hookrightarrow  u+v \hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> is an <fr:link href="/jms-006L/" title="Independent sum" uri="https://www.jonmsterling.com/jms-006L/" display-uri="jms-006L" type="local">independent sum</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>As soon as the co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u \hookrightarrow  u+v \hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> is independent, it evidently satisfies the universal property of <fr:link href="/jms-006L/" title="Independent sum" uri="https://www.jonmsterling.com/jms-006L/" display-uri="jms-006L" type="local">independent sums</fr:link>, which is weaker than that of coproducts. Coproduct co-spans are always independent in an extensive category.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006Q/</fr:uri><fr:display-uri>jms-006Q</fr:display-uri><fr:route>/jms-006Q/</fr:route><fr:title text="Independent complements in extensive categories">Independent complements in extensive categories</fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>In an extensive category <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, the independent complement of a monomorphism is precisely the Heyting complement of that morphism when it exists.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows immediately from the fact that <fr:link href="/jms-006M/" title="Disjoint coproducts are independent sums" uri="https://www.jonmsterling.com/jms-006M/" display-uri="jms-006M" type="local">independent sums are coproducts</fr:link> in extensive <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006K/</fr:uri><fr:display-uri>jms-006K</fr:display-uri><fr:route>/jms-006K/</fr:route><fr:title text="Wide subcategory of monomorphisms">Wide subcategory of monomorphisms</fr:title><fr:taxon>Notation</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Given a category <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>, we define <fr:tex display="inline"><![CDATA[\mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}]]></fr:tex> to be the wide subcategory of <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> spanned by monomorphisms. (As any isomorphism is a monomorphism, the <html:em>obvious</html:em> construction of the precategory <fr:tex display="inline"><![CDATA[\mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}]]></fr:tex> gives a category.)</html:p></fr:mainmatter></fr:tree><fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:uri>https://www.jonmsterling.com/jms-006N/</fr:uri><fr:display-uri>jms-006N</fr:display-uri><fr:route>/jms-006N/</fr:route><fr:title text="Creation of independent sums in \mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}">Creation of independent sums in <fr:tex display="inline"><![CDATA[\mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}]]></fr:tex></fr:title><fr:taxon>Lemma</fr:taxon></fr:frontmatter><fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> be an extensive category. Then independent sums are created by the inclusion <fr:tex display="inline"><![CDATA[\mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}\hookrightarrow \mathcal {C}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>7</fr:month><fr:day>29</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The proof of this fact is purely formal, following by several applications of descent.</html:p>

  <html:p>Given a coproduct co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  u+ v \hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex> along with an independent co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  w \hookleftarrow  v\right \}\mathclose {}}]]></fr:tex>, it suffices to check that the universal map <fr:tex display="inline"><![CDATA[u+ v\to  w]]></fr:tex> is a monomorphism. Equivalently, we wish to check that the following square is cartesian:</html:p>

  
 
  
  <html:figure><fr:resource hash="cdad16ce1359d9af8916ca7abec5ae30"><fr:resource-content><html:img src="/cdad16ce1359d9af8916ca7abec5ae30.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = u+v,
      ne = u+v,
      sw = u+v,
      se = w,
      north/style = {double},
      west/style = {double},
      nw/style = dotted pullback,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  By the <html:em>descent property</html:em> for binary coproducts in an extensive category, it suffices to check that each of the following restrictions of that square along the coproduct injections is cartesian:

  
 
  
  <html:figure><fr:resource hash="618600ee8fcc9bcbd7b70a5bee78e3e2"><fr:resource-content><html:img src="/618600ee8fcc9bcbd7b70a5bee78e3e2.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = u,
      ne = u+v,
      sw = u,
      se = w,
      west/style = {double},
      north/style = {embedding},
      nw/style = dotted pullback,
    }
    \qquad 
    \DiagramSquare {
      nw = v,
      ne = u+v,
      sw = v,
      se = w,
      west/style = {double},
      north/style = {embedding},
      nw/style = dotted pullback,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We will consider only the first square, which we rotate ninety degrees.</html:p>

  
 
  
  <html:figure><fr:resource hash="5b052104a1ca237042d78ee1ca37e34a"><fr:resource-content><html:img src="/5b052104a1ca237042d78ee1ca37e34a.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = u,
      sw = u+v,
      se = w,
      ne = u,
      west/style = {embedding},
      east/style = {embedding},
      north/style = {double},
      nw/style = dotted pullback,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>By the disjointness and stability of coproducts, we have an isomorphism <fr:tex display="inline"><![CDATA[u\cong  {\mathopen {}\left (u\times _{u+v}u\right )\mathclose {}}+ {\mathopen {}\left (v\times _{u+v}u\right )\mathclose {}}]]></fr:tex>, and so we may rewrite the diagram above as follows.</html:p>

  
 
  
  <html:figure><fr:resource hash="5785887b472aa4b721435c13099fefb6"><fr:resource-content><html:img src="/5785887b472aa4b721435c13099fefb6.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      width = 4cm,
      nw = {\mathopen {}\left (u\times _{u+v}u\right )\mathclose {}}+ {\mathopen {}\left (v\times _{u+v}u\right )\mathclose {}},
      sw = u+v,
      se = w,
      ne = u,
      north = \cong ,
      west/style = {embedding},
      east/style = {embedding},
      nw/style = dotted pullback,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We use the descent law for coproducts in an extensive category once more to reduce the cartesianness of the square above to that of the following two squares:</html:p>

  
 
  
  <html:figure><fr:resource hash="930cd634cb411b8476185182f7768763"><fr:resource-content><html:img src="/930cd634cb411b8476185182f7768763.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = u\times _{u+v}u,
      sw = u,
      ne = u,
      se = w,
      east/style = embedding,
      south/style = embedding,
      north = \cong ,
      west = \cong ,
      nw/style = dotted pullback,
    }
    \qquad 
    \DiagramSquare {
      nw = v\times _{u+v}u\cong \mathbf {0}_{\mathcal {C}},
      sw = v,
      ne = u,
      se = w,
      width = 2.5cm,
      east/style = embedding,
      south/style = embedding,
      nw/style = dotted pullback,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>The first square is cartesian because <fr:tex display="inline"><![CDATA[u\hookrightarrow  w]]></fr:tex> is a monomorphism. The second square is cartesian because the span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  w\hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> is assumed independent.</html:p>

  <html:p>Thus it follows that <fr:tex display="inline"><![CDATA[u+v\to  w]]></fr:tex> is a monomorphism, and so we may define the independent coproduct <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  u\oplus  v\hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathbf {Inj}{\mathopen {}\left (\mathcal {C}\right )\mathclose {}}]]></fr:tex> by the coproduct co-span <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{u\hookrightarrow  u+v\hookleftarrow  v\right \}\mathclose {}}]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {C}]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
<fr:link href="/jms-006K/" title="Wide subcategory of monomorphisms" uri="https://www.jonmsterling.com/jms-006K/" display-uri="jms-006K" type="local" /></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter></fr:tree></fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
