<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>4</fr:month>
      <fr:day>9</fr:day>
    </fr:date>
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>4</fr:month>
      <fr:day>11</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-01A0/</fr:uri>
    <fr:display-uri>jms-01A0</fr:display-uri>
    <fr:route>/jms-01A0/</fr:route>
    <fr:title text="Weeknotes 2025-W15 › Forester 5.0 development: canonical URLs, atom feeds, and LSP"><fr:link href="/2025-W15/" title="Weeknotes 2025-W15" uri="https://www.jonmsterling.com/2025-W15/" display-uri="2025-W15" type="local">Weeknotes 2025-W15</fr:link> › <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link> development: canonical URLs, atom feeds, and LSP</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>Work on <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link> proceeds apace, generously supported by <fr:link href="/jms-00XB/" title="Advanced Research + Invention Agency" uri="https://www.jonmsterling.com/jms-00XB/" display-uri="jms-00XB" type="local">ARIA</fr:link> who have engaged <fr:link href="/kentookura/" title="Kento Okura" uri="https://www.jonmsterling.com/kentookura/" display-uri="kentookura" type="local">Kento Okura</fr:link> and myself on a consulting basis to support their internal use of Forester. My recent goals have been to bring Forester closer in line with the architecture of the World Wide Web; to that end, I have made two big improvements.</html:p>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>9</fr:day>
        </fr:date>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>11</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-01AA/</fr:uri>
        <fr:display-uri>jms-01AA</fr:display-uri>
        <fr:route>/jms-01AA/</fr:route>
        <fr:title text="First cut at canonical URLs">First cut at canonical URLs</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>Trees are addressed by “canonical URLs” that are meant to be the place where they will ultimately be published. See <fr:link href="https://www.forester-notes.org/JVIT/" title="Towards Forester 5.0 II: a design for canonical URLs" uri="https://www.forester-notes.org/JVIT/" display-uri="https://www.forester-notes.org/JVIT/" type="local">my blog post</fr:link> on the design for more details. Canonical URLs are of the form <html:code>https://www.my-host.net/tree-name/</html:code>; the handling is a little fragile right now and you can expect bugs (but please write to me about them).</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>9</fr:day>
        </fr:date>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>11</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-01AB/</fr:uri>
        <fr:display-uri>jms-01AB</fr:display-uri>
        <fr:route>/jms-01AB/</fr:route>
        <fr:title text="First cut at atom syndication">First cut at atom syndication</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>It is now possible to syndicate the children of a tree as an Atom feed. This is done currently by including the following directive in the tree you wish to syndicate:</html:p>
        <html:pre><![CDATA[\syndicate-current-tree-as-atom-feed]]></html:pre>
        <html:p>Then, if your tree is located at <html:code>https://www.my-host.net/tree-name/</html:code>, you will find that there is an atom feed at <html:code>https://www.my-host.net/tree-name/atom.xml</html:code>. There are many subtleties to this, and the atom support will continue to evolve and improve. One thing I need to deal with is the fact that Forester produces nested hyperlinks—which are not valid in HTML! I came up with a pretty slick way to <fr:link href="https://git.sr.ht/~jonsterling/forester-base-theme/commit/a251f9cf19b0ff42f4553d315df5181b985c79cb" type="external">handle this in XSLT</fr:link>, but that Atom renderer is intended to bypass that entirely.</html:p>
        <html:p>As a side note, I am very happy to see that I am <fr:link href="https://patrick.sirref.org/weekly-2025-03-31/" type="external">not the only person</fr:link> using the new support for Atom feeds. Patrick’s fork of Forester is looking pretty cool, and I am excited to learn more from what he is doing. I’m also relieved that he was able to get rebased atop the ever-changing <html:code>forester-5.0-dev</html:code> branch.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>9</fr:day>
        </fr:date>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>11</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-01AC/</fr:uri>
        <fr:display-uri>jms-01AC</fr:display-uri>
        <fr:route>/jms-01AC/</fr:route>
        <fr:title text="Federation is still janky">Federation is still janky</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>One thing I want to start designing soon is how best to handle federated forests. Right now, Forester bundles all the imported material under a <html:code>foreign/my-friends-host/</html:code> directory and routes all links accordingly, but in many (but not all!) cases one would want to not bundle things at all and instead have links routed directly to the canonical URLs as published on the World Wide Web. I am not sure of the best design for this, so I welcome feedback. In the meanwhile, enjoy the janky prototype feel.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>9</fr:day>
        </fr:date>
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>4</fr:month>
          <fr:day>11</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-01A9/</fr:uri>
        <fr:display-uri>jms-01A9</fr:display-uri>
        <fr:route>/jms-01A9/</fr:route>
        <fr:title text="Language server; code completion via effects and handlers">Language server; code completion via effects and handlers</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p><fr:link href="/kentookura/" title="Kento Okura" uri="https://www.jonmsterling.com/kentookura/" display-uri="kentookura" type="local">Kento</fr:link> is hard at work hardening Forester’s language server. I am hoping that we will have something to show on the scale of a week.</html:p>
        <html:p>There were some subtleties about how to provide completion information at a source location—which is at least as complex as the expander itself, since scope emerges from the expansion process. We had something fairly broken in place, which I have spent Thursday and Friday morning replacing with something cool using OCaml 5’s effects and handlers. The idea is to instrument the expander with an effect that notifies observes that it has entered a source range; this can be handled as a no-op, <html:em>or</html:em> by querying the scope’s available symbols when it enters the desired range and throwing away the continuation, and resuming the continuation otherwise to keep searching. This approach allows all the scope-handling code to be unified into a single routine, whose behaviour is controlled by effect handlers on the outside.</html:p>
        <html:p>As a side note, I am looking forward to when the next version of <fr:link href="https://topiary.tweag.io/" type="external">Topiary</fr:link> is released, which should contain support for formatting OCaml’s effect handlers. Right now we don’t use the nice notation because we are stuck on Topiary 0.6.0.</html:p>
      </fr:mainmatter>
    </fr:tree>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>4</fr:month>
              <fr:day>9</fr:day>
            </fr:date>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>4</fr:month>
              <fr:day>11</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/2025-W15/</fr:uri>
            <fr:display-uri>2025-W15</fr:display-uri>
            <fr:route>/2025-W15/</fr:route>
            <fr:title text="Weeknotes 2025-W15">Weeknotes 2025-W15</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>I have a lot to say this week, so strap in.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>9</fr:day>
                </fr:date>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-01A0/</fr:uri>
                <fr:display-uri>jms-01A0</fr:display-uri>
                <fr:route>/jms-01A0/</fr:route>
                <fr:title text="Forester 5.0 development: canonical URLs, atom feeds, and LSP"><fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link> development: canonical URLs, atom feeds, and LSP</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Work on <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link> proceeds apace, generously supported by <fr:link href="/jms-00XB/" title="Advanced Research + Invention Agency" uri="https://www.jonmsterling.com/jms-00XB/" display-uri="jms-00XB" type="local">ARIA</fr:link> who have engaged <fr:link href="/kentookura/" title="Kento Okura" uri="https://www.jonmsterling.com/kentookura/" display-uri="kentookura" type="local">Kento Okura</fr:link> and myself on a consulting basis to support their internal use of Forester. My recent goals have been to bring Forester closer in line with the architecture of the World Wide Web; to that end, I have made two big improvements.</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01AA/</fr:uri>
                    <fr:display-uri>jms-01AA</fr:display-uri>
                    <fr:route>/jms-01AA/</fr:route>
                    <fr:title text="First cut at canonical URLs">First cut at canonical URLs</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Trees are addressed by “canonical URLs” that are meant to be the place where they will ultimately be published. See <fr:link href="https://www.forester-notes.org/JVIT/" title="Towards Forester 5.0 II: a design for canonical URLs" uri="https://www.forester-notes.org/JVIT/" display-uri="https://www.forester-notes.org/JVIT/" type="local">my blog post</fr:link> on the design for more details. Canonical URLs are of the form <html:code>https://www.my-host.net/tree-name/</html:code>; the handling is a little fragile right now and you can expect bugs (but please write to me about them).</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01AB/</fr:uri>
                    <fr:display-uri>jms-01AB</fr:display-uri>
                    <fr:route>/jms-01AB/</fr:route>
                    <fr:title text="First cut at atom syndication">First cut at atom syndication</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>It is now possible to syndicate the children of a tree as an Atom feed. This is done currently by including the following directive in the tree you wish to syndicate:</html:p>
                    <html:pre><![CDATA[\syndicate-current-tree-as-atom-feed]]></html:pre>
                    <html:p>Then, if your tree is located at <html:code>https://www.my-host.net/tree-name/</html:code>, you will find that there is an atom feed at <html:code>https://www.my-host.net/tree-name/atom.xml</html:code>. There are many subtleties to this, and the atom support will continue to evolve and improve. One thing I need to deal with is the fact that Forester produces nested hyperlinks—which are not valid in HTML! I came up with a pretty slick way to <fr:link href="https://git.sr.ht/~jonsterling/forester-base-theme/commit/a251f9cf19b0ff42f4553d315df5181b985c79cb" type="external">handle this in XSLT</fr:link>, but that Atom renderer is intended to bypass that entirely.</html:p>
                    <html:p>As a side note, I am very happy to see that I am <fr:link href="https://patrick.sirref.org/weekly-2025-03-31/" type="external">not the only person</fr:link> using the new support for Atom feeds. Patrick’s fork of Forester is looking pretty cool, and I am excited to learn more from what he is doing. I’m also relieved that he was able to get rebased atop the ever-changing <html:code>forester-5.0-dev</html:code> branch.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01AC/</fr:uri>
                    <fr:display-uri>jms-01AC</fr:display-uri>
                    <fr:route>/jms-01AC/</fr:route>
                    <fr:title text="Federation is still janky">Federation is still janky</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>One thing I want to start designing soon is how best to handle federated forests. Right now, Forester bundles all the imported material under a <html:code>foreign/my-friends-host/</html:code> directory and routes all links accordingly, but in many (but not all!) cases one would want to not bundle things at all and instead have links routed directly to the canonical URLs as published on the World Wide Web. I am not sure of the best design for this, so I welcome feedback. In the meanwhile, enjoy the janky prototype feel.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A9/</fr:uri>
                    <fr:display-uri>jms-01A9</fr:display-uri>
                    <fr:route>/jms-01A9/</fr:route>
                    <fr:title text="Language server; code completion via effects and handlers">Language server; code completion via effects and handlers</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p><fr:link href="/kentookura/" title="Kento Okura" uri="https://www.jonmsterling.com/kentookura/" display-uri="kentookura" type="local">Kento</fr:link> is hard at work hardening Forester’s language server. I am hoping that we will have something to show on the scale of a week.</html:p>
                    <html:p>There were some subtleties about how to provide completion information at a source location—which is at least as complex as the expander itself, since scope emerges from the expansion process. We had something fairly broken in place, which I have spent Thursday and Friday morning replacing with something cool using OCaml 5’s effects and handlers. The idea is to instrument the expander with an effect that notifies observes that it has entered a source range; this can be handled as a no-op, <html:em>or</html:em> by querying the scope’s available symbols when it enters the desired range and throwing away the continuation, and resuming the continuation otherwise to keep searching. This approach allows all the scope-handling code to be unified into a single routine, whose behaviour is controlled by effect handlers on the outside.</html:p>
                    <html:p>As a side note, I am looking forward to when the next version of <fr:link href="https://topiary.tweag.io/" type="external">Topiary</fr:link> is released, which should contain support for formatting OCaml’s effect handlers. Right now we don’t use the nice notation because we are stuck on Topiary 0.6.0.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>9</fr:day>
                </fr:date>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-01A1/</fr:uri>
                <fr:display-uri>jms-01A1</fr:display-uri>
                <fr:route>/jms-01A1/</fr:route>
                <fr:title text="Project Pterosaur: yes, I’m building a new proof assistant"><fr:link href="/jms-019E/" title="Project Pterosaur" uri="https://www.jonmsterling.com/jms-019E/" display-uri="jms-019E" type="local">Project Pterosaur</fr:link>: yes, I’m building a new proof assistant</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>I swore after building <fr:link href="https://github.com/RedPRL/cooltt" type="external">cooltt</fr:link>, <fr:link href="https://github.com/RedPRL/redtt" type="external">redtt</fr:link>, and <fr:link href="https://github.com/RedPRL/sml-redprl" type="external">RedPRL</fr:link> that I would never build another proof assistant, as the experience burned around four years of my PhD and resulted (at least directly) in very little publishable work—but, to be fair, I probably would not have made the <fr:link href="/jms-0014/" title="Chapter 7: normalization for cubical type theory" uri="https://www.jonmsterling.com/jms-0014/" display-uri="jms-0014" type="local">key mathematical discovery</fr:link> of my <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">PhD thesis</fr:link> if it were not for these engineering experiments. But I’m back on my bullshit, as the young people say, and hard at work building a new interactive proof assistant that I have code-named <fr:link href="/jms-019E/" title="Project Pterosaur" uri="https://www.jonmsterling.com/jms-019E/" display-uri="jms-019E" type="local">Project Pterosaur</fr:link>.</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A2/</fr:uri>
                    <fr:display-uri>jms-01A2</fr:display-uri>
                    <fr:route>/jms-01A2/</fr:route>
                    <fr:title text="Locales in dependent type theory?">Locales in dependent type theory?</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>The goal of Pterosaur is to explore the adaptation of <html:em>locales</html:em> from Isabelle to dependent type theory, as a lightweight but extremely expressive alternative to type classes. My colleague <fr:link href="/lawrencepaulson/" title="Lawrence Paulson" uri="https://www.jonmsterling.com/lawrencepaulson/" display-uri="lawrencepaulson" type="local">Larry Paulson</fr:link> has written <fr:link href="https://lawrencecpaulson.github.io/tag/locales" type="external">some great blog posts about locales in Isabelle</fr:link>, and I strongly recommend reading Ballarin’s <fr:link href="https://www21.in.tum.de/~ballarin/publications/jar2019.pdf" type="external">Exploring the Structure of an Algebra Text with Locales</fr:link> to get a feel for what is possible. Here is what locales do:</html:p>
                    <html:ol><html:li>Locales appear to completely solve the pain involved when building up hierarchies of mathematical structures and notations, allowing you to effortlessly combine theories along a common core (e.g. defining rings in terms of a multiplicative monoid and an Abelian group sharing the same carrier).</html:li>
      <html:li>Locales allow you to <html:em>add new methods</html:em> to a theory after the fact, and they will magically be available on anything that extended that theory. You can also add new links in the theory graph, and both cycles and diamonds are allowed so long as they are coherent; this is useful if you want to silently regard (e.g.) the space of endomaps on a set as a monoid, etc.</html:li></html:ol>
                    <html:p>In comparison to modules and type classes, the strength of locales is that you don’t have to decide ahead of time whether you want to “bundle” fields with their carriers, etc. In contrast, a great deal of the difficult work of mathematical library design and maintainance in tools like Rocq, Agda, and <fr:link href="/jms-019G/" title="Lean" uri="https://www.jonmsterling.com/jms-019G/" display-uri="jms-019G" type="local">Lean</fr:link> is figuring out just what things to bundle, and fixing things when your choices inevitably lead to breakage, etc. Locales avoid these problems entirely.</html:p>
                    <html:p>Finally, a reasonably usable locale implementation can be obtained <html:em>without any higher-order unification whatsoever</html:em>. I have a feeling that will be extremely important, given how unreliable (and <fr:link href="https://github.com/agda/agda/issues/5837" type="external">incorrect</fr:link>!) most implementations of higher-order unification are; the situation is so bad that it is actually an open problem to define a correct higher-order unification algorithm in the presence of singleton types (such as the unit type). I do think that this can be solved (and may have already been solved by Andras Kovacs), but my point is that the prognosis for unification in dependent type theory is bad.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A3/</fr:uri>
                    <fr:display-uri>jms-01A3</fr:display-uri>
                    <fr:route>/jms-01A3/</fr:route>
                    <fr:title text="Experimental implementation in Lean">Experimental implementation in <fr:link href="/jms-019G/" title="Lean" uri="https://www.jonmsterling.com/jms-019G/" display-uri="jms-019G" type="local">Lean</fr:link></fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>The other interesting thing about Pterosaur is that I am implementing it in <fr:link href="/jms-019G/" title="Lean" uri="https://www.jonmsterling.com/jms-019G/" display-uri="jms-019G" type="local">Lean</fr:link>; I am not verifying anything, and am making free use of Lean’s <html:code>partial</html:code> keyword (which hides potentially divergent code from definitional equality). Instead, I am thinking of Lean as a “better OCaml”: I can’t speak to the quality of the compiler and code generator, but I can absolutely say that from the perspective of day-to-day programming, Lean has a lot of affordances that make it extremely nice to use. On the other hand, Lean’s story for modularity is not so good; but I hope they don’t “fix” it any time soon, because I think that something like locales could be a good option for Lean itself in the future if I am able to demonstrate their potential in the context of Pterosaur’s clean-room implementation.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A4/</fr:uri>
                    <fr:display-uri>jms-01A4</fr:display-uri>
                    <fr:route>/jms-01A4/</fr:route>
                    <fr:title text="A taste of code">A taste of code</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>I will have more to say about Pterosaur in the future, but let me leave you with a bit of demo code.</html:p>
                    <html:pre><![CDATA[locale Magma { A =>
  car : Type,
  car.isSet : isSet A·car,
  cmp : (x y : A·car) → A·car
}

locale Magma.Hom { f =>
  dom : Magma,
  cod : Magma,
  car : (x : f·dom·car) → f·cod·car,
  cmp : (x y : f·dom·car) → Id f·cod·car (f·car (f·dom·cmp x y)) (f·cod·cmp (f·car x) (f·car y))
}

locale Semigroup { A =>
  splice magma : Magma,
  cmp.assoc : (x y z : A·car) → Id A·car (A·cmp (A·cmp x y) z) (A·cmp x (A·cmp y z))
}

locale Semigroup.Hom {f =>
  dom : Semigroup,
  cod : Semigroup,
  splice magma.hom : Magma.Hom / {dom := f·dom·magma, cod := f·cod·magma}
}

locale Monoid { A =>
  splice semigroup : Semigroup,
  unit : A·car,
  cmp.leftUnit : (x : A·car) → Id A·car (A·cmp A·unit x) x,
  cmp.rightUnit : (x : A·car) → Id A·car (A·cmp x A·unit) x
}

locale Monoid.Hom {f =>
  dom : Monoid,
  cod : Monoid,
  splice semigroup.hom : Semigroup.Hom / {dom := f·dom·semigroup, cod := f·cod·semigroup},
  unit : Id f·cod·car (f·car f·dom·unit) f·cod·unit
}

locale Group { G =>
  splice monoid : Monoid,
  inv : (x : G·car) → G·car,
  inv.inv : (x : G·car) → Id G·car (G·inv (G·inv x)) x
}

locale AbelianGroup { A =>
  splice group : Group,
  splice commutativeOperation : CommutativeOperation / {car := A·car, cmp := A·cmp}
}]]></html:pre>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>9</fr:day>
                </fr:date>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-01A5/</fr:uri>
                <fr:display-uri>jms-01A5</fr:display-uri>
                <fr:route>/jms-01A5/</fr:route>
                <fr:title text="Two papers to appear in LICS ’25">Two papers to appear in <fr:link href="/lics-2025/" title="LICS ’25: 40th Annual ACM/IEEE Symposium on Logic in Computer Science" uri="https://www.jonmsterling.com/lics-2025/" display-uri="lics-2025" type="local">LICS ’25</fr:link></fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This week I have had two papers accepted at <fr:link href="/lics-2025/" title="LICS ’25: 40th Annual ACM/IEEE Symposium on Logic in Computer Science" uri="https://www.jonmsterling.com/lics-2025/" display-uri="lics-2025" type="local">LICS ’25</fr:link>; I’m excited about both of them.</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A6/</fr:uri>
                    <fr:display-uri>jms-01A6</fr:display-uri>
                    <fr:route>/jms-01A6/</fr:route>
                    <fr:title text="With Leoni Pugh: When is the partial map classifier a Sierpiński cone?">With <fr:link href="/leonipugh/" title="Leoni Pugh" uri="https://www.jonmsterling.com/leonipugh/" display-uri="leonipugh" type="local">Leoni Pugh</fr:link>: <fr:link href="/pugh-sterling-2025/" title="When is the partial map classifier a Sierpiński cone?" uri="https://www.jonmsterling.com/pugh-sterling-2025/" display-uri="pugh-sterling-2025" type="local">When is the partial map classifier a Sierpiński cone?</fr:link></fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p><fr:link href="/leonipugh/" title="Leoni Pugh" uri="https://www.jonmsterling.com/leonipugh/" display-uri="leonipugh" type="local">Leoni Pugh</fr:link> is my old Part III student from 2023–2024, and this work builds on her Part III dissertation. The goal of our paper was to better understand the relationship between two approaches to partial functions in denotational semantics:</html:p>
                    <html:ol><html:li><html:strong>“Geometrical” partiality / “the Sierpiński cone”</html:strong>: freely add a lowest element to the space representing a given data type. This is useful for defining functions whose <html:em>inputs</html:em> are partially defined, because you can do a case-analysis on the definedness of the input.</html:li>
      <html:li><html:strong>“Logical” partiality / “the partial map classifier”</html:strong>: representing partially defined elements of a space <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">X</mml:mi></mml:math> by pairs 
  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow xmlns:mml="http://www.w3.org/1998/Math/MathML">
   <mml:mo fence="true" xmlns:mml="http://www.w3.org/1998/Math/MathML"><![CDATA[(]]></mml:mo>
   <mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">p</mml:mi><mml:mo xmlns:mml="http://www.w3.org/1998/Math/MathML">,</mml:mo><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">x</mml:mi>
   <mml:mo fence="true" xmlns:mml="http://www.w3.org/1998/Math/MathML"><![CDATA[)]]></mml:mo>
  </mml:mrow></mml:math>
  where <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">p</mml:mi></mml:math> is a proposition and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">x</mml:mi></mml:math> is a function from <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">isTrue</mml:mi>
  <mml:mrow xmlns:mml="http://www.w3.org/1998/Math/MathML">
   <mml:mo fence="true" xmlns:mml="http://www.w3.org/1998/Math/MathML"><![CDATA[(]]></mml:mo>
   <mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">p</mml:mi>
   <mml:mo fence="true" xmlns:mml="http://www.w3.org/1998/Math/MathML"><![CDATA[)]]></mml:mo>
  </mml:mrow>
 </mml:mrow></mml:math> to <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">X</mml:mi></mml:math>. This is useful for defining functions whose <html:em>outputs</html:em> are partially defined.</html:li></html:ol>
                    <html:p>In traditional domain theory as developed by <fr:link href="/danascott/" title="Dana Scott" uri="https://www.jonmsterling.com/danascott/" display-uri="danascott" type="local">Scott</fr:link>, the two kinds of partiality coincide—<fr:link href="/sterling-2024-lifting/" title="Tensorial structure of the lifting doctrine in constructive domain theory" uri="https://www.jonmsterling.com/sterling-2024-lifting/" display-uri="sterling-2024-lifting" type="local">even constructively</fr:link>. I am, however, interested in <fr:link href="/hyland-1991/" title="First steps in synthetic domain theory" uri="https://www.jonmsterling.com/hyland-1991/" display-uri="hyland-1991" type="local"><html:em>synthetic domain theory</html:em></fr:link> which abstracts away from continuity and limits and lets you just use sets and functions rather than cpos and continuous functions—provided that you avoid non-constructive principles like the Axiom of Choice or the Law of Excluded Middle. The starting point of our work is my observation that the two notions cannot coincide <html:em>absolutely</html:em> in synthetic domain theory, but that there may be restricted subuniverses in which they do coincide. The main result of our paper is to define such a subuniverse, made possible by my discovery of the <html:em>based Segal condition</html:em>—a strengthening of the usual Segal condition for higher categories.</html:p>
                    <html:p>A broader motivation of this work is to develop synthetic domain theory and synthetic higher category theory within the same framework. Whereas synthetic domain theory traditionally concerned itself with spaces that behaved like ω-complete partial orders (but where all functions are automatically monotone and continuous), the same ideas (if applied within <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local">homotopy type theory</fr:link>) allow you to consider spaces that behave like <html:em>∞-categories</html:em> with colimits of ω-chains (but where all functions are automatically ∞-functorial and ω-continuous). I believe that unifying domain theory and higher category theory will prove useful for studying things like the denotational semantics of concurrency, which is inherently higher-dimensional.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>9</fr:day>
                    </fr:date>
                    <fr:date>
                      <fr:year>2025</fr:year>
                      <fr:month>4</fr:month>
                      <fr:day>11</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-01A7/</fr:uri>
                    <fr:display-uri>jms-01A7</fr:display-uri>
                    <fr:route>/jms-01A7/</fr:route>
                    <fr:title text="With Andrew Slattery: Hofmann–Streicher lifting of fibred categories">With <fr:link href="/andrewslattery/" title="Andrew Slattery" uri="https://www.jonmsterling.com/andrewslattery/" display-uri="andrewslattery" type="local">Andrew Slattery</fr:link>: <fr:link href="/slattery-sterling-2025/" title="Hofmann–Streicher lifting of fibred categories" uri="https://www.jonmsterling.com/slattery-sterling-2025/" display-uri="slattery-sterling-2025" type="local">Hofmann–Streicher lifting of fibred categories</fr:link></fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>This year, <fr:link href="/thomasstreicher/" title="Thomas Streicher" uri="https://www.jonmsterling.com/thomasstreicher/" display-uri="thomasstreicher" type="local">Thomas Streicher</fr:link> (born 1958) passed away from cancer. Thomas was one of the Greats of dependent type theory and he also wrote an <fr:link href="https://www.abebooks.co.uk/9789812701428/Domain-theoretic-Foundations-Functional-Programming-Streicher-9812701427/plp" type="external">excellent textbook on domain theory for denotational semantics</fr:link>, but much more importantly he was kind and curious and patient and always made time for young people. While I was still finding my place in the community, Thomas was very generous to me with his time and advice, and he sent me many papers to referee.</html:p>
                    <html:p>Although Thomas made many contributions to dependent type theory, domain theory, realisability theory, and category theory, he is most known to type theorists for two things—both in collaboration with the late <fr:link href="/martinhofmann/" title="Martin Hofmann" uri="https://www.jonmsterling.com/martinhofmann/" display-uri="martinhofmann" type="local">Martin Hofmann</fr:link>: the <fr:link href="/hofmann-streicher-1998/" title="The groupoid interpretation of type theory" uri="https://www.jonmsterling.com/hofmann-streicher-1998/" display-uri="hofmann-streicher-1998" type="local">groupoid interpretation of type theory</fr:link> and the eponymous  <fr:link href="/hofmann-streicher-1997/" title="Lifting Grothendieck universes" uri="https://www.jonmsterling.com/hofmann-streicher-1997/" display-uri="hofmann-streicher-1997" type="local">Hofmann–Streicher universe lifting construction</fr:link>. Andrew and my paper pertains to the latter.</html:p>
                    <html:p>The idea of Hofmann–Streicher lifting has to do with universes, which are “types of types” (typically defined in such a way as to avoid paradoxes). Martin-Löf type theory usually includes universes in order to be able to quantify over (small enough) types; in the simplest models of Martin-Löf type theory, types are interpreted as sets and so Martin-Löf’s universes are interpreted as certain sets of sets, such as <fr:link href="/sga-4/" title="Théorie des topos et cohomologie étale des schémas (SGA 4)" uri="https://www.jonmsterling.com/sga-4/" display-uri="sga-4" type="local">Grothendieck universes</fr:link>. But it is important to be able to interpret the language of type theory in more sophisticated worlds than set theory: for example, in <html:em>presheaves</html:em> (which are functors from a fixed category <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">C</mml:mi></mml:math> into <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi xmlns:mml="http://www.w3.org/1998/Math/MathML">Set</mml:mi></mml:math>).  What <fr:link href="/hofmann-streicher-1997/" title="Lifting Grothendieck universes" uri="https://www.jonmsterling.com/hofmann-streicher-1997/" display-uri="hofmann-streicher-1997" type="local">Hofmann and Streicher</fr:link> did is show how to transform any universe of sets into a universe of presheaves!</html:p>
                    <html:p>Although Hofmann and Streicher’s construction worked well and had good properties, they did not find a <html:em>universal property</html:em> for it—which is an abstract description of the object that determines it uniquely up to isomorphism, usually in terms of how it relates to other objects. Recently <fr:link href="/awodey-2024-universes/" title="On Hofmann–Streicher universes" uri="https://www.jonmsterling.com/awodey-2024-universes/" display-uri="awodey-2024-universes" type="local">Awodey</fr:link> found a 1-dimensional universal property, which was the starting point of our work. What Andrew and I wanted to do is generalise Awodey’s analysis in two directions:</html:p>
                    <html:ol><html:li>We wanted a <html:em>2-dimensional</html:em> version, which is useful because it captures more about the universe than can be said in just one dimension: for example, with a 2-dimensional version, you can see immediately (by “abstract nonsense”) that Hofmann–Streicher lifting preserves structures like monads, adjunctions, etc. that might be used for modelling computational effects, etc.</html:li>
      <html:li>We wanted a <html:em>relative</html:em> version, which would make it easier to iterate the Hofmann–Streicher lifting construction: the purpose of this is to be able to define presheaf models of type theory <html:em>internal</html:em> to other presheaf models. These kind of situations actually happen in practice! For example, the model of <fr:link href="/bbcgsv-2019/" title="Guarded cubical type theory" uri="https://www.jonmsterling.com/bbcgsv-2019/" display-uri="bbcgsv-2019" type="local">guarded cubical type theory</fr:link> that combines step-indexing with univalence ought to be an example of this.</html:li></html:ol>
                    <html:p>To develop this two-fold generalisation of Hofmann–Streicher lifting, we resituated the theory in terms of another of Thomas’s favourite topics: the theory of <html:em>fibrations</html:em>, on which Thomas had written <fr:link href="/streicher-fcjb/" title="Fibred categories à la Jean Bénabou" uri="https://www.jonmsterling.com/streicher-fcjb/" display-uri="streicher-fcjb" type="local">the most wonderful lecture notes</fr:link>.</html:p>
                    <html:p>We dedicated our paper to Thomas’s memory. May he rest in peace.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>9</fr:day>
                </fr:date>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>4</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-01A8/</fr:uri>
                <fr:display-uri>jms-01A8</fr:display-uri>
                <fr:route>/jms-01A8/</fr:route>
                <fr:title text="Reading corner: The Fountains of Paradise"><fr:link href="/jms-01AY/" title="Reading corner" uri="https://www.jonmsterling.com/jms-01AY/" display-uri="jms-01AY" type="local">Reading corner</fr:link>: <fr:link href="/clarke-1979/" title="The Fountains of Paradise" uri="https://www.jonmsterling.com/clarke-1979/" display-uri="clarke-1979" type="local">The Fountains of Paradise</fr:link></fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>I recently read Arthur C. Clarke’s <fr:link href="/clarke-1979/" title="The Fountains of Paradise" uri="https://www.jonmsterling.com/clarke-1979/" display-uri="clarke-1979" type="local">The Fountains of Paradise</fr:link>; although it was a pretty good read, I found that like many science fiction books of that era, one has to look past a lot in order to enjoy it. I wrote some commentary in my post entitled <fr:link href="/jms-019W/" title="Ventriloquy of the Mid-Century Man" uri="https://www.jonmsterling.com/jms-019W/" display-uri="jms-019W" type="local">Ventriloquy of the Mid-Century Man</fr:link> on my culture blog <fr:link href="/jms-015X/" title="The Jon Sterling Review of Books" uri="https://www.jonmsterling.com/jms-015X/" display-uri="jms-015X" type="local">The Jon Sterling Review of Books</fr:link>.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:contributor>
                <fr:link href="https://www.forester-notes.org/kentookura/" title="Kento Okura" uri="https://www.forester-notes.org/kentookura/" display-uri="https://www.forester-notes.org/kentookura/" type="local">Kento Okura</fr:link>
              </fr:contributor>
            </fr:authors>
            <fr:date>
              <fr:year>2024</fr:year>
              <fr:month>10</fr:month>
              <fr:day>20</fr:day>
            </fr:date>
            <fr:uri>https://www.forester-notes.org/jms-011P/</fr:uri>
            <fr:display-uri>https://www.forester-notes.org/jms-011P/</fr:display-uri>
            <fr:route>https://www.forester-notes.org/jms-011P/</fr:route>
            <fr:title text="Forester 5.0">Forester 5.0</fr:title>
            <fr:taxon>Prerelease</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This is a major release of Forester that includes many changes under the hood, as well as breaking changes that will require manual adjustments to existing forests. We are sorry for the frustration that these changes may cause to existing users, but we strongly believe that this is necessary for Forester to reach its potential as a tool that enhances rather than replaces the World Wide Web; we also strongly believe that these changes will make Forester more useful for existing users as well as the next thousand users.</html:p>
            <html:p>What will be included in this release is not completely decided, so consider these release notes as an evolving document. My thanks to <fr:link href="https://www.forester-notes.org/kentookura/" title="Kento Okura" uri="https://www.forester-notes.org/kentookura/" display-uri="https://www.forester-notes.org/kentookura/" type="local">Kento Okura</fr:link> and <fr:link href="https://www.forester-notes.org/owenlynch/" title="Owen Lynch" uri="https://www.forester-notes.org/owenlynch/" display-uri="https://www.forester-notes.org/owenlynch/" type="local">Owen Lynch</fr:link> for conversations leading to the design of this release.</html:p>
            <html:p>Many of the changes included here are meant to support the future of Forester as an authoring tool for a new kind of <html:em>Internet of Science</html:em> that will enable the federation of many different forests by extending existing protocols with new hypermedia controls for content transclusion applicable to scientific authoring.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-0126/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-0126/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-0126/</fr:route>
                <fr:title text="Tl;dr: migration guide">Tl;dr: migration guide</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>To migrate your forest to <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link>, do the following:</html:p>
                <html:ol><html:li>Add a <html:code>url = "https://www.my-forest.com/"</html:code> line under the <html:code>[forest]</html:code> section in your <html:code>forest.toml</html:code>, changing the URL to suit you (see <fr:link href="https://www.forester-notes.org/jms-011Q/" title="Forester 5.0 › Canonical URLs for tree addresses" uri="https://www.forester-notes.org/jms-011Q/" display-uri="https://www.forester-notes.org/jms-011Q/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-011Q/" display-uri="https://www.forester-notes.org/jms-011Q/" /></fr:link>). The purpose of the URL is to be able to address trees in your forest from outside of Forester, i.e. on the World Wide Web. Most users of Forester will use their own domain or institutional web storage for this.</html:li>
  <html:li>Remove all usage of <html:code><![CDATA[\transclude/title]]></html:code> and <html:code><![CDATA[\transclude/taxon]]></html:code> (see <fr:link href="https://www.forester-notes.org/jms-011T/" title="Forester 5.0 › Simplifications to the source language › Removing transclusion overrides" uri="https://www.forester-notes.org/jms-011T/" display-uri="https://www.forester-notes.org/jms-011T/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-011T/" display-uri="https://www.forester-notes.org/jms-011T/" /></fr:link>).</html:li>
  <html:li>Move all <html:code><![CDATA[\import]]></html:code> declarations to the top-level of any <html:code>.tree</html:code> files, as these can no longer occur in subtrees (see <fr:link href="https://www.forester-notes.org/OYOU/" title="Forester 5.0 › Simplifications to the source language › Removal of imports within subtrees" uri="https://www.forester-notes.org/OYOU/" display-uri="https://www.forester-notes.org/OYOU/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/OYOU/" display-uri="https://www.forester-notes.org/OYOU/" /></fr:link>).</html:li>
  <html:li>In your <html:code>forest.toml</html:code> file, replace the <html:code>root = "foo"</html:code> line a new section after the <html:code>[forest]</html:code> block as follows:
  <html:pre><![CDATA[[renderer]
home = "foo"]]></html:pre>
  See <fr:link href="https://www.forester-notes.org/jms-0125/" title="Forester 5.0 › Configuration: the [renderer] section" uri="https://www.forester-notes.org/jms-0125/" display-uri="https://www.forester-notes.org/jms-0125/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-0125/" display-uri="https://www.forester-notes.org/jms-0125/" /></fr:link> for more details.</html:li>
  <html:li>Any <html:code><![CDATA[\author]]></html:code> or <html:code><![CDATA[\contributor]]></html:code> attributions must take a tree address as their argument; when you wish to attribute a resource to a person who is not represented by a tree, you can use <html:code><![CDATA[\author/literal{Somebody’s Name}]]></html:code> or <html:code><![CDATA[\contributor/literal{Somebody’s Name}]]></html:code> (see <fr:link href="https://www.forester-notes.org/jms-012N/" title="Forester 5.0 › Changes to attribution links" uri="https://www.forester-notes.org/jms-012N/" display-uri="https://www.forester-notes.org/jms-012N/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-012N/" display-uri="https://www.forester-notes.org/jms-012N/" /></fr:link>).</html:li>
  <html:li>Take into account the renaming of several built-in relations (see <fr:link href="https://www.forester-notes.org/jms-013C/" title="Forester 5.0 › New datalog-based query engine › Renamed built-in relations" uri="https://www.forester-notes.org/jms-013C/" display-uri="https://www.forester-notes.org/jms-013C/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-013C/" display-uri="https://www.forester-notes.org/jms-013C/" /></fr:link>).</html:li>
  <html:li>Rewrite any queries to use the new datalog engine (see <fr:link href="https://www.forester-notes.org/jms-013A/" title="Forester 5.0 › New datalog-based query engine" uri="https://www.forester-notes.org/jms-013A/" display-uri="https://www.forester-notes.org/jms-013A/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-013A/" display-uri="https://www.forester-notes.org/jms-013A/" /></fr:link>), as the legacy query engine has been removed.</html:li>
  <html:li>View your forest locally using an HTTP server rather than directly through the file system (see <fr:link href="https://www.forester-notes.org/VNQ8/" title="Forester 5.0 › Changes to how forests are viewed locally and deployed" uri="https://www.forester-notes.org/VNQ8/" display-uri="https://www.forester-notes.org/VNQ8/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/VNQ8/" display-uri="https://www.forester-notes.org/VNQ8/" /></fr:link>).</html:li>
  <html:li>Begin dialing back your use of custom XML stylesheets (see <fr:link href="https://www.forester-notes.org/jms-0127/" title="Forester 5.0 › The future of Forester’s XML format" uri="https://www.forester-notes.org/jms-0127/" display-uri="https://www.forester-notes.org/jms-0127/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/jms-0127/" display-uri="https://www.forester-notes.org/jms-0127/" /></fr:link>). It is possible that support for customisation at this level will be removed in a future release; if you have innovative customisations that are very important for your use of Forester, consider discussing them on the <fr:link href="mailto:~jonsterling/forester-discuss@lists.sr.ht" type="external">mailing list</fr:link> so that maintainers can better understand the problems you are solving.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-011Q/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-011Q/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-011Q/</fr:route>
                <fr:title text="Canonical URLs for tree addresses">Canonical URLs for tree addresses</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Up until this release, Forester’s trees were addressed by short strings — which, by convention, might be of the form <html:code>xxx-NNNN</html:code> or some arbitrary string like <html:code>sterling-2021-thesis</html:code>. In order to prepare for the future in which multiple forests can be glued together, we replace Forester’s short names with fully qualified URLs that point to the location on the World Wide Web where a given tree would be published (if you choose to publish it). In your <html:code>forest.toml</html:code> configuration, first set a base URL for your forest like the following:</html:p>
                <html:pre><![CDATA[[forest]
url = "https://www.forester-notes.com/"]]></html:pre>
                <html:p>Within this forest, a tree named <html:code>foo</html:code> is then associated to the canonical URL <html:code>https://www.forester-notes.com/foo/</html:code>. Forester’s renderer will produce the correct directory structure so that if you were to upload the contents of the <html:code>output</html:code> directory to <html:code>https://www.forester-notes.com/</html:code>, a link to <html:code>https://www.forester-notes.com/foo/</html:code> would bring you to the <html:code>foo</html:code> tree.</html:p>
                <html:p>Hyperlinks in Forester source code to trees within your own forest will automatically expand the short name <html:code>foo</html:code> to the canonical URL <html:code>https://www.forester-notes.com/foo/</html:code>. Canonical URLs are used as vertices in the <fr:link href="https://www.forester-notes.org/jms-013A/" title="Forester 5.0 › New datalog-based query engine" uri="https://www.forester-notes.org/jms-013A/" display-uri="https://www.forester-notes.org/jms-013A/" type="local">graph</fr:link>.</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-011R/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-011R/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-011R/</fr:route>
                    <fr:title text="What do we mean by “URL”?">What do we mean by “URL”?</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Today, “URLs” are a mostly implementation-defined concept that can only be understood by looking at the source code of major web browsers; in the future, this may congeal into an actual standard but today is not that day (nor is tomorrow, if the state of the <fr:link href="https://url.spec.whatwg.org/" type="external"><html:code>whatwg/url</html:code> “living” [non-]standard</fr:link> is any indication). It is best to think of Forester’s approach to URLs as provisional and subject to evolution as the Web continues to mature.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/OYOT/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/OYOT/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/OYOT/</fr:route>
                <fr:title text="Simplifications to the source language">Simplifications to the source language</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/OYOU/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/OYOU/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/OYOU/</fr:route>
                    <fr:title text="Removal of imports within subtrees">Removal of imports within subtrees</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>It is no longer permitted to have an <html:code><![CDATA[\import]]></html:code> declaration within a subtree: these can occur only at the top level of a file and therefore have file-level scope.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-011T/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-011T/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-011T/</fr:route>
                    <fr:title text="Removing transclusion overrides">Removing transclusion overrides</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>In prior versions of Forester, it was possible to override the title and the taxon of a transcluded tree using the fluid bindings <html:code><![CDATA[\transclude/title]]></html:code> and <html:code><![CDATA[\transclude/taxon]]></html:code> respectively. This feature is no longer supported in <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link>, and existing users are encouraged to purge their use of it prior to upgrading to <fr:link href="https://www.forester-notes.org/jms-011P/" title="Forester 5.0" uri="https://www.forester-notes.org/jms-011P/" display-uri="https://www.forester-notes.org/jms-011P/" type="local">Forester 5.0</fr:link>.</html:p>
                    <html:p>In short, supporting this feature was greatly complicating the planned transition to a genuine hypermedia format; it could also be argued that it might have led to scenarios where an original author’s intentions are violated at the transclusion site.</html:p>
                    <html:p>Please note that transclusion options, such as <html:code><![CDATA[\transclude/expanded]]></html:code>, etc., are still supported.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/OYOV/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/OYOV/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/OYOV/</fr:route>
                    <fr:title text="Removal of autocapitalisation">Removal of autocapitalisation</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Titles and taxa will no longer be autocapitalised: this feature biases Forester toward specific languages and is annoyingly complex to maintain. Therefore, you must rename all your titles and taxa to be capitalised by hand.  This can be done in VS Code using the following regexp: replace <html:code><![CDATA[\\taxon\{([a-z])]]></html:code> with <html:code><![CDATA[\\taxon{\U$1]]></html:code>, etc.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-0125/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-0125/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-0125/</fr:route>
                <fr:title text="Configuration: the [renderer] section">Configuration: the <html:code>[renderer]</html:code> section</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The TOML configuration file now has a new section called <html:code>[renderer]</html:code>, which groups settings that pertain not to the evaluation of the forest but rather to the rendered output. A sample configuration might look like the following:</html:p>
                <html:pre><![CDATA[[renderer]
home = "index"]]></html:pre>
                <html:p>In the <html:code>[forest]</html:code> section, the <html:code>root</html:code> key was previously used to designate a particular tree as the home page which will be routed to <html:code>index.xml</html:code>. Calling this the “root” didn’t make sense, because it is not actually the root of the forest in most cases. This configuration key has been renamed to <html:code>home</html:code> and placed in the <html:code>[renderer]</html:code> section.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-012N/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-012N/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-012N/</fr:route>
                <fr:title text="Changes to attribution links">Changes to attribution links</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>In prior versions, the <html:code><![CDATA[\author]]></html:code> and <html:code><![CDATA[\contributor]]></html:code> command would detect whether its contents were the address of a tree; if so, it would create a wikilink to the tree and otherwise, the included text would appear directly. This feature was convenient for smoothly handling the case that an author of a given resource is not represented in the forest by a biographical tree; the downside is that it makes the assumption that at compiletime we shall know the entire contents of the forest (and, thus, whether a given address shall be bound to a tree).</html:p>
                <html:p>To simplify the handling of author links and make it compatible with the open-world future of Forester, the behaviour is changed as follows:</html:p>
                <html:ol><html:li>The argument to <html:code><![CDATA[\author]]></html:code> and <html:code><![CDATA[\author]]></html:code> <html:em>must</html:em> be a (possibly relative) <fr:link href="https://www.forester-notes.org/jms-011Q/" title="Forester 5.0 › Canonical URLs for tree addresses" uri="https://www.forester-notes.org/jms-011Q/" display-uri="https://www.forester-notes.org/jms-011Q/" type="local">Forester URL</fr:link>. Thus, on my own forest, it would be OK to have either <html:code><![CDATA[\author{jeanbénabou}]]></html:code> or <html:code><![CDATA[\author{forest://jonmsterling/jeanbénabou}]]></html:code> but it would not be OK to have <html:code><![CDATA[\author{Jean Bénabou}]]></html:code>.</html:li>
  <html:li>To make an unlinked attribution containing, use <html:code><![CDATA[\author/literal{Jean Bénabou}]]></html:code>.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-013A/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-013A/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-013A/</fr:route>
                <fr:title text="New datalog-based query engine">New datalog-based query engine</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>As the query engine has evolved, it has become a bit unwieldy and misshapen. In order to prevent further churn and facilitate the long-term development and use of Forester, we are replacing the query engine and graph analysis with a more general tool: <html:em>datalog</html:em>. With this change comes the ability to introduce arbitrary relations of any arity; this is a powerful and dangerous tool, so use it wisely.</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-013B/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-013B/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-013B/</fr:route>
                    <fr:title text="On performance trade-offs">On performance trade-offs</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Switching to datalog makes forests that make heavy use of queries a bit slower to render. We considered this trade-off carefully, but believe that for the long-term health of Forester, this is acceptable. In the near future, Forester will render trees on demand rather than all at once (except when you are preparing a static archive for upload/deployment); in this mode of use, Forester will be faster than ever.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-013C/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-013C/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-013C/</fr:route>
                    <fr:title text="Renamed built-in relations">Renamed built-in relations</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Forester’s built-in binary relations have been accessible via macros like <html:code><![CDATA[\rel/authors]]></html:code>, etc. In this release, these relations are being renamed to make them more pleasant and consistent to use with datalog.</html:p>
                    <html:table>
   <html:tr>
    <html:th>Old name</html:th>
    <html:th>New name</html:th>
   </html:tr>
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/tags</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/has-tag</html:code></html:td>
   </html:tr>
  
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/taxa</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/has-taxon</html:code></html:td>
   </html:tr>
  
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/authors</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/has-author</html:code></html:td>
   </html:tr>
  
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/contributors</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/has-direct-contributor</html:code></html:td>
   </html:tr>
  
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/transclusion</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/transcludes</html:code></html:td>
   </html:tr>
  
   
   <html:tr>
    <html:td><html:code><![CDATA[\]]>rel/links</html:code></html:td>
    <html:td><html:code><![CDATA[\]]>rel/links-to</html:code></html:td>
   </html:tr>
  
  </html:table>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-013D/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-013D/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-013D/</fr:route>
                    <fr:title text="New built-in relations">New built-in relations</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>A few new built-in relations have been added.</html:p>
                    <html:ul><html:li><html:code><![CDATA[\]]>rel/is-node ?X</html:code> is a unary relation that holds for <html:em>any</html:em> tree address <html:code>?X</html:code>. This is needed when specifying reflexive binary relations: the clause <html:code>R ?X ?X -:</html:code> is not allowed by datalog, so one must use <html:code><![CDATA[R ?X ?X -: {\rel/is-node X}]]></html:code>.</html:li>
   <html:li><html:code><![CDATA[\]]>rel/transcludes/transitive-closure</html:code> is the transitive closure of <html:code><![CDATA[\]]>rel/transcludes</html:code>.</html:li>
   <html:li><html:code><![CDATA[\]]>rel/transcludes/reflexive-transitive-closure</html:code> is the <html:em>reflexive</html:em> transitive closure of <html:code><![CDATA[\]]>rel/transcludes</html:code>.</html:li>
   <html:li><html:code><![CDATA[\]]>rel/is-reference ?X</html:code> holds when <html:code>?X</html:code> is designated as a reference/bibliographical tree. Currently, the built-in rules of the database deduce <html:code><![CDATA[\]]>rel/is-reference ?X</html:code> for any tree <html:code>?X</html:code> with taxon <html:code>reference</html:code>. The purpose of abstracting from the taxon is to enable non-English users of Forester to benefit from the computation of bibliographies.</html:li>
   <html:li>Similarly, <html:code><![CDATA[\]]>rel/is-person ?X</html:code> holds when <html:code>?X</html:code> is designated as a personal/biographical tree. Currently, the built-in rules of the database deduce <html:code><![CDATA[\]]>rel/is-reference ?X</html:code> for any tree <html:code>?X</html:code> with taxon <html:code>person</html:code>.</html:li>
   <html:li><html:code><![CDATA[\]]>rel/in-bundle-closure ?X ?Y</html:code> is the reflexive transitive closure of the union of the transclusion relation with the relation of <html:code>?X</html:code> requiring the asset <html:code>?Y</html:code>. The purpose of this relation is to easily bundle up fragments of a forest (see <fr:link href="https://www.forester-notes.org/30FN/" title="Forester 5.0 › Publishing and implanting forests" uri="https://www.forester-notes.org/30FN/" display-uri="https://www.forester-notes.org/30FN/" type="local">§ <fr:contextual-number uri="https://www.forester-notes.org/30FN/" display-uri="https://www.forester-notes.org/30FN/" /></fr:link>).</html:li></html:ul>
                    <html:p>All of these built-in relations can be defined in Forester’s dialect of datalog; they are predefined for convenience, and because they are used in the computation of backmatter.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2024</fr:year>
                      <fr:month>10</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.forester-notes.org/jms-013E/</fr:uri>
                    <fr:display-uri>https://www.forester-notes.org/jms-013E/</fr:display-uri>
                    <fr:route>https://www.forester-notes.org/jms-013E/</fr:route>
                    <fr:title text="An example datalog query">An example datalog query</fr:title>
                    <fr:taxon>Example</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>In order to illustrate the use of the datalog engine, I will show how to construct a query that will find all the trees with taxon <html:code>reference</html:code> written by <html:code>jonmsterling</html:code> that are tagged either <html:code>accepted</html:code> or <html:code>refereed</html:code>. The first thing we must do is define the smallest relation containing all trees tagged <html:code>accepted</html:code> or <html:code>refereed</html:code>; this is done by adding clauses to the database as follows.</html:p>
                    <html:p>First we define the name of a relation. In the current release, relations are global strings and there is no facility to generate a “fresh” one; that may change in the future.</html:p>
                    <html:pre><![CDATA[\let\rel/accepted-or-refereed{jonmsterling.query.bibliography.accepted-or-refereed}]]></html:pre>
                    <html:p>Next, we add two defining clauses for our relation. In what follows, <html:code><![CDATA[\datalog]]></html:code> simply delimits content that should be parsed as a datalog expression, and <html:code><![CDATA[\execute]]></html:code> instructs Forester to execute the datalog expression.</html:p>
                    <html:pre><![CDATA[\execute\datalog{
 \rel/accepted-or-refereed ?X -: {\rel/has-tag ?X '{refereed}}
}

\execute\datalog{
 \rel/accepted-or-refereed ?X -: {\rel/has-tag ?X '{accepted}}
}]]></html:pre>
                    <html:p>The left-hand side of the reversed turnstile <html:code>-:</html:code> is a proposition representing the <html:em>goal</html:em>; the right hand side is given by propositions representing the premises, each surrounded in braces and separated by whitespace. Metavariables are written with a question mark sigil. Literal content is embedded into a datalog proposition by surrounding it in <html:code>'{...}</html:code>; we will see that literal content is one kind of vertex in the graph database.</html:p>
                    <html:p>Now that we have actually defined the relation that we will use, we can run a query:</html:p>
                    <html:pre><![CDATA[\query\datalog{
 ?X -:
   {\rel/has-author ?X @{jonmsterling}}
   {\rel/is-reference ?X}
   {\rel/accepted-or-refereed ?X}
 }]]></html:pre>
                    <html:p>The structure of a query identifies the metavariable being solved behind the turnstile, and then lists the clauses that must hold. Whereas a content vertex is addressed via <html:code>'{...}</html:code>, a <fr:link href="https://www.forester-notes.org/jms-011Q/" title="Forester 5.0 › Canonical URLs for tree addresses" uri="https://www.forester-notes.org/jms-011Q/" display-uri="https://www.forester-notes.org/jms-011Q/" type="local">URL vertex</fr:link> is addressed using <html:code>@{...}</html:code>.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/30FN/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/30FN/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/30FN/</fr:route>
                <fr:title text="Publishing and implanting forests">Publishing and implanting forests</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Forester now includes an experimental feature to “publish” a portion of your forest to a JSON blob that can be read by Forester and implanted into another forest. For example, if you include the following code in a tree within your forest, then a file will be emitted at <html:code>publications/my-forest.json</html:code> containing the compiled content of your entire forest, together with all the assets:</html:p>
                <html:pre><![CDATA[\publish-query{my-forest}{
 \datalog{
  ?X -: {\rel/is-node ?X}
 }
}]]></html:pre>
                <html:p>Of course, more sophisticated queries can be used. For example, you can emit all the items tagged <html:code>public</html:code> together with anything they (transitively) transclude and any assets they require as follows:</html:p>
                <html:pre><![CDATA[\publish-query{my-public-forest}{
 \datalog{
   ?X -: {\rel/has-tag ?Z '{public}} {\rel/in-bundle-closure ?Z ?X}
 }
}]]></html:pre>
                <html:p>To implant the resulting JSON file into another forest, simply copy over the file and add the following line to your configuration file:</html:p>
                <html:pre><![CDATA[foreign = ["my-public-forest.json"]]]></html:pre>
                <html:p><html:mark>This feature is highly experimental and has many limitations; it <html:em>will</html:em> change in breaking ways in the future.</html:mark> Although we are very interested to learn about the limitations of this feature, we will be taking a hands-off approach to support until the feature has taken a more stable form.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/VNQ8/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/VNQ8/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/VNQ8/</fr:route>
                <fr:title text="Changes to how forests are viewed locally and deployed">Changes to how forests are viewed locally and deployed</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>In the past, Forester’s XML output used relative URLs for all links. This was tractable because the output had no directory structure, but this is increasingly becoming problematic—for example, <fr:link href="https://www.forester-notes.org/30FN/" title="Forester 5.0 › Publishing and implanting forests" uri="https://www.forester-notes.org/30FN/" display-uri="https://www.forester-notes.org/30FN/" type="local">foreign trees</fr:link> are going to be rendered to a subdirectory, but this breaks all the relative URLs. I have come to the conclusion that the only way forward is to use absolute URLs for everything, but this assumes that the output is being served from the root directory of some host. As a result, users <html:em>must</html:em> fire up an HTTP server in order to view their forest locally. With this release we will (TODO) include a built-in HTTP server, but early adopters can simply run <html:code>python3 -m http.server 8000</html:code> from the <html:code>output</html:code> directory and open <html:code>localhost:8000/index.xml</html:code> in their browser.</html:p>
                <html:p>Some users may wish to deploy their forest somewhere other than the root directory of a given (sub)domain. To achieve this and have all your links work correctly, enter the following configuration:</html:p>
                <html:pre><![CDATA[[renderer]
base_url = "my-subfolder/"]]></html:pre>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="https://www.forester-notes.org/jonmsterling/" title="Jon Sterling" uri="https://www.forester-notes.org/jonmsterling/" display-uri="https://www.forester-notes.org/jonmsterling/" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2024</fr:year>
                  <fr:month>10</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.forester-notes.org/jms-0127/</fr:uri>
                <fr:display-uri>https://www.forester-notes.org/jms-0127/</fr:display-uri>
                <fr:route>https://www.forester-notes.org/jms-0127/</fr:route>
                <fr:title text="The future of Forester’s XML format">The future of Forester’s XML format</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Forester currently emits archival-quality output in a custom XML format that is then interpreted using an XSLT stylesheet (as part of the <fr:link href="https://git.sr.ht/~jonsterling/forester-base-theme" type="external">“theme”</fr:link>). This format has served us well, enabling users to customise the presentation of their forests to a great degree. An added benefit of the XML format is to be able to easily convert a tree to LaTeX using another stylesheet.</html:p>
                <html:p>However, the constantly changing XML format has been an equally frustrating source of churn for users of Forester, and I have for some time now been warning users who customise their theme that these customisations are technically possible but <html:em>not</html:em> supported (i.e. we make no promise not to break them).</html:p>
                <html:p>The time is coming when Forester’s interaction model and output format will be changed <html:em>drastically</html:em>; rest assured that the core principles behind Forester (including the ability to generate static archival output that can be hosted anywhere) will be retained. We aim to become a better citizen of the World Wide Web by moving toward a more standard hypermedia format.</html:p>
                <html:p>One possiblity is to extend HTML with just the hypermedia controls and embedded microformats needed for Forester’s operation. This re-coupling of presentation and data would, paradoxically, facilitate Forester to evolve more rapidly over time while simultaneously increasing the longevity of forests that have been compiled using older versions of the tool.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/jms-00XB/</fr:uri>
            <fr:display-uri>jms-00XB</fr:display-uri>
            <fr:route>/jms-00XB/</fr:route>
            <fr:title text="Advanced Research + Invention Agency">Advanced Research + Invention Agency</fr:title>
            <fr:taxon>Institution</fr:taxon>
            <fr:meta name="external">https://www.aria.org.uk/programme-safeguarded-ai/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/kentookura/</fr:uri>
            <fr:display-uri>kentookura</fr:display-uri>
            <fr:route>/kentookura/</fr:route>
            <fr:title text="Kento Okura">Kento Okura</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="external">https://github.com/kentookura</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
