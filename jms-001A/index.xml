<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>1</fr:month>
      <fr:day>19</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-001A/</fr:uri>
    <fr:display-uri>jms-001A</fr:display-uri>
    <fr:route>/jms-001A/</fr:route>
    <fr:title text="§ 8.1: two phase distinctions for program modules">§ 8.1: two phase distinctions for program modules</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>A brief overview is given of the applications of synthetic Tait computability to program modules, material that is published in the <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Journal of the ACM</fr:link>.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>12</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-harper-2021/</fr:uri>
            <fr:display-uri>sterling-harper-2021</fr:display-uri>
            <fr:route>/sterling-harper-2021/</fr:route>
            <fr:title text="Logical relations as types: proof-relevant parametricity for program modules">Logical relations as types: proof-relevant parametricity for program modules</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue"><fr:link href="/jacm/" title="Journal of the ACM" uri="https://www.jonmsterling.com/jacm/" display-uri="jacm" type="local">Journal of the ACM</fr:link>, Volume 68, Issue 6</fr:meta>
            <fr:meta name="doi">10.1145/3474834</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The theory of program modules is of interest to language designers not only for its practical importance to programming, but also because it lies at the nexus of three fundamental concerns in language design: the <html:em>phase distinction</html:em>, <html:em>computational effects</html:em>, and <html:em>type abstraction</html:em>. We contribute a fresh “synthetic” take on program modules that treats modules as the fundamental constructs, in which the usual suspects of prior module calculi (kinds, constructors, dynamic programs) are rendered as derived notions in terms of a modal type-theoretic account of the phase distinction. We simplify the account of type abstraction (embodied in the generativity of module functors) through a <html:em>lax modality</html:em> that encapsulates computational effects, placing <html:em>projectibility</html:em> of module expressions on a type-theoretic basis.</html:p>
            <html:p>Our main result is a (significant) proof-relevant and phase-sensitive generalization of the Reynolds abstraction theorem for a calculus of program modules, based on a new kind of logical relation called a <html:em>parametricity structure</html:em>. Parametricity structures generalize the proof-irrelevant relations of classical parametricity to proof-<html:em>relevant</html:em> families, where there may be non-trivial evidence witnessing the relatedness of two programs—simplifying the metatheory of strong sums over the collection of types, for although there can be no “relation classifying relations,” one easily accommodates a “family classifying small families.”</html:p>
            <html:p>Using the insight that logical relations/parametricity is itself a form of phase distinction between the syntactic and the semantic, we contribute a new synthetic approach to phase separated parametricity based on the slogan <html:em>logical relations as types</html:em>, by iterating our modal account of the phase distinction. We axiomatize a dependent type theory of parametricity structures using two pairs of complementary modalities (syntactic, semantic) and (static, dynamic), substantiated using the topos theoretic <html:em>Artin gluing</html:em> construction. Then, to construct a simulation between two implementations of an abstract type, one simply programs a third implementation whose type component carries the representation invariant.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2021</fr:year>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0060/</fr:uri>
                <fr:display-uri>jms-0060</fr:display-uri>
                <fr:route>/jms-0060/</fr:route>
                <fr:title text="Minor mistakes in logical relations as types">Minor mistakes in <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">logical relations as types</fr:link></fr:title>
                <fr:taxon>Erratum</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>After going to press, we have fixed the following mistakes:</html:p>
                <html:ol><html:li>In the definition of a logos, we mistakenly said that "colimits commute with finite limits" but we meant to say that they are preserved by pullback. We thank <fr:link href="/sarahzrf/" title="Sarah Z. Rovner-Frydman" uri="https://www.jonmsterling.com/sarahzrf/" display-uri="sarahzrf" type="local">Sarah Z. Rovner-Frydman</fr:link> for noticing this mistake.</html:li>
  <html:li>In Remark 5.15, we used the notation for the closed immersion prior to introducing it.</html:li>
  <html:li>We have fixed a few broken links in the bibliography.</html:li></html:ol>
                <html:p>The local copy hosted here has the corrections implemented</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0019/</fr:uri>
            <fr:display-uri>jms-0019</fr:display-uri>
            <fr:route>/jms-0019/</fr:route>
            <fr:title text="Chapter 8: a plan for PL">Chapter 8: a plan for PL</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This dissertation has focused almost solely on the development and applications of synthetic Tait computability in the context of pure type theory, but the author originally invented synthetic Tait computability to solve problems in core programming languages, as part of <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Sterling and Harper</fr:link>’s re-analysis of the <html:em>phase distinction</html:em> in <fr:link href="/harper-mitchell-moggi-1990/" title="Higher-order modules and the phase distinction" uri="https://www.jonmsterling.com/harper-mitchell-moggi-1990/" display-uri="harper-mitchell-moggi-1990" type="local">ML-style</fr:link> <fr:link href="/moggi-1989/" title="A category-theoretic account of program modules" uri="https://www.jonmsterling.com/moggi-1989/" display-uri="moggi-1989" type="local">module systems</fr:link> between static (compiletime) and dynamic (runtime) code. The purpose of this chapter is to identify several applications of synthetic Tait computability to core programming languages, and set an agenda for future work — some of which has been executed and published following the completion of this dissertation</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001A/</fr:uri>
                <fr:display-uri>jms-001A</fr:display-uri>
                <fr:route>/jms-001A/</fr:route>
                <fr:title text="§ 8.1: two phase distinctions for program modules">§ 8.1: two phase distinctions for program modules</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>A brief overview is given of the applications of synthetic Tait computability to program modules, material that is published in the <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Journal of the ACM</fr:link>.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001B/</fr:uri>
                <fr:display-uri>jms-001B</fr:display-uri>
                <fr:route>/jms-001B/</fr:route>
                <fr:title text="§ 8.2: type refinements and program extraction">§ 8.2: type refinements and program extraction</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The modal language of synthetic Tait computability promises a new and more abstract account of <html:em>refinement types</html:em> and <html:em>program extraction</html:em> via a phase distinction between <html:em>computation</html:em> and <html:em>specification</html:em>. Refinement types are often thought of as a kind of subtype, but there is a fundamental difference: when <fr:tex display="inline"><![CDATA[{\phi }\sqsubset {A}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{\psi }\sqsubset {B}]]></fr:tex> are refinements of types <fr:tex display="inline"><![CDATA[A]]></fr:tex> and <fr:tex display="inline"><![CDATA[B]]></fr:tex> respectively, then <fr:tex display="inline"><![CDATA[\phi \to \psi ]]></fr:tex> refines <fr:tex display="inline"><![CDATA[A\to  B]]></fr:tex>. In contrast, subtyping laws for function spaces are contravariant in the domain. The refinements available in synthetic Tait computability are moreover proof-relevant in the sense that specification-level code can contain data in addition to properties. The application to proof-relevant refinement types is employed by <fr:link href="/niu-sterling-grodin-harper-2022/" title="A cost-aware logical framework" uri="https://www.jonmsterling.com/niu-sterling-grodin-harper-2022/" display-uri="niu-sterling-grodin-harper-2022" type="local">Niu, Sterling, Grodin, and Harper</fr:link> to develop a logical framework for simultaneously verifying behavior and complexity of functional programs.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>20</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001C/</fr:uri>
                <fr:display-uri>jms-001C</fr:display-uri>
                <fr:route>/jms-001C/</fr:route>
                <fr:title text="§ 8.3: information-flow and noninterference">§ 8.3: information-flow and noninterference</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Finally, an application of synthetic Tait computability to <html:em>security</html:em> and <html:em>information flow control</html:em> is identified: a security class is a phase distinction between low and high security. The preliminary results presented in this section have been substantially improved upon by <fr:link href="/sterling-harper-2022/" title="Sheaf semantics of termination-insensitive noninterference" uri="https://www.jonmsterling.com/sterling-harper-2022/" display-uri="sterling-harper-2022" type="local">Sterling and Harper</fr:link>, adding support for general recursion and termination-insensitive noninterference by combining synthetic Tait computability with <fr:link href="/hyland-1991/" title="First steps in synthetic domain theory" uri="https://www.jonmsterling.com/hyland-1991/" display-uri="hyland-1991" type="local">synthetic domain theory</fr:link>.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
