<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>6</fr:month>
      <fr:day>27</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/sterling-2023-catmi/</fr:uri>
    <fr:display-uri>sterling-2023-catmi</fr:display-uri>
    <fr:route>/sterling-2023-catmi/</fr:route>
    <fr:title text="Naïve denotational semantics: synthetic domains in the 21st century">Naïve denotational semantics: synthetic domains in the 21st century</fr:title>
    <fr:taxon>Reference</fr:taxon>
    <fr:meta name="external">http://www.catmi.no/</fr:meta>
    <fr:meta name="slides">/bafkrmielsxg42lagb5fu2zymlfcvlvyqpvclrzc3kre6dszhwpgvdxuum4.pdf</fr:meta>
    <fr:meta name="venue">
      <fr:link href="/catmi-2023/" title="Category Theory at Work in Computational Mathematics and Theoretical Informatics" uri="https://www.jonmsterling.com/catmi-2023/" display-uri="catmi-2023" type="local">Category Theory at Work in Computational Mathematics and Theoretical Informatics</fr:link>
    </fr:meta>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>It is easy to teach a student how to give a naïve denotational semantics to a language like System T, and then use it to reason about the equational theory: a type might as well be a set, and a program might as well be a function, and equational adequacy at base type is established using a logical relation between the initial model and the category of sets. Adding any non-trivial feature to this language (e.g. general recursion, polymorphism, state, etc.) immediately increases the difficulty beyond the facility of a beginner: to add recursion, one must replace sets and functions with domains and continuous maps, and to accommodate polymorphism and state, one must pass to increasingly inaccessible variations on this basic picture.</html:p>
    <html:p>The dream of the 1990s was to find a category that behaves like <fr:tex display="inline"><![CDATA[\mathbf {Set}]]></fr:tex> in which even general recursive and effectful programming languages could be given naïve denotational semantics, where types are interpreted as “sets” and programs are interpreted as a “functions”, without needing to check any arduous technical conditions like continuity. The benefit of this <html:strong>synthetic domain theory</html:strong> is not only that it looks “easy” for beginners, as more expert-level constructions like powerdomains or even domain equations for recursively defined semantic worlds become simple and direct. Although there have been starts and stops, the dream of synthetic domain theory is alive and well in the 21st Century. Today’s synthetic domain theory is, however, both more modular and more powerful than ever before, and has yielded significant results in programming language semantics including simple denotational semantics for an state of the art programming language with higher-order polymorphism, dependent types, recursive types, general reference types, and first-class module packages that can be stored in the heap.</html:p>
    <html:p>In this talk, I will explain some important classical results in synthetic domain theory as well as more recent results that illustrate the potential impact of “naïve denotational semantics” on the life of a workaday computer scientist.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>G. Fløystad</fr:author>
              <fr:author>
                <fr:link href="/h%C3%A5kongylterud/" title="Håkon Robbestad Gylterud" uri="https://www.jonmsterling.com/håkongylterud/" display-uri="håkongylterud" type="local">Håkon Robbestad Gylterud</fr:link>
              </fr:author>
              <fr:author>H. Munthe-Kaas</fr:author>
              <fr:author>U. Wolter</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>6</fr:month>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/catmi-2023/</fr:uri>
            <fr:display-uri>catmi-2023</fr:display-uri>
            <fr:route>/catmi-2023/</fr:route>
            <fr:title text="Category Theory at Work in Computational Mathematics and Theoretical Informatics">Category Theory at Work in Computational Mathematics and Theoretical Informatics</fr:title>
            <fr:taxon>Meeting</fr:taxon>
            <fr:meta name="external">http://www.catmi.no/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The meeting is an activity organised by the <fr:link href="https://uit.no/research/lsc" type="external">Lie-Størmer Center</fr:link>, a newly founded Norwegian research center for fundamental structures in computational and pure mathematics, and aims at bringing together a mix of people from mathematics and informatics to exchange ideas on how we apply concepts and tools from category theory, type theory, and homotopy theory to structure complex problems and research in mathematics, computations and theoretical computer science.</html:p>
            <html:p>Category theory, as a mathematical theory, is less a collection of theorems than a language to organise our thinking. The last decades has seen its growing impact: Applied category theory has emerged modelling diverse areas, for instance data bases and networks. In computer science, it provides appropriate conceptual tools to structure complex problems, organise research areas and ask the right questions. In mathematics, formulating results using categorical notions, gives a better understanding of which fundamental structures are universally at work, and gives guidance on natural problem dirctions.</html:p>
            <html:p>As soon as they are more complex than mere numbers, mathematical structures are only specified up to isomorphism, corresponding to the fact that computations are only determined up to any specific implementation. Concrete implementations are necessary to get anything specific done. Theoretical informatics (computing science) is still fragmented into different disciplines and schools. It is, therefore, highly desirable to provide abstraction and unification to guide our thinking.</html:p>
            <html:p>The workshop is a forum for exchanging experiences in how we apply concepts and tools from category theory, type, and homotopy theory to structure complex problems and research in mathematics, computations and theoretical computer science.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
