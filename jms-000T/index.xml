<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors />
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>1</fr:month>
      <fr:day>19</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-000T/</fr:uri>
    <fr:display-uri>jms-000T</fr:display-uri>
    <fr:route>/jms-000T/</fr:route>
    <fr:title text="Decidability of cubical type theory">Decidability of cubical type theory</fr:title>
    <fr:taxon>Conjecture</fr:taxon>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>The assertions <fr:tex display="inline"><![CDATA[\Gamma \vdash  {A}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash {A\equiv  B}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash  M:A]]></fr:tex>, and <fr:tex display="inline"><![CDATA[\Gamma \vdash  M\equiv  N: A]]></fr:tex> are all decidable.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000R/</fr:uri>
            <fr:display-uri>jms-000R</fr:display-uri>
            <fr:route>/jms-000R/</fr:route>
            <fr:title text="Background on homotopy and cubical type theory">Background on homotopy and cubical type theory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>For more than four decades, dependent type theory has been positioned as the “common language” that can finally <fr:link href="/martin-loef-1982/" title="Constructive mathematics and computer programming" uri="https://www.jonmsterling.com/martin-loef-1982/" display-uri="martin-loef-1982" type="local">unify mathematics and computer programming</fr:link>: while it has never been controversial that a computer program is a form of mathematical construction, the running hypothesis of the type theoretic community has been the converse to this claim, namely that mathematical constructions should be viewed as programs that can in principle be executed by a physical machine — roughly, <html:strong>sets</html:strong> = <html:strong>types</html:strong> and <html:strong>elements</html:strong> = <html:strong>programs</html:strong>. Thus the struggle to realize this type theoretic hypothesis has been a two-way process, punctuated by moments at which the mathematical meaning of a programming construct is elucidated, or at which the computational content of a mathematical construct is uncovered.</html:p>
            <html:p>In the current millennium, a new identification has been taking shape in which <html:strong>types</html:strong> = <html:strong><html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-groupoids</html:span></html:strong> (homotopy types), which are an infinite-dimensional generalization of sets; the origins of this new perspective on type theory lie with <fr:link href="/hofmann-streicher-1998/" title="The groupoid interpretation of type theory" uri="https://www.jonmsterling.com/hofmann-streicher-1998/" display-uri="hofmann-streicher-1998" type="local">Hofmann and Streicher’s 1998 groupoid interpretation of type theory</fr:link>, combined with the revolutionary contributions of <fr:link href="/voevodsky-2006/" title="A very short note on the homotopy λ-calculus" uri="https://www.jonmsterling.com/voevodsky-2006/" display-uri="voevodsky-2006" type="local">Voevodsky</fr:link> and <fr:link href="/awodey-warren-2009/" title="Homotopy theoretic models of identity types" uri="https://www.jonmsterling.com/awodey-warren-2009/" display-uri="awodey-warren-2009" type="local">Awodey and Warren</fr:link> respectively. The main feature of the new language, dubbed <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local"><html:strong>homotopy type theory</html:strong></fr:link> or <html:strong>HoTT</html:strong>, is that isomorphisms between types are equipped with a new induction rule called univalence stating that all type theoretic constructs respect isomorphisms: to a first approximation, if <fr:tex display="inline"><![CDATA[A \cong  B]]></fr:tex> then <fr:tex display="inline"><![CDATA[P(A) \cong  P(B)]]></fr:tex> for any <fr:tex display="inline"><![CDATA[P]]></fr:tex>. The univalence principle is motivated by the phenomenon of homotopy invariance that pervades the large-scale structure of modern-day mathematics, from algebraic topology to algebraic geometry to mathematical physics; as a programming construct, univalence suggests <fr:link href="/acmz-2021/" title="Internalizing representation independence with univalence" uri="https://www.jonmsterling.com/acmz-2021/" display-uri="acmz-2021" type="local">new approaches</fr:link> to both generic and modular programming.</html:p>
            <html:p>Thus one of the main projects for the first decade of homotopy type theory was to substantiate the relationship between HoTT and mathematics on the one hand, and between HoTT and computer programming on the other hand. The question of whether homotopy type theoretic language can be interpreted in sheaves on arbitrary infinite-dimensional spaces (<html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-topoi</html:span>) has finally been resolved satisfactorily by <fr:link href="/shulman-2019/" title="All (∞,1)-toposes have strict univalent universes" uri="https://www.jonmsterling.com/shulman-2019/" display-uri="shulman-2019" type="local">Shulman</fr:link> in 2019. On the other hand, the computational interpretation of homotopy type theory has involved a reformulation of HoTT called <html:strong><fr:link href="/abchfl-2021/" title="Syntax and models of Cartesian cubical type theory" uri="https://www.jonmsterling.com/abchfl-2021/" display-uri="abchfl-2021" type="local">cubical</fr:link> <fr:link href="/angiuli-favonia-harper-2018/" title="Cartesian cubical computational type theory: constructive reasoning with paths and equalities" uri="https://www.jonmsterling.com/angiuli-favonia-harper-2018/" display-uri="angiuli-favonia-harper-2018" type="local">type</fr:link> <fr:link href="/cchm-2017/" title="Cubical type theory: a constructive interpretation of the univalence axiom" uri="https://www.jonmsterling.com/cchm-2017/" display-uri="cchm-2017" type="local">theory</fr:link></html:strong> that reorganizes the higher-dimensional structure discussed by considering all the points, lines, squares, cubes, hypercubes, and so-on that one can draw in a given type. The computational interpretation of the new cubical type theory can be split into two different conjectures:</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors />
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000S/</fr:uri>
                <fr:display-uri>jms-000S</fr:display-uri>
                <fr:route>/jms-000S/</fr:route>
                <fr:title text="Cubical canonicity">Cubical canonicity</fr:title>
                <fr:taxon>Conjecture</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>For any closed term <fr:tex display="inline"><![CDATA[\cdot \vdash  N:\mathsf {nat}]]></fr:tex> of cubical type theory, there exists a unique natural number <fr:tex display="inline"><![CDATA[n\in \mathbb {N}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\cdot \vdash  N\equiv  \bar {n}:\mathsf {nat}]]></fr:tex> where <fr:tex display="inline"><![CDATA[\bar {n}]]></fr:tex> is the encoding of the number <fr:tex display="inline"><![CDATA[n]]></fr:tex> as a term in the type theory.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors />
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000T/</fr:uri>
                <fr:display-uri>jms-000T</fr:display-uri>
                <fr:route>/jms-000T/</fr:route>
                <fr:title text="Decidability of cubical type theory">Decidability of cubical type theory</fr:title>
                <fr:taxon>Conjecture</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The assertions <fr:tex display="inline"><![CDATA[\Gamma \vdash  {A}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash {A\equiv  B}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash  M:A]]></fr:tex>, and <fr:tex display="inline"><![CDATA[\Gamma \vdash  M\equiv  N: A]]></fr:tex> are all decidable.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <html:p>The <fr:link href="/jms-000S/" title="Cubical canonicity" uri="https://www.jonmsterling.com/jms-000S/" display-uri="jms-000S" type="local">canonicity conjecture</fr:link> ensures that terms written in cubical type theory can be thought of as computer programs, and was verified independently by <fr:link href="/huber-2018/" title="Canonicity for cubical type theory" uri="https://www.jonmsterling.com/huber-2018/" display-uri="huber-2018" type="local">Huber</fr:link> and <fr:link href="/angiuli-2019/" title="Computational semantics of cartesian cubical type theory" uri="https://www.jonmsterling.com/angiuli-2019/" display-uri="angiuli-2019" type="local">Angiuli</fr:link> for different variants of cubical type theory. The <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability conjecture</fr:link> is no less important, as it is a necessary ingredient to implement a <html:em>typechecker</html:em> or a <html:em>compiler</html:em> for a programming language based on cubical type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0014/</fr:uri>
            <fr:display-uri>jms-0014</fr:display-uri>
            <fr:route>/jms-0014/</fr:route>
            <fr:title text="Chapter 7: normalization for cubical type theory">Chapter 7: normalization for cubical type theory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This chapter reports the main result of the dissertation, normalization for cubical type theory and its corollaries: injectivity of type constructors, and <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability of equality &amp; typing</fr:link>. These results were first obtained by <fr:link href="/sterling-angiuli-2021/" title="Normalization for cubical type theory" uri="https://www.jonmsterling.com/sterling-angiuli-2021/" display-uri="sterling-angiuli-2021" type="local">Sterling and Angiuli</fr:link> for the fragment of cubical type theory <html:em>without</html:em> universes; the present chapter extends the results of <html:em>op. cit.</html:em> to support a cumulative hierarchy of universes.</html:p>
            <html:p>The central innovation of this chapter is to generalize the notion of neutral form to accommodate the computational behavior of terms that have free variables of type <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex> discussed in our <fr:link href="/jms-0017/" title="Chapter 6: cartesian cubical type theory" uri="https://www.jonmsterling.com/jms-0017/" display-uri="jms-0017" type="local">synopsis of Chapter 6</fr:link>.  In the conventional account of neutral and normal forms, neutrals <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> are built up inductively from
<fr:tex display="inline"><![CDATA[x]]></fr:tex> for term variables <fr:tex display="inline"><![CDATA[x : A]]></fr:tex>, function applications to normal forms <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{\bullet }}}{{\color {DarkBlue}{m}}}]]></fr:tex>
and projections from neutral pairs <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}{\color {DarkRed}{.1}}]]></fr:tex>, <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}{\color {DarkRed}{.2}}]]></fr:tex>; our account of neutrals is much the same, except that each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> comes equipped with a <html:strong>“frontier
  of instability”</html:strong> <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }{{\color {DarkRed}{e}}}]]></fr:tex>, a predicate on its free <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex>-variables that indicates when it “needs to compute further”. We think of a neutral form for an <fr:tex display="inline"><![CDATA[n]]></fr:tex>-cube as being <html:em>undefined</html:em> on its frontier of instability; the process of restricting a neutral to its frontier of instability is then referred to as <html:em>destabilization</html:em>.</html:p>
            <html:p>When <fr:tex display="inline"><![CDATA[x : A]]></fr:tex> is a variable of an ordinary type, the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }\,{\mathopen {}\left ({\color {DarkRed}{\mathsf {var}}}\,{x}\right )\mathclose {}}]]></fr:tex> is empty because variables never need to compute further. Where something new happens is the path type: given a neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}} : \mathsf {ne}\,{\mathopen {}\left ({u}\mathrel {{\sim }_{A}}{v}\right )\mathclose {}}]]></fr:tex>
of path type, we have for each term <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> a neutral form <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r} : \mathsf {ne}\,A]]></fr:tex> whose frontier of instability is defined like so:</html:p>
            <fr:tex display="block"><![CDATA[  \boldsymbol {\partial }\,{\mathopen {}\left ({{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r}\right )\mathclose {}}
=
\boldsymbol {\partial }{\color {DarkRed}{e}}
\lor 
{\mathopen {}\left (r=0\right )\mathclose {}}
\lor 
{\mathopen {}\left (r=1\right )\mathclose {}}
]]></fr:tex>
            <html:p>In other words, the path neutral application <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r}]]></fr:tex> needs to compute as soon as e needs to compute, and as soon as the interval term <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> becomes equal to a constant. Prior to the introduction of the frontier of instability, the neutrals are embedded into the normals at base types unconditionally, i.e. for each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}} : \mathsf {ne}\,\mathsf {bool}]]></fr:tex>, we have a normal form <fr:tex display="inline"><![CDATA[{\color {DarkBlue}{\lfloor }}{e}{\color {DarkBlue}{\rfloor }} : \mathsf {nf}\,\mathsf {bool}]]></fr:tex>.</html:p>
            <html:p>Now that neutrals are equipped with frontiers of instability, a more refined notion of normal form is needed: when <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> is a neutral form, the corresponding normal form should contain (recursively) normal forms for <fr:tex display="inline"><![CDATA[e]]></fr:tex> that are defined under the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }\,{\color {DarkRed}{e}}]]></fr:tex>. To be more concrete,
let <fr:tex display="inline"><![CDATA[x : {\mathsf {tt}}\mathrel {{\sim }_{\mathsf {bool}}}{\mathsf {tt}}]]></fr:tex> be a variable of path type and <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> is a term; then <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r}:\mathsf {ne}\,{\mathopen {}\left ({\mathsf {tt}}\mathrel {{\sim }_{\mathsf {bool}}}{\mathsf {tt}}\right )\mathclose {}}]]></fr:tex> is a neutral form for the term <fr:tex display="inline"><![CDATA[xr]]></fr:tex> whose frontier of instability is the boundary <fr:tex display="inline"><![CDATA[(r = 0) \lor  (r = 1)]]></fr:tex>; the corresponding normal form must therefore glue onto <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r}]]></fr:tex> additional normal forms for <fr:tex display="inline"><![CDATA[x0]]></fr:tex> and
<fr:tex display="inline"><![CDATA[x1]]></fr:tex>. We refer to the process of completing a neutral with additional data defined on its frontier of instability as stabilization; the <html:em>stabilized</html:em> normal form of <fr:tex display="inline"><![CDATA[xr]]></fr:tex> is then written</html:p>
            <fr:tex display="block"><![CDATA[ {\color {DarkBlue}{\lfloor }}{{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r} \mid  r = 0 \hookrightarrow  {\color {DarkBlue}{\mathsf {tt}}}, r = 1 \hookrightarrow {\color {DarkBlue}{\mathsf {tt}}}}{\color {DarkBlue}{\rfloor }} ]]></fr:tex>
            <html:p>where <fr:tex display="inline"><![CDATA[{\color {DarkBlue}{\mathsf {tt}}}]]></fr:tex> is the normal form representing the term <fr:tex display="inline"><![CDATA[\mathsf {tt}]]></fr:tex></html:p>
            <html:p>Just as the embedding of neutrals into normals is “stabilized” by a com patible normal form defined on the neutral’s frontier of instability, so too must the Tait saturation yoga be adjusted. Conventionally one requires the computability predicate for a type <fr:tex display="inline"><![CDATA[A]]></fr:tex> to be equipped with a function that takes neutral forms <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> of terms <fr:tex display="inline"><![CDATA[e : A]]></fr:tex> to computability witnesses for the same term. In the <html:strong>stabilized Tait saturation yoga</html:strong>, we strengthen the induction hypothesis to require for each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> a function that extends a computability witness defined only on the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }{\color {DarkRed}{e}}]]></fr:tex> to a computability witnessed defined everywhere</html:p>
            <html:p>The twin innovations of <html:em>frontiers of instability</html:em> and <html:em>stabilization</html:em> then suffice to adapt the synthetic normalization argument of <fr:link href="/jms-0015/" title="Chapter 5: synthetic normalization by evaluation" uri="https://www.jonmsterling.com/jms-0015/" display-uri="jms-0015" type="local">Chapter 5</fr:link> to a proof of normalization (and thus decidability) for cubical type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000Y/</fr:uri>
            <fr:display-uri>jms-000Y</fr:display-uri>
            <fr:route>/jms-000Y/</fr:route>
            <fr:title text="Chapter 1: objective syntax of dependent types">Chapter 1: objective syntax of dependent types</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>To state and prove theorems like <fr:link href="/jms-000S/" title="Cubical canonicity" uri="https://www.jonmsterling.com/jms-000S/" display-uri="jms-000S" type="local">canonicity</fr:link> and <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability</fr:link> for a type theory, we must have a mathematical definition of the <html:em>syntax</html:em> of type theory. Conventionally, the syntax of type theory has been studied in several layers: one starts with a definition of “raw” syntax as trees labeled by the names of the generating operations, quotients these trees under permutation of bound variables, and then layers on top of this an additional inductively defined formalism expressing the well-formedness of types, well-formedness of terms, definitional equality of types, and definitional equality of terms. After this, one verifies that definitional equivalence classes of well-formed types and terms can be used as the raw materials to construct a universal model of the type theory that has a universal property: any other model of type theory can be equipped with a unique structure-preserving homomorphism from the universal model. The described universal property determines the universal model up to unique isomorphism, if such a model exists.</html:p>
            <html:p>We refer to the painstaking process described above as the subjective metatheory, building on the <fr:link href="/hegel-sol/" title="Wissenschaft der Logik" uri="https://www.jonmsterling.com/hegel-sol/" display-uri="hegel-sol" type="local">Hegel</fr:link>–<fr:link href="/lawvere-1994/" title="Tools for the advancement of objective logic: closed categories and toposes" uri="https://www.jonmsterling.com/lawvere-1994/" display-uri="lawvere-1994" type="local">Lawvere</fr:link> <fr:link href="/lawvere-schanuel-2009/" title="Conceptual mathematics: a first introduction to categories" uri="https://www.jonmsterling.com/lawvere-schanuel-2009/" display-uri="lawvere-schanuel-2009" type="local">distinction</fr:link> between objective and subjective approaches to logic. The objective metatheory, in contrast, involves stating and proving results about type theories and programming languages relying only on the universal property of the universal model and not on any specifics of its presentation; the advantage of the objective metatheory is that it is simpler, more direct, more modular, and more composable.</html:p>
            <html:p>Chapter 1 argues that the subjective metatheory in the sense described is redundant: the decidability conjecture can be stated with respect to any representative of the universal model and does not depend in any way on the raw syntax of type theory, and moreover, for all the type theories considered in this dissertation the existence of at least one representative of the universal model is guaranteed for somewhat trivial reasons that have nothing to do with the specifics of type theory. In this chapter, we develop a logical framework for specifying type theories modularly and working with their universal models in an objective fashion.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000U/</fr:uri>
            <fr:display-uri>jms-000U</fr:display-uri>
            <fr:route>/jms-000U/</fr:route>
            <fr:title text="Contributions of First Steps in Synthetic Tait Computability">Contributions of <html:em>First Steps in Synthetic Tait Computability</html:em></fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">dissertation</fr:link> positively resolves the <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability conjecture</fr:link> for cubical type theory, the last remaining open question in its syntactic metatheory. Standard techniques proved inadequate for tackling this problem, so the bulk of this dissertation focuses on developing a new mathematical technique called <html:strong>synthetic Tait computability</html:strong> that generalizes and abstracts the method of <html:em>Tait computability</html:em> or <html:em>logical predicates</html:em>; in the past two years, synthetic Tait computability has played a central role in solving several problems in both type theory and core programming languages, suggesting that this dissertation presents a lasting and transformative contribution to the state of the art.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000R/</fr:uri>
            <fr:display-uri>jms-000R</fr:display-uri>
            <fr:route>/jms-000R/</fr:route>
            <fr:title text="Background on homotopy and cubical type theory">Background on homotopy and cubical type theory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>For more than four decades, dependent type theory has been positioned as the “common language” that can finally <fr:link href="/martin-loef-1982/" title="Constructive mathematics and computer programming" uri="https://www.jonmsterling.com/martin-loef-1982/" display-uri="martin-loef-1982" type="local">unify mathematics and computer programming</fr:link>: while it has never been controversial that a computer program is a form of mathematical construction, the running hypothesis of the type theoretic community has been the converse to this claim, namely that mathematical constructions should be viewed as programs that can in principle be executed by a physical machine — roughly, <html:strong>sets</html:strong> = <html:strong>types</html:strong> and <html:strong>elements</html:strong> = <html:strong>programs</html:strong>. Thus the struggle to realize this type theoretic hypothesis has been a two-way process, punctuated by moments at which the mathematical meaning of a programming construct is elucidated, or at which the computational content of a mathematical construct is uncovered.</html:p>
            <html:p>In the current millennium, a new identification has been taking shape in which <html:strong>types</html:strong> = <html:strong><html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-groupoids</html:span></html:strong> (homotopy types), which are an infinite-dimensional generalization of sets; the origins of this new perspective on type theory lie with <fr:link href="/hofmann-streicher-1998/" title="The groupoid interpretation of type theory" uri="https://www.jonmsterling.com/hofmann-streicher-1998/" display-uri="hofmann-streicher-1998" type="local">Hofmann and Streicher’s 1998 groupoid interpretation of type theory</fr:link>, combined with the revolutionary contributions of <fr:link href="/voevodsky-2006/" title="A very short note on the homotopy λ-calculus" uri="https://www.jonmsterling.com/voevodsky-2006/" display-uri="voevodsky-2006" type="local">Voevodsky</fr:link> and <fr:link href="/awodey-warren-2009/" title="Homotopy theoretic models of identity types" uri="https://www.jonmsterling.com/awodey-warren-2009/" display-uri="awodey-warren-2009" type="local">Awodey and Warren</fr:link> respectively. The main feature of the new language, dubbed <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local"><html:strong>homotopy type theory</html:strong></fr:link> or <html:strong>HoTT</html:strong>, is that isomorphisms between types are equipped with a new induction rule called univalence stating that all type theoretic constructs respect isomorphisms: to a first approximation, if <fr:tex display="inline"><![CDATA[A \cong  B]]></fr:tex> then <fr:tex display="inline"><![CDATA[P(A) \cong  P(B)]]></fr:tex> for any <fr:tex display="inline"><![CDATA[P]]></fr:tex>. The univalence principle is motivated by the phenomenon of homotopy invariance that pervades the large-scale structure of modern-day mathematics, from algebraic topology to algebraic geometry to mathematical physics; as a programming construct, univalence suggests <fr:link href="/acmz-2021/" title="Internalizing representation independence with univalence" uri="https://www.jonmsterling.com/acmz-2021/" display-uri="acmz-2021" type="local">new approaches</fr:link> to both generic and modular programming.</html:p>
            <html:p>Thus one of the main projects for the first decade of homotopy type theory was to substantiate the relationship between HoTT and mathematics on the one hand, and between HoTT and computer programming on the other hand. The question of whether homotopy type theoretic language can be interpreted in sheaves on arbitrary infinite-dimensional spaces (<html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-topoi</html:span>) has finally been resolved satisfactorily by <fr:link href="/shulman-2019/" title="All (∞,1)-toposes have strict univalent universes" uri="https://www.jonmsterling.com/shulman-2019/" display-uri="shulman-2019" type="local">Shulman</fr:link> in 2019. On the other hand, the computational interpretation of homotopy type theory has involved a reformulation of HoTT called <html:strong><fr:link href="/abchfl-2021/" title="Syntax and models of Cartesian cubical type theory" uri="https://www.jonmsterling.com/abchfl-2021/" display-uri="abchfl-2021" type="local">cubical</fr:link> <fr:link href="/angiuli-favonia-harper-2018/" title="Cartesian cubical computational type theory: constructive reasoning with paths and equalities" uri="https://www.jonmsterling.com/angiuli-favonia-harper-2018/" display-uri="angiuli-favonia-harper-2018" type="local">type</fr:link> <fr:link href="/cchm-2017/" title="Cubical type theory: a constructive interpretation of the univalence axiom" uri="https://www.jonmsterling.com/cchm-2017/" display-uri="cchm-2017" type="local">theory</fr:link></html:strong> that reorganizes the higher-dimensional structure discussed by considering all the points, lines, squares, cubes, hypercubes, and so-on that one can draw in a given type. The computational interpretation of the new cubical type theory can be split into two different conjectures:</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors />
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000S/</fr:uri>
                <fr:display-uri>jms-000S</fr:display-uri>
                <fr:route>/jms-000S/</fr:route>
                <fr:title text="Cubical canonicity">Cubical canonicity</fr:title>
                <fr:taxon>Conjecture</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>For any closed term <fr:tex display="inline"><![CDATA[\cdot \vdash  N:\mathsf {nat}]]></fr:tex> of cubical type theory, there exists a unique natural number <fr:tex display="inline"><![CDATA[n\in \mathbb {N}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\cdot \vdash  N\equiv  \bar {n}:\mathsf {nat}]]></fr:tex> where <fr:tex display="inline"><![CDATA[\bar {n}]]></fr:tex> is the encoding of the number <fr:tex display="inline"><![CDATA[n]]></fr:tex> as a term in the type theory.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors />
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000T/</fr:uri>
                <fr:display-uri>jms-000T</fr:display-uri>
                <fr:route>/jms-000T/</fr:route>
                <fr:title text="Decidability of cubical type theory">Decidability of cubical type theory</fr:title>
                <fr:taxon>Conjecture</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The assertions <fr:tex display="inline"><![CDATA[\Gamma \vdash  {A}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash {A\equiv  B}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash  M:A]]></fr:tex>, and <fr:tex display="inline"><![CDATA[\Gamma \vdash  M\equiv  N: A]]></fr:tex> are all decidable.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <html:p>The <fr:link href="/jms-000S/" title="Cubical canonicity" uri="https://www.jonmsterling.com/jms-000S/" display-uri="jms-000S" type="local">canonicity conjecture</fr:link> ensures that terms written in cubical type theory can be thought of as computer programs, and was verified independently by <fr:link href="/huber-2018/" title="Canonicity for cubical type theory" uri="https://www.jonmsterling.com/huber-2018/" display-uri="huber-2018" type="local">Huber</fr:link> and <fr:link href="/angiuli-2019/" title="Computational semantics of cartesian cubical type theory" uri="https://www.jonmsterling.com/angiuli-2019/" display-uri="angiuli-2019" type="local">Angiuli</fr:link> for different variants of cubical type theory. The <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability conjecture</fr:link> is no less important, as it is a necessary ingredient to implement a <html:em>typechecker</html:em> or a <html:em>compiler</html:em> for a programming language based on cubical type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
