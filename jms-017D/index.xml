<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>2</fr:month>
      <fr:day>11</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-017D/</fr:uri>
    <fr:display-uri>jms-017D</fr:display-uri>
    <fr:route>/jms-017D/</fr:route>
    <fr:title text="The matching relation for regular expressions">The matching relation for regular expressions</fr:title>
    <fr:taxon>Definition</fr:taxon>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>The matching relation <fr:tex display="inline"><![CDATA[u\mathrel {\textsf {matches}}R]]></fr:tex> is given by an <html:em>inductive</html:em> definition over <fr:tex display="inline"><![CDATA[\Sigma ^\star \times \mathsf {Regexp}_{\Sigma }]]></fr:tex>.</html:p>
    <fr:tex display="block"><![CDATA[
 \begin {gathered}
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({a},{\texttt {Sym}_{a}}\right )\mathclose {}}
  \quad }


  \quad 
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Null}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({v},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({w},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({vw},{\texttt {Concat}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({v},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({uv},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


 \end {gathered}
]]></fr:tex>
    <html:p>We will write <fr:tex display="inline"><![CDATA[\mathcal {L}{\mathopen {}\left (R\right )\mathclose {}}]]></fr:tex> for the <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> matching or “recognised” by the regular expression <fr:tex display="inline"><![CDATA[R]]></fr:tex>:</html:p>
    <fr:tex display="block"><![CDATA[
 \mathcal {L}{\mathopen {}\left (R\right )\mathclose {}} =
 {\mathopen {}\left \{
  u\in \Sigma ^\star 
  \mid 
  u\mathrel {\textsf {matches}}R
 \right \}\mathclose {}}
]]></fr:tex>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>11</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-017C/</fr:uri>
            <fr:display-uri>jms-017C</fr:display-uri>
            <fr:route>/jms-017C/</fr:route>
            <fr:title text="Regular expression matching">Regular expression matching</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We have seen the <fr:link href="/jms-0178/" title="Regular expressions" uri="https://www.jonmsterling.com/jms-0178/" display-uri="jms-0178" type="local"><html:em>syntax</html:em> of regular expressions</fr:link> in both concrete and abstract form. What about <html:em>semantics</html:em>, i.e. what do regular expressions actually do? The meaning of a given regular expression over an <fr:link href="/jms-016H/" title="Alphabet" uri="https://www.jonmsterling.com/jms-016H/" display-uri="jms-016H" type="local">alphabet</fr:link> <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> is a <html:em><html:strong>matching predicate</html:strong></html:em> on <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> that says when a given string is matched by the regular expression. In this course, we are particularly interested in the class of <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal languages</fr:link> that can be recognised by regular expressions, and later on we will develop tools that allow us to show that some <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal languages</fr:link> are too complex to be recognised by regular expressions. In the meanwhile, we will first explain how matching works.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017D/</fr:uri>
                <fr:display-uri>jms-017D</fr:display-uri>
                <fr:route>/jms-017D/</fr:route>
                <fr:title text="The matching relation for regular expressions">The matching relation for regular expressions</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The matching relation <fr:tex display="inline"><![CDATA[u\mathrel {\textsf {matches}}R]]></fr:tex> is given by an <html:em>inductive</html:em> definition over <fr:tex display="inline"><![CDATA[\Sigma ^\star \times \mathsf {Regexp}_{\Sigma }]]></fr:tex>.</html:p>
                <fr:tex display="block"><![CDATA[
 \begin {gathered}
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({a},{\texttt {Sym}_{a}}\right )\mathclose {}}
  \quad }


  \quad 
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Null}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({v},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({w},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({vw},{\texttt {Concat}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({v},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({uv},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


 \end {gathered}
]]></fr:tex>
                <html:p>We will write <fr:tex display="inline"><![CDATA[\mathcal {L}{\mathopen {}\left (R\right )\mathclose {}}]]></fr:tex> for the <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> matching or “recognised” by the regular expression <fr:tex display="inline"><![CDATA[R]]></fr:tex>:</html:p>
                <fr:tex display="block"><![CDATA[
 \mathcal {L}{\mathopen {}\left (R\right )\mathclose {}} =
 {\mathopen {}\left \{
  u\in \Sigma ^\star 
  \mid 
  u\mathrel {\textsf {matches}}R
 \right \}\mathclose {}}
]]></fr:tex>
              </fr:mainmatter>
            </fr:tree>
            <html:p>We can also obtain a version of the <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">matching relation</fr:link> between <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> and <fr:link href="/jms-0176/" title="Regular expressions (concrete syntax)" uri="https://www.jonmsterling.com/jms-0176/" display-uri="jms-0176" type="local"><html:em>concrete</html:em> regular expressions</fr:link> by <fr:link href="/jms-00IN/" title="Relational composite" uri="https://www.jonmsterling.com/jms-00IN/" display-uri="jms-00IN" type="local">relational composition</fr:link> with the (transpose of) the <fr:link href="/jms-017B/" title="Precedence parsing for regular expressions" uri="https://www.jonmsterling.com/jms-017B/" display-uri="jms-017B" type="local">parsing relation</fr:link>. Alternatively, we can simply <html:em>write</html:em> the concrete syntax as a mere notation (to be eliminated by the reader immediately) for the abstract syntax. In fact, that is what we will do in the future.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017E/</fr:uri>
                <fr:display-uri>jms-017E</fr:display-uri>
                <fr:route>/jms-017E/</fr:route>
                <fr:title text="Examples of regular expression matching">Examples of regular expression matching</fr:title>
                <fr:taxon>Example</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Consider <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">regular expression matching</fr:link> over the alphabet <fr:tex display="inline"><![CDATA[\Sigma ={\mathopen {}\left \{a,b\right \}\mathclose {}}]]></fr:tex>.</html:p>
                <html:ol><html:li><fr:tex display="inline"><![CDATA[a\vert  b]]></fr:tex> is matched by each symbol in <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(a\vert  b)*]]></fr:tex> is matched every <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[b(a\vert  b)*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> that starts with a <fr:tex display="inline"><![CDATA[b]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[((a\vert  b)(a\vert  b))*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> of even length over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(\underline {\epsilon }\vert  a)(\underline {\epsilon }\vert  b)\vert  bb]]></fr:tex> is matched just by the <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> <fr:tex display="inline"><![CDATA[\epsilon ]]></fr:tex>, <fr:tex display="inline"><![CDATA[a]]></fr:tex>, <fr:tex display="inline"><![CDATA[b]]></fr:tex>, <fr:tex display="inline"><![CDATA[ab]]></fr:tex>, and <fr:tex display="inline"><![CDATA[bb]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[\varnothing  b\vert  a]]></fr:tex> is matched only by the symbol <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017F/</fr:uri>
                <fr:display-uri>jms-017F</fr:display-uri>
                <fr:route>/jms-017F/</fr:route>
                <fr:title text="Questions about regular expression matching">Questions about regular expression matching</fr:title>
                <fr:taxon>Discussion</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Here are some questions for discussion.</html:p>
                <html:ol><html:li>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:li>
 <html:li>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:li>
 <html:li>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:li>
 <html:li>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:li></html:ol>
                <html:p>We will come back to these questions in subsequent lectures. In the meantime, we can say:</html:p>
                <html:ol><html:li><html:em>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:em> Yes. One very simple way is to simply use the rules of <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">Definition <fr:contextual-number uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" /></fr:link> as a search algorithm, but this is not very efficient; better ways to decide regular expression matching can be achieved using <html:em>finite automata</html:em>, which we will study in the next lecture.</html:li>
 <html:li><html:em>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:em>
  Yes! For example, it can be useful to specify a <html:em>range</html:em> of symbols (including all symbols!) over an alphabet like most practical regular expression libraries allow. A more sophisticated example is complementation, where a <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> matches <fr:tex display="inline"><![CDATA[\mathord {\sim }(r)]]></fr:tex> if and only if it does <html:em>not</html:em> match <fr:tex display="inline"><![CDATA[r]]></fr:tex>. We will ultimately see that the complement of any regular expression already exists—but it can be useful to include it as a built-in feature.</html:li>
 <html:li><html:em>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:em> Yes, but we will need the theory of finite automata to see that this is the case.</html:li>
 <html:li><html:em>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:em> No: we will ultimately learn a technique, called the <html:em>pumping lemma</html:em> to find counter-examples.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-018E/</fr:uri>
            <fr:display-uri>jms-018E</fr:display-uri>
            <fr:route>/jms-018E/</fr:route>
            <fr:title text="Decidability of regular expression matching">Decidability of <fr:link href="/jms-017C/" title="Regular expression matching" uri="https://www.jonmsterling.com/jms-017C/" display-uri="jms-017C" type="local">regular expression matching</fr:link></fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[R]]></fr:tex> be a <fr:link href="/jms-0179/" title="Regular expressions (abstract syntax)" uri="https://www.jonmsterling.com/jms-0179/" display-uri="jms-0179" type="local">regular expression</fr:link> over an <fr:link href="/jms-016H/" title="Alphabet" uri="https://www.jonmsterling.com/jms-016H/" display-uri="jms-016H" type="local">alphabet</fr:link> <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>. Then there exists an algorithm to compute whether a given <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> <fr:tex display="inline"><![CDATA[u\in \Sigma ^\star ]]></fr:tex> <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">matches</fr:link> <fr:tex display="inline"><![CDATA[R]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
 <html:p>The idea of the proof is to find a <fr:link href="/jms-017L/" title="Deterministic finite automaton" uri="https://www.jonmsterling.com/jms-017L/" display-uri="jms-017L" type="local">DFA</fr:link> <fr:tex display="inline"><![CDATA[M]]></fr:tex> satisfying <fr:tex display="inline"><![CDATA[\mathcal {L}{\mathopen {}\left (M\right )\mathclose {}}=\mathcal {L}{\mathopen {}\left (R\right )\mathclose {}}]]></fr:tex>; so for this we need only <fr:link href="/jms-018A/" title="All regular languages are automatical" uri="https://www.jonmsterling.com/jms-018A/" display-uri="jms-018A" type="local">Corollary <fr:contextual-number uri="https://www.jonmsterling.com/jms-018A/" display-uri="jms-018A" /></fr:link> rather than the full <fr:link href="/jms-018B/" title="Kleene’s theorem" uri="https://www.jonmsterling.com/jms-018B/" display-uri="jms-018B" type="local">Kleene’s theorem</fr:link>. Then our algorithm is to feed the given string <fr:tex display="inline"><![CDATA[u]]></fr:tex> through <fr:tex display="inline"><![CDATA[M]]></fr:tex> and check whether the final state is accepting or not.</html:p>
</fr:mainmatter></fr:tree>
 
<html:p>There is a subtlety in the argument above: we need the <fr:link href="/jms-017L/" title="Deterministic finite automaton" uri="https://www.jonmsterling.com/jms-017L/" display-uri="jms-017L" type="local">DFA</fr:link> <fr:tex display="inline"><![CDATA[M]]></fr:tex> to have computably decidable equality of states. The way to deal with this is that <fr:tex display="inline"><![CDATA[M]]></fr:tex> has a <fr:link href="/jms-00LX/" title="Finite set" uri="https://www.jonmsterling.com/jms-00LX/" display-uri="jms-00LX" type="local"><html:em>finite</html:em></fr:link> set of states, and so <fr:link href="/jms-00L0/" title="Isomorphic sets" uri="https://www.jonmsterling.com/jms-00L0/" display-uri="jms-00L0" type="local">isomorphic</fr:link> to a standard finite set of the form <fr:tex display="inline"><![CDATA[\mathbb {N}_{<n}]]></fr:tex>, which has computably decidable equality. A more important subtlety is that we need it to be computably decidable whether a given state is an accepting state, and we also need the transition function to be computable; any subset of a finite set is going to be decidable for roughly the same reason—ahead of time, we can enumerate it as a list of numbers in <fr:tex display="inline"><![CDATA[\mathbb {N}_{<n}]]></fr:tex>.</html:p></fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>11</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-017F/</fr:uri>
            <fr:display-uri>jms-017F</fr:display-uri>
            <fr:route>/jms-017F/</fr:route>
            <fr:title text="Questions about regular expression matching">Questions about regular expression matching</fr:title>
            <fr:taxon>Discussion</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Here are some questions for discussion.</html:p>
            <html:ol><html:li>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:li>
 <html:li>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:li>
 <html:li>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:li>
 <html:li>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:li></html:ol>
            <html:p>We will come back to these questions in subsequent lectures. In the meantime, we can say:</html:p>
            <html:ol><html:li><html:em>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:em> Yes. One very simple way is to simply use the rules of <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">Definition <fr:contextual-number uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" /></fr:link> as a search algorithm, but this is not very efficient; better ways to decide regular expression matching can be achieved using <html:em>finite automata</html:em>, which we will study in the next lecture.</html:li>
 <html:li><html:em>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:em>
  Yes! For example, it can be useful to specify a <html:em>range</html:em> of symbols (including all symbols!) over an alphabet like most practical regular expression libraries allow. A more sophisticated example is complementation, where a <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> matches <fr:tex display="inline"><![CDATA[\mathord {\sim }(r)]]></fr:tex> if and only if it does <html:em>not</html:em> match <fr:tex display="inline"><![CDATA[r]]></fr:tex>. We will ultimately see that the complement of any regular expression already exists—but it can be useful to include it as a built-in feature.</html:li>
 <html:li><html:em>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:em> Yes, but we will need the theory of finite automata to see that this is the case.</html:li>
 <html:li><html:em>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:em> No: we will ultimately learn a technique, called the <html:em>pumping lemma</html:em> to find counter-examples.</html:li></html:ol>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>11</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-017E/</fr:uri>
            <fr:display-uri>jms-017E</fr:display-uri>
            <fr:route>/jms-017E/</fr:route>
            <fr:title text="Examples of regular expression matching">Examples of regular expression matching</fr:title>
            <fr:taxon>Example</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Consider <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">regular expression matching</fr:link> over the alphabet <fr:tex display="inline"><![CDATA[\Sigma ={\mathopen {}\left \{a,b\right \}\mathclose {}}]]></fr:tex>.</html:p>
            <html:ol><html:li><fr:tex display="inline"><![CDATA[a\vert  b]]></fr:tex> is matched by each symbol in <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(a\vert  b)*]]></fr:tex> is matched every <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[b(a\vert  b)*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> that starts with a <fr:tex display="inline"><![CDATA[b]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[((a\vert  b)(a\vert  b))*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> of even length over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(\underline {\epsilon }\vert  a)(\underline {\epsilon }\vert  b)\vert  bb]]></fr:tex> is matched just by the <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> <fr:tex display="inline"><![CDATA[\epsilon ]]></fr:tex>, <fr:tex display="inline"><![CDATA[a]]></fr:tex>, <fr:tex display="inline"><![CDATA[b]]></fr:tex>, <fr:tex display="inline"><![CDATA[ab]]></fr:tex>, and <fr:tex display="inline"><![CDATA[bb]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[\varnothing  b\vert  a]]></fr:tex> is matched only by the symbol <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:li></html:ol>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>11</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-017C/</fr:uri>
            <fr:display-uri>jms-017C</fr:display-uri>
            <fr:route>/jms-017C/</fr:route>
            <fr:title text="Regular expression matching">Regular expression matching</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We have seen the <fr:link href="/jms-0178/" title="Regular expressions" uri="https://www.jonmsterling.com/jms-0178/" display-uri="jms-0178" type="local"><html:em>syntax</html:em> of regular expressions</fr:link> in both concrete and abstract form. What about <html:em>semantics</html:em>, i.e. what do regular expressions actually do? The meaning of a given regular expression over an <fr:link href="/jms-016H/" title="Alphabet" uri="https://www.jonmsterling.com/jms-016H/" display-uri="jms-016H" type="local">alphabet</fr:link> <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> is a <html:em><html:strong>matching predicate</html:strong></html:em> on <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> that says when a given string is matched by the regular expression. In this course, we are particularly interested in the class of <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal languages</fr:link> that can be recognised by regular expressions, and later on we will develop tools that allow us to show that some <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal languages</fr:link> are too complex to be recognised by regular expressions. In the meanwhile, we will first explain how matching works.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017D/</fr:uri>
                <fr:display-uri>jms-017D</fr:display-uri>
                <fr:route>/jms-017D/</fr:route>
                <fr:title text="The matching relation for regular expressions">The matching relation for regular expressions</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The matching relation <fr:tex display="inline"><![CDATA[u\mathrel {\textsf {matches}}R]]></fr:tex> is given by an <html:em>inductive</html:em> definition over <fr:tex display="inline"><![CDATA[\Sigma ^\star \times \mathsf {Regexp}_{\Sigma }]]></fr:tex>.</html:p>
                <fr:tex display="block"><![CDATA[
 \begin {gathered}
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({a},{\texttt {Sym}_{a}}\right )\mathclose {}}
  \quad }


  \quad 
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Null}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({u},{\texttt {Union}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({v},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({w},{S}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({vw},{\texttt {Concat}{\mathopen {}\left (R,S\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \\[10pt]
  
 
 \displaystyle \frac {\displaystyle }{\displaystyle \quad 
   {\mathopen {}\left ({\epsilon },{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


  \qquad 
  
 
 \displaystyle \frac {\displaystyle 
   {\mathopen {}\left ({u},{R}\right )\mathclose {}}
   \quad 
   {\mathopen {}\left ({v},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  }{\displaystyle \quad 
   {\mathopen {}\left ({uv},{\texttt {Star}{\mathopen {}\left (R\right )\mathclose {}}}\right )\mathclose {}}
  \quad }


 \end {gathered}
]]></fr:tex>
                <html:p>We will write <fr:tex display="inline"><![CDATA[\mathcal {L}{\mathopen {}\left (R\right )\mathclose {}}]]></fr:tex> for the <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> matching or “recognised” by the regular expression <fr:tex display="inline"><![CDATA[R]]></fr:tex>:</html:p>
                <fr:tex display="block"><![CDATA[
 \mathcal {L}{\mathopen {}\left (R\right )\mathclose {}} =
 {\mathopen {}\left \{
  u\in \Sigma ^\star 
  \mid 
  u\mathrel {\textsf {matches}}R
 \right \}\mathclose {}}
]]></fr:tex>
              </fr:mainmatter>
            </fr:tree>
            <html:p>We can also obtain a version of the <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">matching relation</fr:link> between <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> and <fr:link href="/jms-0176/" title="Regular expressions (concrete syntax)" uri="https://www.jonmsterling.com/jms-0176/" display-uri="jms-0176" type="local"><html:em>concrete</html:em> regular expressions</fr:link> by <fr:link href="/jms-00IN/" title="Relational composite" uri="https://www.jonmsterling.com/jms-00IN/" display-uri="jms-00IN" type="local">relational composition</fr:link> with the (transpose of) the <fr:link href="/jms-017B/" title="Precedence parsing for regular expressions" uri="https://www.jonmsterling.com/jms-017B/" display-uri="jms-017B" type="local">parsing relation</fr:link>. Alternatively, we can simply <html:em>write</html:em> the concrete syntax as a mere notation (to be eliminated by the reader immediately) for the abstract syntax. In fact, that is what we will do in the future.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017E/</fr:uri>
                <fr:display-uri>jms-017E</fr:display-uri>
                <fr:route>/jms-017E/</fr:route>
                <fr:title text="Examples of regular expression matching">Examples of regular expression matching</fr:title>
                <fr:taxon>Example</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Consider <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">regular expression matching</fr:link> over the alphabet <fr:tex display="inline"><![CDATA[\Sigma ={\mathopen {}\left \{a,b\right \}\mathclose {}}]]></fr:tex>.</html:p>
                <html:ol><html:li><fr:tex display="inline"><![CDATA[a\vert  b]]></fr:tex> is matched by each symbol in <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(a\vert  b)*]]></fr:tex> is matched every <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[b(a\vert  b)*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> that starts with a <fr:tex display="inline"><![CDATA[b]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[((a\vert  b)(a\vert  b))*]]></fr:tex> is matched by any <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> of even length over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[(\underline {\epsilon }\vert  a)(\underline {\epsilon }\vert  b)\vert  bb]]></fr:tex> is matched just by the <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> <fr:tex display="inline"><![CDATA[\epsilon ]]></fr:tex>, <fr:tex display="inline"><![CDATA[a]]></fr:tex>, <fr:tex display="inline"><![CDATA[b]]></fr:tex>, <fr:tex display="inline"><![CDATA[ab]]></fr:tex>, and <fr:tex display="inline"><![CDATA[bb]]></fr:tex>.</html:li>
 <html:li><fr:tex display="inline"><![CDATA[\varnothing  b\vert  a]]></fr:tex> is matched only by the symbol <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>11</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-017F/</fr:uri>
                <fr:display-uri>jms-017F</fr:display-uri>
                <fr:route>/jms-017F/</fr:route>
                <fr:title text="Questions about regular expression matching">Questions about regular expression matching</fr:title>
                <fr:taxon>Discussion</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Here are some questions for discussion.</html:p>
                <html:ol><html:li>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:li>
 <html:li>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:li>
 <html:li>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:li>
 <html:li>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:li></html:ol>
                <html:p>We will come back to these questions in subsequent lectures. In the meantime, we can say:</html:p>
                <html:ol><html:li><html:em>Is there an algorithm which, given a string <fr:tex display="inline"><![CDATA[u]]></fr:tex> and a regular expression <fr:tex display="inline"><![CDATA[r]]></fr:tex>, computes whether or not <fr:tex display="inline"><![CDATA[u]]></fr:tex> matches <fr:tex display="inline"><![CDATA[r]]></fr:tex>?</html:em> Yes. One very simple way is to simply use the rules of <fr:link href="/jms-017D/" title="The matching relation for regular expressions" uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" type="local">Definition <fr:contextual-number uri="https://www.jonmsterling.com/jms-017D/" display-uri="jms-017D" /></fr:link> as a search algorithm, but this is not very efficient; better ways to decide regular expression matching can be achieved using <html:em>finite automata</html:em>, which we will study in the next lecture.</html:li>
 <html:li><html:em>In formulating the definition of regular expressions, have we missed out on some practically useful notions of pattern?</html:em>
  Yes! For example, it can be useful to specify a <html:em>range</html:em> of symbols (including all symbols!) over an alphabet like most practical regular expression libraries allow. A more sophisticated example is complementation, where a <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">string</fr:link> matches <fr:tex display="inline"><![CDATA[\mathord {\sim }(r)]]></fr:tex> if and only if it does <html:em>not</html:em> match <fr:tex display="inline"><![CDATA[r]]></fr:tex>. We will ultimately see that the complement of any regular expression already exists—but it can be useful to include it as a built-in feature.</html:li>
 <html:li><html:em>Is there an algorithm that will compute whether two regular expressions generate the same <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">language</fr:link>?</html:em> Yes, but we will need the theory of finite automata to see that this is the case.</html:li>
 <html:li><html:em>Is every <fr:link href="/jms-016M/" title="Formal language" uri="https://www.jonmsterling.com/jms-016M/" display-uri="jms-016M" type="local">formal language</fr:link> of generated by a regular expression?</html:em> No: we will ultimately learn a technique, called the <html:em>pumping lemma</html:em> to find counter-examples.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>7</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-016M/</fr:uri>
            <fr:display-uri>jms-016M</fr:display-uri>
            <fr:route>/jms-016M/</fr:route>
            <fr:title text="Formal language">Formal language</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>A <html:em><html:strong>formal language</html:strong></html:em> over an <fr:link href="/jms-016H/" title="Alphabet" uri="https://www.jonmsterling.com/jms-016H/" display-uri="jms-016H" type="local">alphabet</fr:link> <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> is defined to be a <html:em>subset</html:em> of <fr:tex display="inline"><![CDATA[\Sigma ^\star ]]></fr:tex>, i.e. a set of <fr:link href="/jms-016I/" title="String over an alphabet" uri="https://www.jonmsterling.com/jms-016I/" display-uri="jms-016I" type="local">strings</fr:link> over <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
