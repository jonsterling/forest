<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>8</fr:month>
      <fr:day>15</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-0079/</fr:uri>
    <fr:display-uri>jms-0079</fr:display-uri>
    <fr:route>/jms-0079/</fr:route>
    <fr:title text="Equational higher-order separation logic for higher-order store">Equational higher-order separation logic for higher-order store</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>In collaboration with my colleagues <fr:link href="/flaagaard/" title="Frederik Lerbjerg Aagaard" uri="https://www.jonmsterling.com/flaagaard/" display-uri="flaagaard" type="local">Frederik Ljerbjerg Aagaard</fr:link> and <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Professor Lars Birkedal</fr:link>, I have developed a <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">guarded higher-order separation logic called TULIP</fr:link> over the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">denotational model of higher-order store</fr:link>. This logic represents a significant step forward in the march toward simple, abstract, and compositional reasoning about higher-order stateful programs. Prior program logics (such as Iris and the Verified Software Toolchain) interact with computer programs only indirectly, by verifying properties of a specific “transition function” that simulates the steps that a (highly idealized) computer would take when executing a program; this style is called “operational”. Unfortunately, the important structural properties of programs are highly unnatural to express at the level of transition steps, and as such, existing operationally-based program logics impose a great deal of bureaucracy by forcing those verifying programs to manually mediate the mismatch between the viewpoint of the machine (which cannot see program structure), and the viewpoint of the programmer (which is entirely based on program structure). An equational, or "denotationally-based", program logic like <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">TULIP</fr:link> instead treats programs directly without needing to pass through an encoding in terms of machine transitions. An immediate benefit of the equational approach is that program equivalences can be glued together directly in any context, a kind of practical compositionality that is unique to equational and denotationally-based program logics. Our development of the <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">TULIP</fr:link> logic is a strong first step in this direction.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/flaagaard/" title="Frederik Lerbjerg Aagaard" uri="https://www.jonmsterling.com/flaagaard/" display-uri="flaagaard" type="local">Frederik Lerbjerg Aagaard</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Lars Birkedal</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>11</fr:month>
              <fr:day>23</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/</fr:uri>
            <fr:display-uri>aagaard-sterling-birkedal-2023</fr:display-uri>
            <fr:route>/aagaard-sterling-birkedal-2023/</fr:route>
            <fr:title text="A denotationally-based program logic for higher-order store">A denotationally-based program logic for higher-order store</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.46298/entics.12232</fr:meta>
            <fr:meta name="venue">39th International Conference on Mathematical Foundations of Programming Semantics</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Separation logic is used to reason locally about stateful programs. State of the art program logics for higher-order store are usually built on top of untyped operational semantics, in part because traditional denotational methods have struggled to simultaneously account for general references and parametric polymorphism. The <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">recent discovery</fr:link> of simple denotational semantics for general references and polymorphism in synthetic guarded domain theory has enabled us to develop <html:strong>Tulip</html:strong>, a higher-order separation logic over the typed equational theory of higher-order store for a monadic version of System <fr:tex display="inline"><![CDATA[\textbf {F}^{\mu ,\textit {ref}}]]></fr:tex>. The <html:strong>Tulip</html:strong> logic differs from operationally-based program logics in two ways: predicates range over the meanings of typed terms rather than over the raw code of untyped terms, and they are automatically invariant under the equational congruence of higher-order store, which applies even underneath a binder. As a result, “pure” proof steps that conventionally require focusing the Hoare triple on an operational redex are replaced by a simple equational rewrite in <html:strong>Tulip</html:strong>. We have evaluated <html:strong>Tulip</html:strong> against standard examples involving linked lists in the heap, comparing our abstract equational reasoning with more familiar operational-style reasoning. Our main result is the soundness of <html:strong>Tulip</html:strong>, which we establish by constructing a BI-hyperdoctrine over the denotational semantics of <fr:tex display="inline"><![CDATA[\textbf {F}^{\mu ,\textit {ref}}]]></fr:tex> in an impredicative version of synthetic guarded domain theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/danielgratzer/" title="Daniel Gratzer" uri="https://www.jonmsterling.com/danielgratzer/" display-uri="danielgratzer" type="local">Daniel Gratzer</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Lars Birkedal</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2022</fr:year>
              <fr:month>10</fr:month>
              <fr:day>6</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/</fr:uri>
            <fr:display-uri>sterling-gratzer-birkedal-2022</fr:display-uri>
            <fr:route>/sterling-gratzer-birkedal-2022/</fr:route>
            <fr:title text="Denotational semantics of general store and polymorphism">Denotational semantics of general store and polymorphism</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.48550/arXiv.2210.02169</fr:meta>
            <fr:meta name="bibtex"><![CDATA[@unpublished{sterling-gratzer-birkedal-2022,
  author = {Sterling, Jonathan and Gratzer, Daniel and Birkedal, Lars},
  year = {2022},
  month = jul,
  note = {Unpublished manuscript},
  title = {Denotational semantics of general store and polymorphism},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We contribute the first denotational semantics of polymorphic dependent type theory extended by an equational theory for general (higher-order) reference types and recursive types, based on a combination of guarded recursion and impredicative polymorphism; because our model is based on <html:em>recursively defined semantic worlds</html:em>, it is compatible with polymorphism and relational reasoning about stateful abstract datatypes. We then extend our language with modal constructs for proof-relevant relational reasoning based on the <html:em>logical relations as types</html:em> principle, in which equivalences between imperative abstract datatypes can be established synthetically. Finally we develop a decomposition of the store model as a general construction that extends an arbitrary polymorphic call-by-push-value adjunction with higher-order store, improving on <fr:link href="/paulblainlevy/" title="Paul Blain Levy" uri="https://www.jonmsterling.com/paulblainlevy/" display-uri="paulblainlevy" type="local">Levy</fr:link>'s possible worlds model construction; what is new in relation to prior typed denotational models of higher-order store is that our Kripke worlds need not be syntactically definable, and are thus compatible with relational reasoning in the heap. Our work combines recent advances in the operational semantics of state with the purely denotational viewpoint of <html:em>synthetic guarded domain theory</html:em>.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>8</fr:month>
              <fr:day>15</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0077/</fr:uri>
            <fr:display-uri>jms-0077</fr:display-uri>
            <fr:route>/jms-0077/</fr:route>
            <fr:title text="Work performed and main achievements">Work performed and main achievements</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>I highlight the three main achievements of the TypeSynth project below:</html:p>
            <html:ol><html:li>a new denotational semantics of higher-order store;</html:li>
  <html:li>an equational higher-order separation logic based on the above denotational semantics;</html:li>
  <html:li>the extension of <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">synthetic Tait computability</fr:link> to support computational effects including guarded recursion and higher-order store.</html:li></html:ol>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>8</fr:month>
                  <fr:day>15</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0078/</fr:uri>
                <fr:display-uri>jms-0078</fr:display-uri>
                <fr:route>/jms-0078/</fr:route>
                <fr:title text="Denotational semantics of higher-order store">Denotational semantics of higher-order store</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>The <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> plan to develop denotational semantics of higher-order store had two components: the first was to develop a practical semantic model of polymorphic higher-order store without garbage collection, and the second was to extend this model to support the equational theory of garbage collection. For the former, the results have greatly outstripped expectations: I have succeeded in constructing not only the indended model of store with polymorphism, but in fact a <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">model of full dependent type theory with higher-order store</fr:link> — posing the prospect for being able to write and verify the correctness of programs in the same language. This result is the first of its kind for higher-order store, and is a significant advance. In the final months of the project, we have also gone further beyond this result in a different direction, and constructed a version of the model of higher-order store satisfying a new gamut of compelling representation independence equations which I refer to as the theory of <fr:link href="/sterling-gratzer-birkedal-2024-univalent/" title="Towards univalent reference types" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2024-univalent/" display-uri="sterling-gratzer-birkedal-2024-univalent" type="local">“univalent reference types”</fr:link>: in short, two programs can be considered equal even if they allocate memory cells of different types, so long as the two types are in bijection and programs' interaction with the memory cell respects this bijection.</html:p>
                <html:p>I have begun to extend these results to include the equational theory of garbage collection, but as the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> project has been terminated nearly one year early (due to my recent appointment as Associate Professor at University of Cambridge), this further exploitation of the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> methodology will continue beyond the conclusion of the project.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>8</fr:month>
                  <fr:day>15</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0079/</fr:uri>
                <fr:display-uri>jms-0079</fr:display-uri>
                <fr:route>/jms-0079/</fr:route>
                <fr:title text="Equational higher-order separation logic for higher-order store">Equational higher-order separation logic for higher-order store</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>In collaboration with my colleagues <fr:link href="/flaagaard/" title="Frederik Lerbjerg Aagaard" uri="https://www.jonmsterling.com/flaagaard/" display-uri="flaagaard" type="local">Frederik Ljerbjerg Aagaard</fr:link> and <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Professor Lars Birkedal</fr:link>, I have developed a <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">guarded higher-order separation logic called TULIP</fr:link> over the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">denotational model of higher-order store</fr:link>. This logic represents a significant step forward in the march toward simple, abstract, and compositional reasoning about higher-order stateful programs. Prior program logics (such as Iris and the Verified Software Toolchain) interact with computer programs only indirectly, by verifying properties of a specific “transition function” that simulates the steps that a (highly idealized) computer would take when executing a program; this style is called “operational”. Unfortunately, the important structural properties of programs are highly unnatural to express at the level of transition steps, and as such, existing operationally-based program logics impose a great deal of bureaucracy by forcing those verifying programs to manually mediate the mismatch between the viewpoint of the machine (which cannot see program structure), and the viewpoint of the programmer (which is entirely based on program structure). An equational, or "denotationally-based", program logic like <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">TULIP</fr:link> instead treats programs directly without needing to pass through an encoding in terms of machine transitions. An immediate benefit of the equational approach is that program equivalences can be glued together directly in any context, a kind of practical compositionality that is unique to equational and denotationally-based program logics. Our development of the <fr:link href="/aagaard-sterling-birkedal-2023/" title="A denotationally-based program logic for higher-order store" uri="https://www.jonmsterling.com/aagaard-sterling-birkedal-2023/" display-uri="aagaard-sterling-birkedal-2023" type="local">TULIP</fr:link> logic is a strong first step in this direction.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>8</fr:month>
                  <fr:day>15</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-007A/</fr:uri>
                <fr:display-uri>jms-007A</fr:display-uri>
                <fr:route>/jms-007A/</fr:route>
                <fr:title text="Effectful synthetic Tait computability">Effectful <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">synthetic Tait computability</fr:link></fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>A third achievement of the <fr:link href="/jms-0061/" title="TypeSynth: synthetic methods in program verification" uri="https://www.jonmsterling.com/jms-0061/" display-uri="jms-0061" type="local">TypeSynth</fr:link> project was to extend the highly successful “<fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">Synthetic Tait Computability</fr:link>” method, developed in my <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">doctoral thesis</fr:link>, to the case of realistic programming languages with computational effects. The purpose of this extension was to achieve strong representation independence results, by which we can show the computational indistinguishability of even two programs that allocate memory cells of different types that are linked not by a bijection but by a mere relation, in contrast to univalent reference types. We have gone quite a bit beyond our expectations, as our account of <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local"><fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">STC</fr:link> for higher-order store</fr:link> applies not only to the simple polymorphic store model, but also to the full dependent type theory. This allows many classic results from the literature that previously required very complicated reasoning with the semantic model to be reconstructed in a simpler and more direct fashion.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2022</fr:year>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0061/</fr:uri>
            <fr:display-uri>jms-0061</fr:display-uri>
            <fr:route>/jms-0061/</fr:route>
            <fr:title text="TypeSynth: synthetic methods in program verification">TypeSynth: synthetic methods in program verification</fr:title>
            <fr:taxon>Fellowship</fr:taxon>
            <fr:meta name="doi">10.3030/101065303</fr:meta>
            <fr:meta name="venue">Marie Skłodowska-Curie Actions Postdoctoral Fellowship</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
  <html:table>
  

  
    
  <html:tr>
  <html:td><html:strong>Beneficiary</html:strong>:</html:td>

  <html:td><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jonathan Sterling</fr:link></html:td>
</html:tr>

  
  
    
  <html:tr>
  <html:td><html:strong>Award</html:strong>:</html:td>

  <html:td><fr:link href="https://marie-sklodowska-curie-actions.ec.europa.eu/actions/postdoctoral-fellowships" type="external">Marie Skłodowska-Curie Actions Postdoctoral Fellowship</fr:link></html:td>
</html:tr>

  
  
    
  <html:tr>
  <html:td><html:strong>Funder</html:strong>:</html:td>

  <html:td><fr:link href="https://ec.europa.eu/info/research-and-innovation/funding/funding-opportunities/funding-programmes-and-open-calls/horizon-europe_en" type="external">European Commission, Horizon Europe Framework Programme (HORIZON)</fr:link></html:td>
</html:tr>

  
  
    
  <html:tr>
  <html:td><html:strong>Host</html:strong>:</html:td>

  <html:td><fr:link href="/jms-00GC/" title="Aarhus University" uri="https://www.jonmsterling.com/jms-00GC/" display-uri="jms-00GC" type="local">Aarhus University</fr:link>, <fr:link href="https://cpv.au.dk/" type="external">Center for Basic Research in Program Verification</fr:link></html:td>
</html:tr>

  
  
    
  <html:tr>
  <html:td><html:strong>Years</html:strong>:</html:td>

  <html:td>2022–2024 (terminated 2023)</html:td>
</html:tr>

  
  
    
  <html:tr>
  <html:td><html:strong>Amount</html:strong>:</html:td>

  <html:td>214,934.4 EUR</html:td>
</html:tr>

  
</html:table>
<html:p>See the <fr:link href="/jms-0075/" title="TypeSynth final report" uri="https://www.jonmsterling.com/jms-0075/" display-uri="jms-0075" type="local">Final Report</fr:link> and <fr:link href="/jms-00AH/" title="TypeSynth project bibliography" uri="https://www.jonmsterling.com/jms-00AH/" display-uri="jms-00AH" type="local">Bibliography</fr:link>.</html:p><html:p><html:strong>Abstract.</html:strong> Software systems mediate a growing proportion of human activity, e.g. communication, transport, medicine, industrial and agricultural production, etc. As a result, it is urgent to understand and better control both the correctness and security properties of these increasingly complex software systems. The diversity of verification requirements speaks to a need for models of program execution that smoothly interpolate between many different levels of abstraction.</html:p><html:p>Models of program execution vary in expressiveness along the spectrum of possible programming languages and specification logics. At one extreme, dependent type theory is a language for mathematically-inspired functional programming that is sufficiently expressive to serve as its own specification logic. Dependent type theory has struggled, however, to incorporate several computational effects that are common in every-day programming languages, such as state and concurrency. Languages that support these features require very sophisticated specification logics due to the myriad details that must be surfaced in their semantic models.</html:p><html:p>In the context of dependent type theory, I have recently developed a new technique called <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">Synthetic Tait Computability</fr:link> or <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">STC</fr:link> that smoothly combines multiple levels of abstraction into a single language. Inspired by sophisticated mathematical techniques invented in topos theory and category theory for entirely different purposes, <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">STC</fr:link> enables low-level details (even down to execution steps) to be manipulated in a simpler and more abstract way than ever before, making them easier to control mathematically. Perhaps more importantly, the <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">STC</fr:link> method makes it possible to import ideas and techniques from other mathematical fields that are comparatively more developed than programming languages.</html:p><html:p>The goal of the <html:strong>TypeSynth</html:strong> project is to extend the successful <fr:link href="/jms-005T/" title="Synthetic Tait computability" uri="https://www.jonmsterling.com/jms-005T/" display-uri="jms-005T" type="local">STC</fr:link> approach to a wider class of programming models, in particular programming languages with effects.</html:p></fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/flaagaard/</fr:uri>
            <fr:display-uri>flaagaard</fr:display-uri>
            <fr:route>/flaagaard/</fr:route>
            <fr:title text="Frederik Lerbjerg Aagaard">Frederik Lerbjerg Aagaard</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="phd-advisor">larsbirkedal</fr:meta>
            <fr:meta name="position">PhD Student</fr:meta>
            <fr:meta name="institution">
              <fr:link href="/jms-00GC/" title="Aarhus University" uri="https://www.jonmsterling.com/jms-00GC/" display-uri="jms-00GC" type="local">Aarhus University</fr:link>
            </fr:meta>
            <fr:meta name="orcid">0000-0002-9132-0098</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>A PhD student of <fr:link href="/larsbirkedal/" title="Lars Birkedal" uri="https://www.jonmsterling.com/larsbirkedal/" display-uri="larsbirkedal" type="local">Lars Birkedal</fr:link>.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/larsbirkedal/</fr:uri>
            <fr:display-uri>larsbirkedal</fr:display-uri>
            <fr:route>/larsbirkedal/</fr:route>
            <fr:title text="Lars Birkedal">Lars Birkedal</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="external">https://cs.au.dk/~birke/</fr:meta>
            <fr:meta name="institution">
              <fr:link href="/jms-00GC/" title="Aarhus University" uri="https://www.jonmsterling.com/jms-00GC/" display-uri="jms-00GC" type="local">Aarhus University</fr:link>
            </fr:meta>
            <fr:meta name="position">Professor</fr:meta>
            <fr:meta name="orcid">0000-0003-1320-0098</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Villum Investigator; Head of Logic and Semantics Group.</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
