<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>1</fr:month>
      <fr:day>19</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-000Q/</fr:uri>
    <fr:display-uri>jms-000Q</fr:display-uri>
    <fr:route>/jms-000Q/</fr:route>
    <fr:title text="Dissertation overview: first steps in synthetic Tait computability">Dissertation overview: <html:em>first steps in synthetic Tait computability</html:em></fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>This is a chapter-by-chapter overview of the <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">dissertation of Jonathan Sterling</fr:link>.</html:p>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>1</fr:month>
          <fr:day>19</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-000R/</fr:uri>
        <fr:display-uri>jms-000R</fr:display-uri>
        <fr:route>/jms-000R/</fr:route>
        <fr:title text="Background on homotopy and cubical type theory">Background on homotopy and cubical type theory</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>For more than four decades, dependent type theory has been positioned as the “common language” that can finally <fr:link href="/martin-loef-1982/" title="Constructive mathematics and computer programming" uri="https://www.jonmsterling.com/martin-loef-1982/" display-uri="martin-loef-1982" type="local">unify mathematics and computer programming</fr:link>: while it has never been controversial that a computer program is a form of mathematical construction, the running hypothesis of the type theoretic community has been the converse to this claim, namely that mathematical constructions should be viewed as programs that can in principle be executed by a physical machine — roughly, <html:strong>sets</html:strong> = <html:strong>types</html:strong> and <html:strong>elements</html:strong> = <html:strong>programs</html:strong>. Thus the struggle to realize this type theoretic hypothesis has been a two-way process, punctuated by moments at which the mathematical meaning of a programming construct is elucidated, or at which the computational content of a mathematical construct is uncovered.</html:p>
        <html:p>In the current millennium, a new identification has been taking shape in which <html:strong>types</html:strong> = <html:strong><html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-groupoids</html:span></html:strong> (homotopy types), which are an infinite-dimensional generalization of sets; the origins of this new perspective on type theory lie with <fr:link href="/hofmann-streicher-1998/" title="The groupoid interpretation of type theory" uri="https://www.jonmsterling.com/hofmann-streicher-1998/" display-uri="hofmann-streicher-1998" type="local">Hofmann and Streicher’s 1998 groupoid interpretation of type theory</fr:link>, combined with the revolutionary contributions of <fr:link href="/voevodsky-2006/" title="A very short note on the homotopy λ-calculus" uri="https://www.jonmsterling.com/voevodsky-2006/" display-uri="voevodsky-2006" type="local">Voevodsky</fr:link> and <fr:link href="/awodey-warren-2009/" title="Homotopy theoretic models of identity types" uri="https://www.jonmsterling.com/awodey-warren-2009/" display-uri="awodey-warren-2009" type="local">Awodey and Warren</fr:link> respectively. The main feature of the new language, dubbed <fr:link href="/hottbook/" title="Homotopy Type Theory: univalent foundations of mathematics" uri="https://www.jonmsterling.com/hottbook/" display-uri="hottbook" type="local"><html:strong>homotopy type theory</html:strong></fr:link> or <html:strong>HoTT</html:strong>, is that isomorphisms between types are equipped with a new induction rule called univalence stating that all type theoretic constructs respect isomorphisms: to a first approximation, if <fr:tex display="inline"><![CDATA[A \cong  B]]></fr:tex> then <fr:tex display="inline"><![CDATA[P(A) \cong  P(B)]]></fr:tex> for any <fr:tex display="inline"><![CDATA[P]]></fr:tex>. The univalence principle is motivated by the phenomenon of homotopy invariance that pervades the large-scale structure of modern-day mathematics, from algebraic topology to algebraic geometry to mathematical physics; as a programming construct, univalence suggests <fr:link href="/acmz-2021/" title="Internalizing representation independence with univalence" uri="https://www.jonmsterling.com/acmz-2021/" display-uri="acmz-2021" type="local">new approaches</fr:link> to both generic and modular programming.</html:p>
        <html:p>Thus one of the main projects for the first decade of homotopy type theory was to substantiate the relationship between HoTT and mathematics on the one hand, and between HoTT and computer programming on the other hand. The question of whether homotopy type theoretic language can be interpreted in sheaves on arbitrary infinite-dimensional spaces (<html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-topoi</html:span>) has finally been resolved satisfactorily by <fr:link href="/shulman-2019/" title="All (∞,1)-toposes have strict univalent universes" uri="https://www.jonmsterling.com/shulman-2019/" display-uri="shulman-2019" type="local">Shulman</fr:link> in 2019. On the other hand, the computational interpretation of homotopy type theory has involved a reformulation of HoTT called <html:strong><fr:link href="/abchfl-2021/" title="Syntax and models of Cartesian cubical type theory" uri="https://www.jonmsterling.com/abchfl-2021/" display-uri="abchfl-2021" type="local">cubical</fr:link> <fr:link href="/angiuli-favonia-harper-2018/" title="Cartesian cubical computational type theory: constructive reasoning with paths and equalities" uri="https://www.jonmsterling.com/angiuli-favonia-harper-2018/" display-uri="angiuli-favonia-harper-2018" type="local">type</fr:link> <fr:link href="/cchm-2017/" title="Cubical type theory: a constructive interpretation of the univalence axiom" uri="https://www.jonmsterling.com/cchm-2017/" display-uri="cchm-2017" type="local">theory</fr:link></html:strong> that reorganizes the higher-dimensional structure discussed by considering all the points, lines, squares, cubes, hypercubes, and so-on that one can draw in a given type. The computational interpretation of the new cubical type theory can be split into two different conjectures:</html:p>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000S/</fr:uri>
            <fr:display-uri>jms-000S</fr:display-uri>
            <fr:route>/jms-000S/</fr:route>
            <fr:title text="Cubical canonicity">Cubical canonicity</fr:title>
            <fr:taxon>Conjecture</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>For any closed term <fr:tex display="inline"><![CDATA[\cdot \vdash  N:\mathsf {nat}]]></fr:tex> of cubical type theory, there exists a unique natural number <fr:tex display="inline"><![CDATA[n\in \mathbb {N}]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\cdot \vdash  N\equiv  \bar {n}:\mathsf {nat}]]></fr:tex> where <fr:tex display="inline"><![CDATA[\bar {n}]]></fr:tex> is the encoding of the number <fr:tex display="inline"><![CDATA[n]]></fr:tex> as a term in the type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000T/</fr:uri>
            <fr:display-uri>jms-000T</fr:display-uri>
            <fr:route>/jms-000T/</fr:route>
            <fr:title text="Decidability of cubical type theory">Decidability of cubical type theory</fr:title>
            <fr:taxon>Conjecture</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The assertions <fr:tex display="inline"><![CDATA[\Gamma \vdash  {A}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash {A\equiv  B}\ \textit {type}]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Gamma \vdash  M:A]]></fr:tex>, and <fr:tex display="inline"><![CDATA[\Gamma \vdash  M\equiv  N: A]]></fr:tex> are all decidable.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <html:p>The <fr:link href="/jms-000S/" title="Cubical canonicity" uri="https://www.jonmsterling.com/jms-000S/" display-uri="jms-000S" type="local">canonicity conjecture</fr:link> ensures that terms written in cubical type theory can be thought of as computer programs, and was verified independently by <fr:link href="/huber-2018/" title="Canonicity for cubical type theory" uri="https://www.jonmsterling.com/huber-2018/" display-uri="huber-2018" type="local">Huber</fr:link> and <fr:link href="/angiuli-2019/" title="Computational semantics of cartesian cubical type theory" uri="https://www.jonmsterling.com/angiuli-2019/" display-uri="angiuli-2019" type="local">Angiuli</fr:link> for different variants of cubical type theory. The <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability conjecture</fr:link> is no less important, as it is a necessary ingredient to implement a <html:em>typechecker</html:em> or a <html:em>compiler</html:em> for a programming language based on cubical type theory.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>1</fr:month>
          <fr:day>19</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-000U/</fr:uri>
        <fr:display-uri>jms-000U</fr:display-uri>
        <fr:route>/jms-000U/</fr:route>
        <fr:title text="Contributions of First Steps in Synthetic Tait Computability">Contributions of <html:em>First Steps in Synthetic Tait Computability</html:em></fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>This <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local">dissertation</fr:link> positively resolves the <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability conjecture</fr:link> for cubical type theory, the last remaining open question in its syntactic metatheory. Standard techniques proved inadequate for tackling this problem, so the bulk of this dissertation focuses on developing a new mathematical technique called <html:strong>synthetic Tait computability</html:strong> that generalizes and abstracts the method of <html:em>Tait computability</html:em> or <html:em>logical predicates</html:em>; in the past two years, synthetic Tait computability has played a central role in solving several problems in both type theory and core programming languages, suggesting that this dissertation presents a lasting and transformative contribution to the state of the art.</html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors>
          <fr:author>
            <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
          </fr:author>
        </fr:authors>
        <fr:date>
          <fr:year>2023</fr:year>
          <fr:month>1</fr:month>
          <fr:day>19</fr:day>
        </fr:date>
        <fr:uri>https://www.jonmsterling.com/jms-000V/</fr:uri>
        <fr:display-uri>jms-000V</fr:display-uri>
        <fr:route>/jms-000V/</fr:route>
        <fr:title text="Detailed overview of First Steps in Synthetic Tait Computability">Detailed overview of <html:em>First Steps in Synthetic Tait Computability</html:em></fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>We give a chapter-by-chapter overview of <fr:link href="/sterling-2021-thesis/" title="First steps in synthetic Tait computability: the objective metatheory of cubical type theory" uri="https://www.jonmsterling.com/sterling-2021-thesis/" display-uri="sterling-2021-thesis" type="local"><html:em>First Steps in Synthetic Tait Computability</html:em></fr:link>. The novel contributions are contained in Chapters 4, 5, 7, and 8; the remaining Chapters 0-3 and 6 are primarily expository.</html:p>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000W/</fr:uri>
            <fr:display-uri>jms-000W</fr:display-uri>
            <fr:route>/jms-000W/</fr:route>
            <fr:title text="Part I: dependent dype theory">Part I: dependent dype theory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000X/</fr:uri>
                <fr:display-uri>jms-000X</fr:display-uri>
                <fr:route>/jms-000X/</fr:route>
                <fr:title text="Chapter 0: conspectus on type theory">Chapter 0: conspectus on type theory</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This chapter situates the motivations and applications of type theory in mathematics and computer science, and poses these against the semantic and syntactic properties of type theory that are needed to substantiate these applications. On the semantic side, type theory needs a number of properties including function extensionality, function comprehension, propositional univalence, effective quotients, etc.; on the syntactic side, type theory needs to be at least consistent, and many applications require both canonicity and decidability. Combining these syntactic and semantic properties into a single system has been a challenge, and cubical type theory was designed with the intention of satisfying them all. Prior to this dissertation, only the decidability conjecture remained open; thus with the present contribution, we regard the <html:em>Cubical Hypothesis</html:em> confirmed.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000Y/</fr:uri>
                <fr:display-uri>jms-000Y</fr:display-uri>
                <fr:route>/jms-000Y/</fr:route>
                <fr:title text="Chapter 1: objective syntax of dependent types">Chapter 1: objective syntax of dependent types</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>To state and prove theorems like <fr:link href="/jms-000S/" title="Cubical canonicity" uri="https://www.jonmsterling.com/jms-000S/" display-uri="jms-000S" type="local">canonicity</fr:link> and <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability</fr:link> for a type theory, we must have a mathematical definition of the <html:em>syntax</html:em> of type theory. Conventionally, the syntax of type theory has been studied in several layers: one starts with a definition of “raw” syntax as trees labeled by the names of the generating operations, quotients these trees under permutation of bound variables, and then layers on top of this an additional inductively defined formalism expressing the well-formedness of types, well-formedness of terms, definitional equality of types, and definitional equality of terms. After this, one verifies that definitional equivalence classes of well-formed types and terms can be used as the raw materials to construct a universal model of the type theory that has a universal property: any other model of type theory can be equipped with a unique structure-preserving homomorphism from the universal model. The described universal property determines the universal model up to unique isomorphism, if such a model exists.</html:p>
                <html:p>We refer to the painstaking process described above as the subjective metatheory, building on the <fr:link href="/hegel-sol/" title="Wissenschaft der Logik" uri="https://www.jonmsterling.com/hegel-sol/" display-uri="hegel-sol" type="local">Hegel</fr:link>–<fr:link href="/lawvere-1994/" title="Tools for the advancement of objective logic: closed categories and toposes" uri="https://www.jonmsterling.com/lawvere-1994/" display-uri="lawvere-1994" type="local">Lawvere</fr:link> <fr:link href="/lawvere-schanuel-2009/" title="Conceptual mathematics: a first introduction to categories" uri="https://www.jonmsterling.com/lawvere-schanuel-2009/" display-uri="lawvere-schanuel-2009" type="local">distinction</fr:link> between objective and subjective approaches to logic. The objective metatheory, in contrast, involves stating and proving results about type theories and programming languages relying only on the universal property of the universal model and not on any specifics of its presentation; the advantage of the objective metatheory is that it is simpler, more direct, more modular, and more composable.</html:p>
                <html:p>Chapter 1 argues that the subjective metatheory in the sense described is redundant: the decidability conjecture can be stated with respect to any representative of the universal model and does not depend in any way on the raw syntax of type theory, and moreover, for all the type theories considered in this dissertation the existence of at least one representative of the universal model is guaranteed for somewhat trivial reasons that have nothing to do with the specifics of type theory. In this chapter, we develop a logical framework for specifying type theories modularly and working with their universal models in an objective fashion.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000Z/</fr:uri>
            <fr:display-uri>jms-000Z</fr:display-uri>
            <fr:route>/jms-000Z/</fr:route>
            <fr:title text="Part II: mathematical Background">Part II: mathematical Background</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0010/</fr:uri>
                <fr:display-uri>jms-0010</fr:display-uri>
                <fr:route>/jms-0010/</fr:route>
                <fr:title text="Chapter 2: the language of topoi">Chapter 2: the language of topoi</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Much of this dissertation is stated and proved by exploiting the language of (Grothendieck) topoi, a concept that leads a dual life as a kind of generalized logic <html:em>and</html:em> as a kind of generalized topology. The viewpoint of topos theory <html:em>qua</html:em> generalized topology plays an important role in this dissertation, and yet it nonetheless remains unfamiliar to most computer scientists and logicians. For this reason, Chapter 2 is provided as sufficient exposition to understand the use of topoi in the remainder of the dissertation, focusing on the <html:em>recollement</html:em> or <html:em>gluing</html:em> of a topos from a pair of complementary open and closed subtopoi, a classical construction that provides the geometrical basis for synthetic Tait computability.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0011/</fr:uri>
                <fr:display-uri>jms-0011</fr:display-uri>
                <fr:route>/jms-0011/</fr:route>
                <fr:title text="Chapter 3: the theory of universes">Chapter 3: the theory of universes</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Universes started their life in the <fr:link href="/sga-4/" title="Théorie des topos et cohomologie étale des schémas (SGA 4)" uri="https://www.jonmsterling.com/sga-4/" display-uri="sga-4" type="local">Grothendieck school of algebraic geometry</fr:link> as a technical device to circumvent the annoyance that there cannot be a “set of all sets”; a universe is a set of enough sets, and whilst a universe cannot contain itself, it may nonetheless lie within an even bigger universe. Several important developments in the theory of universes from the 1970s onward by <fr:link href="/jeanb%C3%A9nabou/" title="Jean Bénabou" uri="https://www.jonmsterling.com/jeanbénabou/" display-uri="jeanbénabou" type="local">Bénabou</fr:link>, <fr:link href="/permartinl%C3%B6f/" title="Per Martin-Löf" uri="https://www.jonmsterling.com/permartinlöf/" display-uri="permartinlöf" type="local">Martin-Löf</fr:link>, <fr:link href="/peterdybjer/" title="Peter Dybjer" uri="https://www.jonmsterling.com/peterdybjer/" display-uri="peterdybjer" type="local">Dybjer</fr:link>, <fr:link href="/martinhofmann/" title="Martin Hofmann" uri="https://www.jonmsterling.com/martinhofmann/" display-uri="martinhofmann" type="local">Hofmann</fr:link>, <fr:link href="/thomasstreicher/" title="Thomas Streicher" uri="https://www.jonmsterling.com/thomasstreicher/" display-uri="thomasstreicher" type="local">Streicher</fr:link>, <fr:link href="/steveawodey/" title="Steve Awodey" uri="https://www.jonmsterling.com/steveawodey/" display-uri="steveawodey" type="local">Awodey</fr:link>, and others have collided to deliver the present-day understanding of the centrality of universes in semantics: a model of type theory is just a special kind of universe in a special kind of category. This chapter provides expository background on the theory of universes, including a novel account of open and closed subuniverses to reflect the recollement theory of topoi from <fr:link href="/jms-0010/" title="Chapter 2: the language of topoi" uri="https://www.jonmsterling.com/jms-0010/" display-uri="jms-0010" type="local">Chapter 2</fr:link>. These open and closed subuniverses will play a critical role in the development of synthetic Tait computability in subsequent chapters.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0012/</fr:uri>
            <fr:display-uri>jms-0012</fr:display-uri>
            <fr:route>/jms-0012/</fr:route>
            <fr:title text="Part III: synthetic Tait computability">Part III: synthetic Tait computability</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0013/</fr:uri>
                <fr:display-uri>jms-0013</fr:display-uri>
                <fr:route>/jms-0013/</fr:route>
                <fr:title text="Chapter 4: Tait's method of computability">Chapter 4: Tait's method of computability</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>It is simple enough to verify <html:strong>negative</html:strong> properties of a formal system, e.g. the non-derivability of a given assertion <fr:tex display="inline"><![CDATA[\Phi ]]></fr:tex>: find a mathematical object that models all the rules of the formal system and yet refutes <fr:tex display="inline"><![CDATA[\Phi ]]></fr:tex>. In contrast, it is much harder to verify any non-trivial <html:strong>positive</html:strong> property of a formal system (such as canonicity, normalization, decidability, etc.). To handle such results, new techniques were needed — and delivered in the late 1960s by Tait, Martin-Löf and others under the name of Tait’s method of computability or logical predicates. Since its inception, Tait’s method has been the primary tool for verifying positive properties of logics, programming languages, and type theories. Early on, <fr:link href="/freyd-1978/" title="On proving that 1 is an indecomposable projective in various free categories" uri="https://www.jonmsterling.com/freyd-1978/" display-uri="freyd-1978" type="local">Freyd</fr:link> noticed that the logical predicates arguments can be rephrased as model constructions that glue together geometrical objects corresponding to <html:em>syntax</html:em> (object) and <html:em>set theory</html:em> (meta), setting the stage for this thesis. Thus despite appearances, both positive and negative properties can both be proved using semantic methods.</html:p>
                <html:p>In the subsequent development of the computability method for applications in computer science, <html:em>indexed</html:em> variants of the logical predicates have proved to be fundamental and a number of variations on indexed logical predicates have appeared including the Kripke logical predicates of <fr:link href="/jung-tiuryn-1993/" title="A new characterization of lambda definability" uri="https://www.jonmsterling.com/jung-tiuryn-1993/" display-uri="jung-tiuryn-1993" type="local">Jung and Tiuryn</fr:link> and the much more sophisticated <html:em>Grothendieck</html:em> logical predicates of <fr:link href="/fiore-simpson-1999/" title="Lambda definability with sums via Grothendieck logical relations" uri="https://www.jonmsterling.com/fiore-simpson-1999/" display-uri="fiore-simpson-1999" type="local">Fiore and Simpson</fr:link> as well as <fr:link href="/altenkirch-dybjer-hofmann-scott-2001/" title="Normalization by evaluation for typed lambda calculus with coproducts" uri="https://www.jonmsterling.com/altenkirch-dybjer-hofmann-scott-2001/" display-uri="altenkirch-dybjer-hofmann-scott-2001" type="local">Altenkirch, Dybjer, Hofmann, and Scott</fr:link>. This chapter points out that all of these forms of indexing arise in the same way from what is referred to as a <html:strong>figure shape</html:strong>, a continuous map into the classifying space of “Henkin models” of a given theory. Then the (Kripke, Grothendieck, etc.) logical predicates model is presented much more simply as the Artin gluing of this morphism’s inverse image.</html:p>
                <html:p>An explicit proof of canonicity for the simply typed <fr:tex display="inline"><![CDATA[\lambda ]]></fr:tex>-calculus motivates the abstraction and axiomatization of the geometry of figure shapes and their gluings as a new language for syntactic metatheory, namely <html:strong>synthetic Tait computability</html:strong>. The idea of synthetic Tait computability is to treat both object-level notions (e.g. the collection of terms of type <fr:tex display="inline"><![CDATA[\mathsf {bool}]]></fr:tex>) and meta-level notions (e.g. a normal form of a given term) in the same language by means of a pair of lex idempotent modalities. One strength of this presentation is that both object-level and meta-level notions can be treated using higher-order abstract syntax (HOAS) in the sense of <fr:link href="/hofmann-1999/" title="Semantical analysis of higher-order abstract syntax" uri="https://www.jonmsterling.com/hofmann-1999/" display-uri="hofmann-1999" type="local">Hofmann</fr:link>, which greatly simplifies the manipulation of variables.</html:p>
                <html:p>The first demonstration of the power and modularity of synthetic Tait
  computability is a new a proof of the canonicity property for Martin-Löf type theory. Unlike traditional proofs of canonicity via non-synthetic Tait computability, the synthetic version is completely modular and broken up into general-purpose lemmas that are stated at a high level of abstraction and can be reused in proofs of <html:em>different properties</html:em> for <html:em>different type theories</html:em>. (Indeed, some of the constructions isolated in this chapter are used off the shelf in <fr:link href="/jms-0014/" title="Chapter 7: normalization for cubical type theory" uri="https://www.jonmsterling.com/jms-0014/" display-uri="jms-0014" type="local">Chapter 7</fr:link> to prove normalization for cubical type theory.) The modularization of syntactic metatheory is one of the main contributions of this dissertation.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0015/</fr:uri>
                <fr:display-uri>jms-0015</fr:display-uri>
                <fr:route>/jms-0015/</fr:route>
                <fr:title text="Chapter 5: synthetic normalization by evaluation">Chapter 5: synthetic normalization by evaluation</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This chapter develops a more sophisticated application of synthetic Tait computability, the proof of normalization and decidability of Martin-Löf’s type theory with a cumulative hierarchy of universes. The synthetic argument contained in this chapter builds on the work of <fr:link href="/fiore-2002/" title="Semantic analysis of normalisation by evaluation for typed lambda calculus" uri="https://www.jonmsterling.com/fiore-2002/" display-uri="fiore-2002" type="local">Fiore</fr:link> on categorical normalization by gluing for simply typed λ-calculus, and that of <fr:link href="/coquand-2019/" title="Canonicity and normalization for dependent type theory" uri="https://www.jonmsterling.com/coquand-2019/" display-uri="coquand-2019" type="local">Coquand</fr:link> on a presheaf-theoretic version of normalization by evaluation for dependent types. Analogous to the external argument of <fr:link href="/fiore-2002/" title="Semantic analysis of normalisation by evaluation for typed lambda calculus" uri="https://www.jonmsterling.com/fiore-2002/" display-uri="fiore-2002" type="local">Fiore</fr:link>, we construe the syntax of normal and neutral forms as the initial algebra for an internal inductive definition in the language of synthetic Tait computability. The influence of <fr:link href="/coquand-2019/" title="Canonicity and normalization for dependent type theory" uri="https://www.jonmsterling.com/coquand-2019/" display-uri="coquand-2019" type="local">Coquand</fr:link> is visible in the definition of the <html:em>Tait saturation yoga</html:em> for dependent types in the synthetic setting, an important closure condition for logical predicates that comprised one of the main innovations of <fr:link href="/tait-1967/" title="Intensional interpretations of functionals of finite type I" uri="https://www.jonmsterling.com/tait-1967/" display-uri="tait-1967" type="local">Tait</fr:link> in the context of simply typed combinators. Although this chapter is intended only as “dry run” for the main result (to be exposed in <fr:link href="/jms-0014/" title="Chapter 7: normalization for cubical type theory" uri="https://www.jonmsterling.com/jms-0014/" display-uri="jms-0014" type="local">Chapter 7</fr:link>), the normalization argument presented here has intrinsic value: it is the simplest and most direct proof of normalization and decidability for Martin-Löf type theory with <fr:tex display="inline"><![CDATA[\eta ]]></fr:tex>-laws and cumulative universes that has appeared in the literature so far.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0016/</fr:uri>
            <fr:display-uri>jms-0016</fr:display-uri>
            <fr:route>/jms-0016/</fr:route>
            <fr:title text="Part IV: cubical type theory">Part IV: cubical type theory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0017/</fr:uri>
                <fr:display-uri>jms-0017</fr:display-uri>
                <fr:route>/jms-0017/</fr:route>
                <fr:title text="Chapter 6: cartesian cubical type theory">Chapter 6: cartesian cubical type theory</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This expository chapter introduces cubical type theory as an extension to Martin-Löf’s type theory by an interval <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex> with two distinct endpoints <fr:tex display="inline"><![CDATA[0, 1 : \mathbb {I}]]></fr:tex>. The interval is a basic “figure” that defines a notion of <html:em>path</html:em> or <html:em>identification</html:em> <fr:tex display="inline"><![CDATA[{u}\mathrel {{\sim }_{A}}{v}]]></fr:tex> between two elements of any type; for instance, to identify <fr:tex display="inline"><![CDATA[u,v:A]]></fr:tex> is the same as to construct a function <fr:tex display="inline"><![CDATA[p:\mathbb {I}\to  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[p0 = u]]></fr:tex> and <fr:tex display="inline"><![CDATA[p1=v]]></fr:tex>. Terms involving <html:em>variables</html:em> of type <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex> can exhibit complex computational behavior that is difficult to account for: for instance, if <fr:tex display="inline"><![CDATA[p:{u}\mathrel {{\sim }_{A}}{v}]]></fr:tex> and <fr:tex display="inline"><![CDATA[i:\mathbb {I}]]></fr:tex> are variables, then the application <fr:tex display="inline"><![CDATA[pi:A]]></fr:tex> is a normal form, but it must nonetheless reduce to either <fr:tex display="inline"><![CDATA[u]]></fr:tex> or <fr:tex display="inline"><![CDATA[v]]></fr:tex> when <fr:tex display="inline"><![CDATA[i]]></fr:tex> is substituted for by a constant. Despite appearances, this scenario is fundamentally different from the way that <fr:tex display="inline"><![CDATA[pi]]></fr:tex> must reduce when <fr:tex display="inline"><![CDATA[p]]></fr:tex> is replaced
by a <fr:tex display="inline"><![CDATA[\lambda ]]></fr:tex>-abstraction, as normal forms must <html:em>a priori</html:em> be closed under arbitrary <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex>-substitutions — a necessity, because the normal form of an <fr:tex display="inline"><![CDATA[n]]></fr:tex>-cube must be an <fr:tex display="inline"><![CDATA[n]]></fr:tex>-cube of normal forms. One of the main technical contributions of this dissertation, introduced in the <fr:link href="/jms-0014/" title="Chapter 7: normalization for cubical type theory" uri="https://www.jonmsterling.com/jms-0014/" display-uri="jms-0014" type="local">next chapter</fr:link>, is to generalization of the notion of neutral form and the Tait saturation yoga that smoothly accommodates the problematic computational behavior of the interval.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0014/</fr:uri>
                <fr:display-uri>jms-0014</fr:display-uri>
                <fr:route>/jms-0014/</fr:route>
                <fr:title text="Chapter 7: normalization for cubical type theory">Chapter 7: normalization for cubical type theory</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This chapter reports the main result of the dissertation, normalization for cubical type theory and its corollaries: injectivity of type constructors, and <fr:link href="/jms-000T/" title="Decidability of cubical type theory" uri="https://www.jonmsterling.com/jms-000T/" display-uri="jms-000T" type="local">decidability of equality &amp; typing</fr:link>. These results were first obtained by <fr:link href="/sterling-angiuli-2021/" title="Normalization for cubical type theory" uri="https://www.jonmsterling.com/sterling-angiuli-2021/" display-uri="sterling-angiuli-2021" type="local">Sterling and Angiuli</fr:link> for the fragment of cubical type theory <html:em>without</html:em> universes; the present chapter extends the results of <html:em>op. cit.</html:em> to support a cumulative hierarchy of universes.</html:p>
                <html:p>The central innovation of this chapter is to generalize the notion of neutral form to accommodate the computational behavior of terms that have free variables of type <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex> discussed in our <fr:link href="/jms-0017/" title="Chapter 6: cartesian cubical type theory" uri="https://www.jonmsterling.com/jms-0017/" display-uri="jms-0017" type="local">synopsis of Chapter 6</fr:link>.  In the conventional account of neutral and normal forms, neutrals <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> are built up inductively from
<fr:tex display="inline"><![CDATA[x]]></fr:tex> for term variables <fr:tex display="inline"><![CDATA[x : A]]></fr:tex>, function applications to normal forms <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{\bullet }}}{{\color {DarkBlue}{m}}}]]></fr:tex>
and projections from neutral pairs <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}{\color {DarkRed}{.1}}]]></fr:tex>, <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}{\color {DarkRed}{.2}}]]></fr:tex>; our account of neutrals is much the same, except that each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> comes equipped with a <html:strong>“frontier
  of instability”</html:strong> <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }{{\color {DarkRed}{e}}}]]></fr:tex>, a predicate on its free <fr:tex display="inline"><![CDATA[\mathbb {I}]]></fr:tex>-variables that indicates when it “needs to compute further”. We think of a neutral form for an <fr:tex display="inline"><![CDATA[n]]></fr:tex>-cube as being <html:em>undefined</html:em> on its frontier of instability; the process of restricting a neutral to its frontier of instability is then referred to as <html:em>destabilization</html:em>.</html:p>
                <html:p>When <fr:tex display="inline"><![CDATA[x : A]]></fr:tex> is a variable of an ordinary type, the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }\,{\mathopen {}\left ({\color {DarkRed}{\mathsf {var}}}\,{x}\right )\mathclose {}}]]></fr:tex> is empty because variables never need to compute further. Where something new happens is the path type: given a neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}} : \mathsf {ne}\,{\mathopen {}\left ({u}\mathrel {{\sim }_{A}}{v}\right )\mathclose {}}]]></fr:tex>
of path type, we have for each term <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> a neutral form <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r} : \mathsf {ne}\,A]]></fr:tex> whose frontier of instability is defined like so:</html:p>
                <fr:tex display="block"><![CDATA[  \boldsymbol {\partial }\,{\mathopen {}\left ({{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r}\right )\mathclose {}}
=
\boldsymbol {\partial }{\color {DarkRed}{e}}
\lor 
{\mathopen {}\left (r=0\right )\mathclose {}}
\lor 
{\mathopen {}\left (r=1\right )\mathclose {}}
]]></fr:tex>
                <html:p>In other words, the path neutral application <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{e}}}\mathrel {{\color {DarkRed}{@}}}{r}]]></fr:tex> needs to compute as soon as e needs to compute, and as soon as the interval term <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> becomes equal to a constant. Prior to the introduction of the frontier of instability, the neutrals are embedded into the normals at base types unconditionally, i.e. for each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}} : \mathsf {ne}\,\mathsf {bool}]]></fr:tex>, we have a normal form <fr:tex display="inline"><![CDATA[{\color {DarkBlue}{\lfloor }}{e}{\color {DarkBlue}{\rfloor }} : \mathsf {nf}\,\mathsf {bool}]]></fr:tex>.</html:p>
                <html:p>Now that neutrals are equipped with frontiers of instability, a more refined notion of normal form is needed: when <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> is a neutral form, the corresponding normal form should contain (recursively) normal forms for <fr:tex display="inline"><![CDATA[e]]></fr:tex> that are defined under the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }\,{\color {DarkRed}{e}}]]></fr:tex>. To be more concrete,
let <fr:tex display="inline"><![CDATA[x : {\mathsf {tt}}\mathrel {{\sim }_{\mathsf {bool}}}{\mathsf {tt}}]]></fr:tex> be a variable of path type and <fr:tex display="inline"><![CDATA[r : \mathbb {I}]]></fr:tex> is a term; then <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r}:\mathsf {ne}\,{\mathopen {}\left ({\mathsf {tt}}\mathrel {{\sim }_{\mathsf {bool}}}{\mathsf {tt}}\right )\mathclose {}}]]></fr:tex> is a neutral form for the term <fr:tex display="inline"><![CDATA[xr]]></fr:tex> whose frontier of instability is the boundary <fr:tex display="inline"><![CDATA[(r = 0) \lor  (r = 1)]]></fr:tex>; the corresponding normal form must therefore glue onto <fr:tex display="inline"><![CDATA[{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r}]]></fr:tex> additional normal forms for <fr:tex display="inline"><![CDATA[x0]]></fr:tex> and
<fr:tex display="inline"><![CDATA[x1]]></fr:tex>. We refer to the process of completing a neutral with additional data defined on its frontier of instability as stabilization; the <html:em>stabilized</html:em> normal form of <fr:tex display="inline"><![CDATA[xr]]></fr:tex> is then written</html:p>
                <fr:tex display="block"><![CDATA[ {\color {DarkBlue}{\lfloor }}{{{\color {DarkRed}{\mathsf {var}}}\,x}\mathrel {{\color {DarkRed}{@}}}{r} \mid  r = 0 \hookrightarrow  {\color {DarkBlue}{\mathsf {tt}}}, r = 1 \hookrightarrow {\color {DarkBlue}{\mathsf {tt}}}}{\color {DarkBlue}{\rfloor }} ]]></fr:tex>
                <html:p>where <fr:tex display="inline"><![CDATA[{\color {DarkBlue}{\mathsf {tt}}}]]></fr:tex> is the normal form representing the term <fr:tex display="inline"><![CDATA[\mathsf {tt}]]></fr:tex></html:p>
                <html:p>Just as the embedding of neutrals into normals is “stabilized” by a com patible normal form defined on the neutral’s frontier of instability, so too must the Tait saturation yoga be adjusted. Conventionally one requires the computability predicate for a type <fr:tex display="inline"><![CDATA[A]]></fr:tex> to be equipped with a function that takes neutral forms <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> of terms <fr:tex display="inline"><![CDATA[e : A]]></fr:tex> to computability witnesses for the same term. In the <html:strong>stabilized Tait saturation yoga</html:strong>, we strengthen the induction hypothesis to require for each neutral form <fr:tex display="inline"><![CDATA[{\color {DarkRed}{e}}]]></fr:tex> a function that extends a computability witness defined only on the frontier of instability <fr:tex display="inline"><![CDATA[\boldsymbol {\partial }{\color {DarkRed}{e}}]]></fr:tex> to a computability witnessed defined everywhere</html:p>
                <html:p>The twin innovations of <html:em>frontiers of instability</html:em> and <html:em>stabilization</html:em> then suffice to adapt the synthetic normalization argument of <fr:link href="/jms-0015/" title="Chapter 5: synthetic normalization by evaluation" uri="https://www.jonmsterling.com/jms-0015/" display-uri="jms-0015" type="local">Chapter 5</fr:link> to a proof of normalization (and thus decidability) for cubical type theory.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0018/</fr:uri>
            <fr:display-uri>jms-0018</fr:display-uri>
            <fr:route>/jms-0018/</fr:route>
            <fr:title text="Part V: prospects">Part V: prospects</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0019/</fr:uri>
                <fr:display-uri>jms-0019</fr:display-uri>
                <fr:route>/jms-0019/</fr:route>
                <fr:title text="Chapter 8: a plan for PL">Chapter 8: a plan for PL</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>This dissertation has focused almost solely on the development and applications of synthetic Tait computability in the context of pure type theory, but the author originally invented synthetic Tait computability to solve problems in core programming languages, as part of <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Sterling and Harper</fr:link>’s re-analysis of the <html:em>phase distinction</html:em> in <fr:link href="/harper-mitchell-moggi-1990/" title="Higher-order modules and the phase distinction" uri="https://www.jonmsterling.com/harper-mitchell-moggi-1990/" display-uri="harper-mitchell-moggi-1990" type="local">ML-style</fr:link> <fr:link href="/moggi-1989/" title="A category-theoretic account of program modules" uri="https://www.jonmsterling.com/moggi-1989/" display-uri="moggi-1989" type="local">module systems</fr:link> between static (compiletime) and dynamic (runtime) code. The purpose of this chapter is to identify several applications of synthetic Tait computability to core programming languages, and set an agenda for future work — some of which has been executed and published following the completion of this dissertation</html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>1</fr:month>
                      <fr:day>19</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001A/</fr:uri>
                    <fr:display-uri>jms-001A</fr:display-uri>
                    <fr:route>/jms-001A/</fr:route>
                    <fr:title text="§ 8.1: two phase distinctions for program modules">§ 8.1: two phase distinctions for program modules</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>A brief overview is given of the applications of synthetic Tait computability to program modules, material that is published in the <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Journal of the ACM</fr:link>.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>1</fr:month>
                      <fr:day>19</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001B/</fr:uri>
                    <fr:display-uri>jms-001B</fr:display-uri>
                    <fr:route>/jms-001B/</fr:route>
                    <fr:title text="§ 8.2: type refinements and program extraction">§ 8.2: type refinements and program extraction</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>The modal language of synthetic Tait computability promises a new and more abstract account of <html:em>refinement types</html:em> and <html:em>program extraction</html:em> via a phase distinction between <html:em>computation</html:em> and <html:em>specification</html:em>. Refinement types are often thought of as a kind of subtype, but there is a fundamental difference: when <fr:tex display="inline"><![CDATA[{\phi }\sqsubset {A}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{\psi }\sqsubset {B}]]></fr:tex> are refinements of types <fr:tex display="inline"><![CDATA[A]]></fr:tex> and <fr:tex display="inline"><![CDATA[B]]></fr:tex> respectively, then <fr:tex display="inline"><![CDATA[\phi \to \psi ]]></fr:tex> refines <fr:tex display="inline"><![CDATA[A\to  B]]></fr:tex>. In contrast, subtyping laws for function spaces are contravariant in the domain. The refinements available in synthetic Tait computability are moreover proof-relevant in the sense that specification-level code can contain data in addition to properties. The application to proof-relevant refinement types is employed by <fr:link href="/niu-sterling-grodin-harper-2022/" title="A cost-aware logical framework" uri="https://www.jonmsterling.com/niu-sterling-grodin-harper-2022/" display-uri="niu-sterling-grodin-harper-2022" type="local">Niu, Sterling, Grodin, and Harper</fr:link> to develop a logical framework for simultaneously verifying behavior and complexity of functional programs.</html:p>
                  </fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>1</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001C/</fr:uri>
                    <fr:display-uri>jms-001C</fr:display-uri>
                    <fr:route>/jms-001C/</fr:route>
                    <fr:title text="§ 8.3: information-flow and noninterference">§ 8.3: information-flow and noninterference</fr:title>
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <html:p>Finally, an application of synthetic Tait computability to <html:em>security</html:em> and <html:em>information flow control</html:em> is identified: a security class is a phase distinction between low and high security. The preliminary results presented in this section have been substantially improved upon by <fr:link href="/sterling-harper-2022/" title="Sheaf semantics of termination-insensitive noninterference" uri="https://www.jonmsterling.com/sterling-harper-2022/" display-uri="sterling-harper-2022" type="local">Sterling and Harper</fr:link>, adding support for general recursion and termination-insensitive noninterference by combining synthetic Tait computability with <fr:link href="/hyland-1991/" title="First steps in synthetic domain theory" uri="https://www.jonmsterling.com/hyland-1991/" display-uri="hyland-1991" type="local">synthetic domain theory</fr:link>.</html:p>
                  </fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/yueniu/" title="Yue Niu" uri="https://www.jonmsterling.com/yueniu/" display-uri="yueniu" type="local">Yue Niu</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/harrisongrodin/" title="Harrison Grodin" uri="https://www.jonmsterling.com/harrisongrodin/" display-uri="harrisongrodin" type="local">Harrison Grodin</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2022</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/niu-sterling-grodin-harper-2022/</fr:uri>
            <fr:display-uri>niu-sterling-grodin-harper-2022</fr:display-uri>
            <fr:route>/niu-sterling-grodin-harper-2022/</fr:route>
            <fr:title text="A cost-aware logical framework">A cost-aware logical framework</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue"><fr:link href="/pacmpl/" title="Proceedings of the ACM on Programming Languages" uri="https://www.jonmsterling.com/pacmpl/" display-uri="pacmpl" type="local">Proceedings of the ACM on Programming Languages</fr:link>, Volume 6, Issue POPL</fr:meta>
            <fr:meta name="doi">10.1145/3498670</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We present calf, a cost-aware logical framework for studying quantitative aspects of functional programs. Taking inspiration from recent work that reconstructs traditional aspects of programming languages in terms of a modal account of phase distinctions, we argue that the cost structure of programs motivates a phase distinction between intension and extension. Armed with this technology, we contribute a synthetic account of cost structure as a computational effect in which cost-aware programs enjoy an internal noninterference property: input/output behavior cannot depend on cost. As a full-spectrum dependent type theory, calf presents a unified language for programming and specification of both cost and behavior that can be integrated smoothly with existing mathematical libraries available in type theoretic proof assistants.</html:p>
            <html:p>We evaluate calf as a general framework for cost analysis by implementing two fundamental techniques for algorithm analysis: the method of recurrence relations and physicist’s method for amortized analysis. We deploy these techniques on a variety of case studies: we prove a tight, closed bound for Euclid’s algorithm, verify the amortized complexity of batched queues, and derive tight, closed bounds for the sequential and parallel complexity of merge sort, all fully mechanized in the Agda proof assistant. Lastly we substantiate the soundness of quantitative reasoning in calf by means of a model construction.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2022</fr:year>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-harper-2022/</fr:uri>
            <fr:display-uri>sterling-harper-2022</fr:display-uri>
            <fr:route>/sterling-harper-2022/</fr:route>
            <fr:title text="Sheaf semantics of termination-insensitive noninterference">Sheaf semantics of termination-insensitive noninterference</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.4230/LIPIcs.FSCD.2022.5</fr:meta>
            <fr:meta name="venue">7th International Conference on Formal Structures for Computation and Deduction (FSCD 2022)</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We propose a new sheaf semantics for secure information flow over a space of abstract behaviors, based on synthetic domain theory: security classes are open/closed partitions, types are sheaves, and redaction of sensitive information corresponds to restricting a sheaf to a closed subspace. Our security-aware computational model satisfies termination-insensitive noninterference automatically, and therefore constitutes an intrinsic alternative to state of the art extrinsic/relational models of noninterference. Our semantics is the latest application of <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Sterling and Harper</fr:link>’s recent re-interpretation of phase distinctions and noninterference in programming languages in terms of Artin gluing and topos-theoretic open/closed modalities. Prior applications include <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">parametricity for ML modules</fr:link>, the proof of normalization for cubical type theory by <fr:link href="/sterling-angiuli-2021/" title="Normalization for cubical type theory" uri="https://www.jonmsterling.com/sterling-angiuli-2021/" display-uri="sterling-angiuli-2021" type="local">Sterling and Angiuli</fr:link>, and the cost-aware logical framework of <fr:link href="/niu-sterling-grodin-harper-2022/" title="A cost-aware logical framework" uri="https://www.jonmsterling.com/niu-sterling-grodin-harper-2022/" display-uri="niu-sterling-grodin-harper-2022" type="local">Niu et al</fr:link>. In this paper we employ the phase distinction perspective twice: first to reconstruct the syntax and semantics of secure information flow as a lattice of phase distinctions between “higher” and “lower” security, and second to verify the computational adequacy of our sheaf semantics with respect to a version of Abadi et al.’s dependency core calculus to which we have added a construct for declassifying termination channels.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-005Y/</fr:uri>
                <fr:display-uri>jms-005Y</fr:display-uri>
                <fr:route>/jms-005Y/</fr:route>
                <fr:title text="Minor mistakes in sheaf semantics of noninterference">Minor mistakes in <fr:link href="/sterling-harper-2022/" title="Sheaf semantics of termination-insensitive noninterference" uri="https://www.jonmsterling.com/sterling-harper-2022/" display-uri="sterling-harper-2022" type="local">sheaf semantics of noninterference</fr:link></fr:title>
                <fr:taxon>Erratum</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>In the published version of this paper, there were a few mistakes that have been corrected in the local copy hosted here.</html:p>
                <html:ol><html:li>In the <html:em>Critique of relational semantics for information flow</html:em>, our discussion of the <html:em>Failure of monotonicity</html:em> stated incorrectly that algebras for the sealing monad at a higher security level could not be transformed into algebras for the sealing monad at a lower security level in the semantics of Abadi et al. This is not true, as pointed out to us privately by Carlos Tomé Cortiñas. What we meant to say was that it is not the case that a type whose component at a high security level is trivial shall always remain trivial at a lower security level.</html:li>
  <html:li>The original version of the extended edition of this paper, we claimed that the constructive existence of tensor products on pointed dcpos was obvious; in fact, tensor products do exist, but their construction involves a reflexive coequalizer of pointed dcpos.</html:li></html:ol>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>7</fr:month>
                  <fr:day>17</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-005Z/</fr:uri>
                <fr:display-uri>jms-005Z</fr:display-uri>
                <fr:route>/jms-005Z/</fr:route>
                <fr:title text="Adequacy of sheaf semantics of noninterference">Adequacy of <fr:link href="/sterling-harper-2022/" title="Sheaf semantics of termination-insensitive noninterference" uri="https://www.jonmsterling.com/sterling-harper-2022/" display-uri="sterling-harper-2022" type="local">sheaf semantics of noninterference</fr:link></fr:title>
                <fr:taxon>Erratum</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>A serious (and as-yet unfixed) problem was discovered in July of 2023 by <fr:link href="/yueniu/" title="Yue Niu" uri="https://www.jonmsterling.com/yueniu/" display-uri="yueniu" type="local">Yue Niu</fr:link>, which undermines the proof of adequacy given; in particular, the proof that the logical relation on free algebras is admissible is not correct. I believe there is a different proof of adequacy for the calculus described, but it will have a different structure from what currently appears in the paper. We thank <fr:link href="/yueniu/" title="Yue Niu" uri="https://www.jonmsterling.com/yueniu/" display-uri="yueniu" type="local">Yue Niu</fr:link> for his attention to detail and careful reading of this paper.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>12</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-harper-2021/</fr:uri>
            <fr:display-uri>sterling-harper-2021</fr:display-uri>
            <fr:route>/sterling-harper-2021/</fr:route>
            <fr:title text="Logical relations as types: proof-relevant parametricity for program modules">Logical relations as types: proof-relevant parametricity for program modules</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue"><fr:link href="/jacm/" title="Journal of the ACM" uri="https://www.jonmsterling.com/jacm/" display-uri="jacm" type="local">Journal of the ACM</fr:link>, Volume 68, Issue 6</fr:meta>
            <fr:meta name="doi">10.1145/3474834</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The theory of program modules is of interest to language designers not only for its practical importance to programming, but also because it lies at the nexus of three fundamental concerns in language design: the <html:em>phase distinction</html:em>, <html:em>computational effects</html:em>, and <html:em>type abstraction</html:em>. We contribute a fresh “synthetic” take on program modules that treats modules as the fundamental constructs, in which the usual suspects of prior module calculi (kinds, constructors, dynamic programs) are rendered as derived notions in terms of a modal type-theoretic account of the phase distinction. We simplify the account of type abstraction (embodied in the generativity of module functors) through a <html:em>lax modality</html:em> that encapsulates computational effects, placing <html:em>projectibility</html:em> of module expressions on a type-theoretic basis.</html:p>
            <html:p>Our main result is a (significant) proof-relevant and phase-sensitive generalization of the Reynolds abstraction theorem for a calculus of program modules, based on a new kind of logical relation called a <html:em>parametricity structure</html:em>. Parametricity structures generalize the proof-irrelevant relations of classical parametricity to proof-<html:em>relevant</html:em> families, where there may be non-trivial evidence witnessing the relatedness of two programs—simplifying the metatheory of strong sums over the collection of types, for although there can be no “relation classifying relations,” one easily accommodates a “family classifying small families.”</html:p>
            <html:p>Using the insight that logical relations/parametricity is itself a form of phase distinction between the syntactic and the semantic, we contribute a new synthetic approach to phase separated parametricity based on the slogan <html:em>logical relations as types</html:em>, by iterating our modal account of the phase distinction. We axiomatize a dependent type theory of parametricity structures using two pairs of complementary modalities (syntactic, semantic) and (static, dynamic), substantiated using the topos theoretic <html:em>Artin gluing</html:em> construction. Then, to construct a simulation between two implementations of an abstract type, one simply programs a third implementation whose type component carries the representation invariant.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2021</fr:year>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-0060/</fr:uri>
                <fr:display-uri>jms-0060</fr:display-uri>
                <fr:route>/jms-0060/</fr:route>
                <fr:title text="Minor mistakes in logical relations as types">Minor mistakes in <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">logical relations as types</fr:link></fr:title>
                <fr:taxon>Erratum</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>After going to press, we have fixed the following mistakes:</html:p>
                <html:ol><html:li>In the definition of a logos, we mistakenly said that "colimits commute with finite limits" but we meant to say that they are preserved by pullback. We thank <fr:link href="/sarahzrf/" title="Sarah Z. Rovner-Frydman" uri="https://www.jonmsterling.com/sarahzrf/" display-uri="sarahzrf" type="local">Sarah Z. Rovner-Frydman</fr:link> for noticing this mistake.</html:li>
  <html:li>In Remark 5.15, we used the notation for the closed immersion prior to introducing it.</html:li>
  <html:li>We have fixed a few broken links in the bibliography.</html:li></html:ol>
                <html:p>The local copy hosted here has the corrections implemented</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>9</fr:month>
              <fr:day>13</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-2021-thesis/</fr:uri>
            <fr:display-uri>sterling-2021-thesis</fr:display-uri>
            <fr:route>/sterling-2021-thesis/</fr:route>
            <fr:title text="First steps in synthetic Tait computability: the objective metatheory of cubical type theory">First steps in synthetic Tait computability: the objective metatheory of cubical type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue">Doctoral dissertation, <fr:link href="/cmu/" title="Carnegie Mellon University" uri="https://www.jonmsterling.com/cmu/" display-uri="cmu" type="local">Carnegie Mellon University</fr:link></fr:meta>
            <fr:meta name="bibtex"><![CDATA[@phdthesis{sterling-2021-thesis,
  author = {Sterling, Jonathan},
  school = {Carnegie Mellon University},
  year = {2021},
  doi = {10.5281/zenodo.6990769},
  note = {Version 1.1, revised May 2022},
  number = {CMU-CS-21-142},
  title = {First Steps in Synthetic {Tait} Computability: The Objective Metatheory of Cubical Type Theory},
}]]></fr:meta>
            <fr:meta name="doi">10.5281/zenodo.6990769</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The implementation and semantics of dependent type theories can be studied in a syntax-independent way: the objective metatheory of dependent type theories exploits the universal properties of their syntactic categories to endow them with computational content, mathematical meaning, and practical implementation (normalization, type checking, elaboration). The semantic methods of the objective metatheory inform the design and implementation of correct-by-construction elaboration algorithms, promising a principled interface between real proof assistants and ideal mathematics.</html:p>
            <html:p>In this dissertation, I add synthetic Tait computability to the arsenal of the objective metatheorist. Synthetic Tait computability is a mathematical machine to reduce difficult problems of type theory and programming languages to trivial theorems of topos theory. First employed by <fr:link href="/sterling-harper-2021/" title="Logical relations as types: proof-relevant parametricity for program modules" uri="https://www.jonmsterling.com/sterling-harper-2021/" display-uri="sterling-harper-2021" type="local">Sterling and Harper</fr:link> to reconstruct the theory of program modules and their phase separated parametricity, synthetic Tait computability is deployed here to resolve the last major open question in the syntactic metatheory of cubical type theory: normalization of open terms.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/carloangiuli/" title="Carlo Angiuli" uri="https://www.jonmsterling.com/carloangiuli/" display-uri="carloangiuli" type="local">Carlo Angiuli</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>7</fr:month>
              <fr:day>7</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-angiuli-2021/</fr:uri>
            <fr:display-uri>sterling-angiuli-2021</fr:display-uri>
            <fr:route>/sterling-angiuli-2021/</fr:route>
            <fr:title text="Normalization for cubical type theory">Normalization for cubical type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue">2021 36th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)</fr:meta>
            <fr:meta name="doi">10.1109/LICS52264.2021.9470719</fr:meta>
            <fr:meta name="external">https://arxiv.org/abs/2101.11479</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We prove normalization for (univalent, Cartesian) cubical type theory, closing the last major open problem in the syntactic metatheory of cubical type theory. Our normalization result is reduction-free, in the sense of yielding a bijection between equivalence classes of terms in context and a tractable language of <fr:tex display="inline"><![CDATA[\beta ]]></fr:tex>/<fr:tex display="inline"><![CDATA[\eta ]]></fr:tex>-normal forms. As corollaries we obtain both decidability of judgmental equality and the injectivity of type constructors.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/carloangiuli/" title="Carlo Angiuli" uri="https://www.jonmsterling.com/carloangiuli/" display-uri="carloangiuli" type="local">Carlo Angiuli</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/guillaumebrunerie/" title="Guillaume Brunerie" uri="https://www.jonmsterling.com/guillaumebrunerie/" display-uri="guillaumebrunerie" type="local">Guillaume Brunerie</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/thierrycoquand/" title="Thierry Coquand" uri="https://www.jonmsterling.com/thierrycoquand/" display-uri="thierrycoquand" type="local">Thierry Coquand</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/favonia/" title="Kuen-Bang Hou (Favonia)" uri="https://www.jonmsterling.com/favonia/" display-uri="favonia" type="local">Kuen-Bang Hou (Favonia)</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/danlicata/" title="Daniel R. Licata" uri="https://www.jonmsterling.com/danlicata/" display-uri="danlicata" type="local">Daniel R. Licata</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>4</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/abchfl-2021/</fr:uri>
            <fr:display-uri>abchfl-2021</fr:display-uri>
            <fr:route>/abchfl-2021/</fr:route>
            <fr:title text="Syntax and models of Cartesian cubical type theory">Syntax and models of Cartesian cubical type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We present a cubical type theory based on the Cartesian cube category (faces, degeneracies, symmetries, diagonals, but no connections or reversal) with univalent universes, each containing <fr:tex display="inline"><![CDATA[\Pi ]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>, path, identity, natural number, boolean, suspension, and glue (equivalence extension) types. The type theory includes a syntactic description of a uniform Kan operation, along with judgmental equality rules defining the Kan operation on each type. The Kan operation uses both a different set of generating trivial cofibrations and a different set of generating cofibrations than the Cohen, Coquand, Huber, and Mörtberg (CCHM) model. Next, we describe a constructive model of this type theory in Cartesian cubical sets. We give a mechanized proof, using Agda as the internal language of cubical sets in the style introduced by Orton and Pitts, that glue, <fr:tex display="inline"><![CDATA[\Pi ]]></fr:tex>, <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>, path, identity, boolean, natural number, suspension types, and the universe itself are Kan in this model, and that the universe is univalent. An advantage of this formal approach is that our construction can also be interpreted in a range of other models, including cubical sets on the connections cube category and the De Morgan cube category, as used in the CCHM model, and bicubical sets, as used in directed type theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/carloangiuli/" title="Carlo Angiuli" uri="https://www.jonmsterling.com/carloangiuli/" display-uri="carloangiuli" type="local">Carlo Angiuli</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/evancavallo/" title="Evan Cavallo" uri="https://www.jonmsterling.com/evancavallo/" display-uri="evancavallo" type="local">Evan Cavallo</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/andersm%C3%B6rtberg/" title="Anders Mörtberg" uri="https://www.jonmsterling.com/andersmörtberg/" display-uri="andersmörtberg" type="local">Anders Mörtberg</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/maxzeuner/" title="Max Zeuner" uri="https://www.jonmsterling.com/maxzeuner/" display-uri="maxzeuner" type="local">Max Zeuner</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>1</fr:month>
              <fr:day>4</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/acmz-2021/</fr:uri>
            <fr:display-uri>acmz-2021</fr:display-uri>
            <fr:route>/acmz-2021/</fr:route>
            <fr:title text="Internalizing representation independence with univalence">Internalizing representation independence with univalence</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1145/3434293</fr:meta>
            <fr:meta name="venue"><fr:link href="/pacmpl/" title="Proceedings of the ACM on Programming Languages" uri="https://www.jonmsterling.com/pacmpl/" display-uri="pacmpl" type="local">Proceedings of the ACM on Programming Languages</fr:link>, Volume 5, Issue POPL</fr:meta>
            <fr:meta name="bibtex"><![CDATA[@article{acmz-2021,
  author = {Angiuli, Carlo and Cavallo, Evan and M\"{o}rtberg, Anders and Zeuner, Max},
  address = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  year = {2021},
  month = jan,
  doi = {10.1145/3434293},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {Proof Assistants,Higher Inductive Types,Cubical Type Theory,Univalence,Representation Independence},
  number = {POPL},
  pages = {1--30},
  title = {Internalizing Representation Independence with Univalence},
  volume = {5},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>In their usual form, representation independence metatheorems provide an external guarantee that two implementations of an abstract interface are interchangeable when they are related by an operation-preserving correspondence. If our programming language is dependently-typed, however, we would like to appeal to such invariance results within the language itself, in order to obtain correctness theorems for complex implementations by transferring them from simpler, related implementations. Recent work in proof assistants has shown that Voevodsky’s univalence principle allows transferring theorems between isomorphic types, but many instances of representation independence in programming involve non-isomorphic representations.</html:p>
            <html:p>In this paper, we develop techniques for establishing internal relational representation independence results in dependent type theory, by using higher inductive types to simultaneously quotient two related implementation types by a heterogeneous correspondence between them. The correspondence becomes an isomorphism between the quotiented types, thereby allowing us to obtain an equality of implementations by univalence. We illustrate our techniques by considering applications to matrices, queues, and finite multisets. Our results are all formalized in Cubical Agda, a recent extension of Agda which supports univalence and higher inductive types in a computationally well-behaved way.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/carloangiuli/" title="Carlo Angiuli" uri="https://www.jonmsterling.com/carloangiuli/" display-uri="carloangiuli" type="local">Carlo Angiuli</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2019</fr:year>
              <fr:month>9</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/angiuli-2019/</fr:uri>
            <fr:display-uri>angiuli-2019</fr:display-uri>
            <fr:route>/angiuli-2019/</fr:route>
            <fr:title text="Computational semantics of cartesian cubical type theory">Computational semantics of cartesian cubical type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="external">https://www.cs.cmu.edu/~cangiuli/thesis/thesis.pdf</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Dependent type theories are a family of logical systems that serve as expressive functional programming languages and as the basis of many proof assistants. In the past decade, type theories have also attracted the attention of mathematicians due to surprising connections with homotopy theory the study of these connections, known as homotopy type theory, has in turn suggested novel extensions to type theory, including higher inductive types and Voevodskys univalence axiom. However, in their original axiomatic presentation, these extensions lack computational content, making them unusable as programming constructs and unergonomic in proof assistants.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/thierrycoquand/" title="Thierry Coquand" uri="https://www.jonmsterling.com/thierrycoquand/" display-uri="thierrycoquand" type="local">Thierry Coquand</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2019</fr:year>
              <fr:month>6</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/coquand-2019/</fr:uri>
            <fr:display-uri>coquand-2019</fr:display-uri>
            <fr:route>/coquand-2019/</fr:route>
            <fr:title text="Canonicity and normalization for dependent type theory">Canonicity and normalization for dependent type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1016/j.tcs.2019.01.015</fr:meta>
            <fr:meta name="venue">Theoretical Computer Science</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/mikeshulman/" title="Mike Shulman" uri="https://www.jonmsterling.com/mikeshulman/" display-uri="mikeshulman" type="local">Mike Shulman</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2019</fr:year>
              <fr:month>4</fr:month>
              <fr:day>15</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/shulman-2019/</fr:uri>
            <fr:display-uri>shulman-2019</fr:display-uri>
            <fr:route>/shulman-2019/</fr:route>
            <fr:title text="All (∞,1)-toposes have strict univalent universes">All (∞,1)-toposes have strict univalent universes</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.48550/arXiv.1904.07004</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We prove the conjecture that any Grothendieck (<fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>,1)-topos can be presented by a Quillen model category that interprets homotopy type theory with strict univalent universes. Thus, homotopy type theory can be used as a formal language for reasoning internally to (<fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>,1)-toposes, just as higher-order logic is used for 1-toposes. As part of the proof, we give a new, more explicit, characterization of the fibrations in injective model structures on presheaf categories. In particular, we show that they generalize the coflexible algebras of 2-monad theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/carloangiuli/" title="Carlo Angiuli" uri="https://www.jonmsterling.com/carloangiuli/" display-uri="carloangiuli" type="local">Carlo Angiuli</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/favonia/" title="Kuen-Bang Hou (Favonia)" uri="https://www.jonmsterling.com/favonia/" display-uri="favonia" type="local">Kuen-Bang Hou (Favonia)</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2018</fr:year>
              <fr:month>8</fr:month>
              <fr:day>29</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/angiuli-favonia-harper-2018/</fr:uri>
            <fr:display-uri>angiuli-favonia-harper-2018</fr:display-uri>
            <fr:route>/angiuli-favonia-harper-2018/</fr:route>
            <fr:title text="Cartesian cubical computational type theory: constructive reasoning with paths and equalities">Cartesian cubical computational type theory: constructive reasoning with paths and equalities</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.4230/LIPIcs.CSL.2018.6</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We present a dependent type theory organized around a Cartesian notion of cubes (with faces, degeneracies, and diagonals), supporting both fibrant and non-fibrant types. The fibrant fragment validates Voevodsky’s univalence axiom and includes a circle type, while the non-fibrant fragment includes exact (strict) equality types satisfying equality reflection. Our type theory is defined by a semantics in cubical partial equivalence relations, and is the first two-level type theory to satisfy the canonicity property: all closed terms of boolean type evaluate to either true or false.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/simonhuber/" title="Simon Huber" uri="https://www.jonmsterling.com/simonhuber/" display-uri="simonhuber" type="local">Simon Huber</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2018</fr:year>
              <fr:month>6</fr:month>
              <fr:day>13</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/huber-2018/</fr:uri>
            <fr:display-uri>huber-2018</fr:display-uri>
            <fr:route>/huber-2018/</fr:route>
            <fr:title text="Canonicity for cubical type theory">Canonicity for cubical type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1007/s10817-018-9469-1</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Cubical type theory is an extension of Martin-Löf type theory recently proposed by <fr:link href="/cchm-2017/" title="Cubical type theory: a constructive interpretation of the univalence axiom" uri="https://www.jonmsterling.com/cchm-2017/" display-uri="cchm-2017" type="local">Cohen, Coquand, Mörtberg, and the author</fr:link> which allows for direct manipulation of n-dimensional cubes and where Voevodsky’s Univalence Axiom is provable. In this paper we prove canonicity for cubical type theory: any natural number in a context build from only name variables is judgmentally equal to a numeral. To achieve this we formulate a typed and deterministic operational semantics and employ a computability argument adapted to a presheaf-like setting.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/cyrilcohen/" title="Cyril Cohen" uri="https://www.jonmsterling.com/cyrilcohen/" display-uri="cyrilcohen" type="local">Cyril Cohen</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/thierrycoquand/" title="Thierry Coquand" uri="https://www.jonmsterling.com/thierrycoquand/" display-uri="thierrycoquand" type="local">Thierry Coquand</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/simonhuber/" title="Simon Huber" uri="https://www.jonmsterling.com/simonhuber/" display-uri="simonhuber" type="local">Simon Huber</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/andersm%C3%B6rtberg/" title="Anders Mörtberg" uri="https://www.jonmsterling.com/andersmörtberg/" display-uri="andersmörtberg" type="local">Anders Mörtberg</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2017</fr:year>
              <fr:month>11</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/cchm-2017/</fr:uri>
            <fr:display-uri>cchm-2017</fr:display-uri>
            <fr:route>/cchm-2017/</fr:route>
            <fr:title text="Cubical type theory: a constructive interpretation of the univalence axiom">Cubical type theory: a constructive interpretation of the univalence axiom</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="external">https://arxiv.org/abs/1611.02108</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>The Univalent Foundations Program</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2013</fr:year>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/hottbook/</fr:uri>
            <fr:display-uri>hottbook</fr:display-uri>
            <fr:route>/hottbook/</fr:route>
            <fr:title text="Homotopy Type Theory: univalent foundations of mathematics">Homotopy Type Theory: univalent foundations of mathematics</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="external">https://homotopytypetheory.org/book</fr:meta>
            <fr:meta name="venue">
              <fr:link href="/ias-special-year/" title="IAS Special Year on Univalent Foundations" uri="https://www.jonmsterling.com/ias-special-year/" display-uri="ias-special-year" type="local">IAS Special Year on Univalent Foundations</fr:link>
            </fr:meta>
            <fr:meta name="bibtex"><![CDATA[@book{hottbook,
  author = {{Univalent Foundations Program}, The},
  address = {Institute for Advanced Study},
  publisher = {\url{https://homotopytypetheory.org/book}},
  year = {2013},
  title = {Homotopy Type Theory: Univalent Foundations of Mathematics},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Homotopy type theory is a new branch of mathematics that combines aspects of several different fields in a surprising way. It is based on a recently discovered connection between homotopy theory and type theory. It touches on topics as seemingly distant as the homotopy groups of spheres, the algorithms for type checking, and the definition of weak <fr:tex display="inline"><![CDATA[\infty ]]></fr:tex>-groupoids. Homotopy type theory offers a new “univalent” foundation of mathematics, in which a central role is played by <fr:link href="/vladimirvoevodsky/" title="Vladimir Voevodsky" uri="https://www.jonmsterling.com/vladimirvoevodsky/" display-uri="vladimirvoevodsky" type="local">Voevodsky</fr:link>’s univalence axiom and higher inductive types. The present book is intended as a first systematic exposition of the basics of univalent foundations, and a collection of examples of this new style of reasoning — but without requiring the reader to know or learn any formal logic, or to use any computer proof assistant. We believe that univalent foundations will eventually become a viable alternative to set theory as the “implicit foundation” for the unformalized mathematics done by most mathematicians.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/fwlawvere/" title="F. William Lawvere" uri="https://www.jonmsterling.com/fwlawvere/" display-uri="fwlawvere" type="local">F. William Lawvere</fr:link>
              </fr:author>
              <fr:author>Stephen H. Schanuel</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2009</fr:year>
              <fr:month>8</fr:month>
              <fr:day>31</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/lawvere-schanuel-2009/</fr:uri>
            <fr:display-uri>lawvere-schanuel-2009</fr:display-uri>
            <fr:route>/lawvere-schanuel-2009/</fr:route>
            <fr:title text="Conceptual mathematics: a first introduction to categories">Conceptual mathematics: a first introduction to categories</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.5555/1594905</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>In the last 60 years, the use of the notion of category has led to a remarkable unification and simplification of mathematics. Conceptual Mathematics, Second Edition, introduces the concept of ‘category’ for the learning, development, and use of mathematics, to both beginning students and general readers, and to practicing mathematical scientists. The treatment does not presuppose knowledge of specific fields, but rather develops, from basic definitions, such elementary categories as discrete dynamical systems and directed graphs; the fundamental ideas are then illuminated by examples in these categories.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/steveawodey/" title="Steve Awodey" uri="https://www.jonmsterling.com/steveawodey/" display-uri="steveawodey" type="local">Steve Awodey</fr:link>
              </fr:author>
              <fr:author>Michael A. Warren</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2009</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/awodey-warren-2009/</fr:uri>
            <fr:display-uri>awodey-warren-2009</fr:display-uri>
            <fr:route>/awodey-warren-2009/</fr:route>
            <fr:title text="Homotopy theoretic models of identity types">Homotopy theoretic models of identity types</fr:title>
            <fr:taxon>Reference</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Quillen introduced model categories as an abstract framework for homotopy theory which would apply to a wide range of mathematical settings. By all accounts this program has been a success and — as, e.g., the work of Voevodsky on the homotopy theory of schemes or the work of Joyal and Lurie on quasicategories seem to indicate—it will likely continue to facilitate mathematical advances. In this paper we present a novel connection between model categories and mathematical logic, inspired by the groupoid model of (intensional) Martin–Löf type theory due to Hofmann and Streicher. In particular, we show that a form of Martin–Löf type theory can be soundly modelled in any model category. This result indicates moreover that any model category has an associated “internal language” which is itself a form of Martin-Löf type theory. This suggests applications both to type theory and to homotopy theory. Because Martin–Löf type theory is, in one form or another, the theoretical basis for many of the computer proof assistants currently in use, such as Coq and Agda, this promise of applications is of a practical, as well as theoretical, nature.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/vladimirvoevodsky/" title="Vladimir Voevodsky" uri="https://www.jonmsterling.com/vladimirvoevodsky/" display-uri="vladimirvoevodsky" type="local">Vladimir Voevodsky</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2006</fr:year>
              <fr:month>10</fr:month>
              <fr:day>2</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/voevodsky-2006/</fr:uri>
            <fr:display-uri>voevodsky-2006</fr:display-uri>
            <fr:route>/voevodsky-2006/</fr:route>
            <fr:title text="A very short note on the homotopy λ-calculus">A very short note on the homotopy λ-calculus</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="external">https://www.math.ias.edu/Voevodsky/files/files-annotated/Dropbox/Unfinished_papers/Dynamic_logic/Stage_9_2012_09_01/2006_09_Hlambda.pdf</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/marcelofiore/" title="Marcelo Fiore" uri="https://www.jonmsterling.com/marcelofiore/" display-uri="marcelofiore" type="local">Marcelo Fiore</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2002</fr:year>
              <fr:month>10</fr:month>
              <fr:day>6</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/fiore-2002/</fr:uri>
            <fr:display-uri>fiore-2002</fr:display-uri>
            <fr:route>/fiore-2002/</fr:route>
            <fr:title text="Semantic analysis of normalisation by evaluation for typed lambda calculus">Semantic analysis of normalisation by evaluation for typed lambda calculus</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1145/571157.571161</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This paper studies normalisation by evaluation for typed lambda calculus from a categorical and algebraic viewpoint. The first part of the paper analyses the lambda definability result of Jung and Tiuryn via Kripke logical relations and shows how it can be adapted to unify definability and normalisation, yielding an extensional normalisation result. In the second part of the paper the analysis is refined further by considering intensional Kripke relations (in the form of glueing) and shown to provide a function for normalising terms, casting normalisation by evaluation in the context of categorical glueing. The technical development includes an algebraic treatment of the syntax and semantics of the typed lambda calculus that allows the definition of the normalisation function to be given within a simply typed meta-theory.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/thorstenaltenkirch/" title="Thorsten Altenkirch" uri="https://www.jonmsterling.com/thorstenaltenkirch/" display-uri="thorstenaltenkirch" type="local">Thorsten Altenkirch</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/peterdybjer/" title="Peter Dybjer" uri="https://www.jonmsterling.com/peterdybjer/" display-uri="peterdybjer" type="local">Peter Dybjer</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinhofmann/" title="Martin Hofmann" uri="https://www.jonmsterling.com/martinhofmann/" display-uri="martinhofmann" type="local">Martin Hofmann</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/philipscott/" title="Philip Scott" uri="https://www.jonmsterling.com/philipscott/" display-uri="philipscott" type="local">Philip Scott</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2001</fr:year>
              <fr:month>6</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/altenkirch-dybjer-hofmann-scott-2001/</fr:uri>
            <fr:display-uri>altenkirch-dybjer-hofmann-scott-2001</fr:display-uri>
            <fr:route>/altenkirch-dybjer-hofmann-scott-2001/</fr:route>
            <fr:title text="Normalization by evaluation for typed lambda calculus with coproducts">Normalization by evaluation for typed lambda calculus with coproducts</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1109/LICS.2001.932506</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Solves the decision problem for the simply typed lambda calculus with a strong binary sum, or, equivalently, the word problem for free Cartesian closed categories with binary co-products. Our method is based on the semantic technique known as “normalization by evaluation”, and involves inverting the interpretation of the syntax in a suitable sheaf model and, from this, extracting an appropriate unique normal form. There is no rewriting theory involved and the proof is completely constructive, allowing program extraction from the proof.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/marcelofiore/" title="Marcelo Fiore" uri="https://www.jonmsterling.com/marcelofiore/" display-uri="marcelofiore" type="local">Marcelo Fiore</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/alexsimpson/" title="Alex Simpson" uri="https://www.jonmsterling.com/alexsimpson/" display-uri="alexsimpson" type="local">Alex Simpson</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1999</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/fiore-simpson-1999/</fr:uri>
            <fr:display-uri>fiore-simpson-1999</fr:display-uri>
            <fr:route>/fiore-simpson-1999/</fr:route>
            <fr:title text="Lambda definability with sums via Grothendieck logical relations">Lambda definability with sums via Grothendieck logical relations</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1007/3-540-48959-2_12</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We introduce a notion of <html:em>Grothendieck logical relation</html:em> and use it to characterise the definability of morphisms in stable bicartesian closed categories by terms of the simply-typed lambda calculus with finite products and finite sums. Our techniques are based on concepts from topos theory, however our exposition is elementary.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/martinhofmann/" title="Martin Hofmann" uri="https://www.jonmsterling.com/martinhofmann/" display-uri="martinhofmann" type="local">Martin Hofmann</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1999</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/hofmann-1999/</fr:uri>
            <fr:display-uri>hofmann-1999</fr:display-uri>
            <fr:route>/hofmann-1999/</fr:route>
            <fr:title text="Semantical analysis of higher-order abstract syntax">Semantical analysis of higher-order abstract syntax</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1109/LICS.1999.782616</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>A functor category semantics for higher-order abstract syntax is proposed with the following aims: relating higher-order and first order syntax, justifying induction principles, suggesting new logical principles to reason about higher-order syntax</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/martinhofmann/" title="Martin Hofmann" uri="https://www.jonmsterling.com/martinhofmann/" display-uri="martinhofmann" type="local">Martin Hofmann</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/thomasstreicher/" title="Thomas Streicher" uri="https://www.jonmsterling.com/thomasstreicher/" display-uri="thomasstreicher" type="local">Thomas Streicher</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1998</fr:year>
              <fr:month>10</fr:month>
              <fr:day>15</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/hofmann-streicher-1998/</fr:uri>
            <fr:display-uri>hofmann-streicher-1998</fr:display-uri>
            <fr:route>/hofmann-streicher-1998/</fr:route>
            <fr:title text="The groupoid interpretation of type theory">The groupoid interpretation of type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1093/oso/9780198501275.001.0001</fr:meta>
            <fr:meta name="venue">Twenty-five years of constructive type theory (Venice, 1995)</fr:meta>
            <fr:meta name="bibtex"><![CDATA[@incollection{hofmann-streicher-1998,
  author = {Hofmann, Martin and Streicher, Thomas},
  address = {New York},
  publisher = {Oxford Univ. Press},
  booktitle = {Twenty-five years of constructive type theory ({V}enice, 1995)},
  year = {1998},
  doi = {10.1093/oso/9780198501275.001.0001},
  pages = {83--111},
  series = {Oxford Logic Guides},
  title = {The groupoid interpretation of type theory},
  volume = {36},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/fwlawvere/" title="F. William Lawvere" uri="https://www.jonmsterling.com/fwlawvere/" display-uri="fwlawvere" type="local">F. William Lawvere</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1994</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/lawvere-1994/</fr:uri>
            <fr:display-uri>lawvere-1994</fr:display-uri>
            <fr:route>/lawvere-1994/</fr:route>
            <fr:title text="Tools for the advancement of objective logic: closed categories and toposes">Tools for the advancement of objective logic: closed categories and toposes</fr:title>
            <fr:taxon>Reference</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/achimjung/" title="Achim Jung" uri="https://www.jonmsterling.com/achimjung/" display-uri="achimjung" type="local">Achim Jung</fr:link>
              </fr:author>
              <fr:author>Jerzy Tiuryn</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1993</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jung-tiuryn-1993/</fr:uri>
            <fr:display-uri>jung-tiuryn-1993</fr:display-uri>
            <fr:route>/jung-tiuryn-1993/</fr:route>
            <fr:title text="A new characterization of lambda definability">A new characterization of lambda definability</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1007/BFb0037110</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We give a new characterization of lambda definability in Henkin models using logical relations defined over ordered sets with varying arity. The advantage of this over earlier approaches by Plotkin and Statman is its simplicity and universality. Yet, decidability of lambda definability for hereditarily finite Henkin models remains an open problem. But if the variable set allowed in terms is also restricted to be finite then our techniques lead to a decision procedure.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/martinhyland/" title="Martin Hyland" uri="https://www.jonmsterling.com/martinhyland/" display-uri="martinhyland" type="local">Martin Hyland</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1991</fr:year>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/hyland-1991/</fr:uri>
            <fr:display-uri>hyland-1991</fr:display-uri>
            <fr:route>/hyland-1991/</fr:route>
            <fr:title text="First steps in synthetic domain theory">First steps in synthetic domain theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="venue">Category Theory (Como, 1990)</fr:meta>
            <fr:meta name="doi">10.1007/BFb0084217</fr:meta>
            <fr:meta name="bibtex"><![CDATA[@inproceedings{hyland-1991,
  author = {Hyland, J. M. E.},
  editor = {Carboni, Aurelio and Pedicchio, Maria Cristina and Rosolini, Guiseppe},
  address = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  booktitle = {Category Theory},
  year = {1991},
  isbn = {978-3-540-46435-8},
  pages = {131--156},
  title = {First steps in synthetic domain theory},
}]]></fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
              <fr:author>John C. Mitchell</fr:author>
              <fr:author>
                <fr:link href="/eugeniomoggi/" title="Eugenio Moggi" uri="https://www.jonmsterling.com/eugeniomoggi/" display-uri="eugeniomoggi" type="local">Eugenio Moggi</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1989</fr:year>
              <fr:month>12</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/harper-mitchell-moggi-1990/</fr:uri>
            <fr:display-uri>harper-mitchell-moggi-1990</fr:display-uri>
            <fr:route>/harper-mitchell-moggi-1990/</fr:route>
            <fr:title text="Higher-order modules and the phase distinction">Higher-order modules and the phase distinction</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1145/96709.96744</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>In earlier work, we used a typed function calculus, XML, with dependent types to analyze several aspects of the Standard ML type system. In this paper, we introduce a refinement of XML with a clear compile-time/run-time phase distinction, and a direct compile-time type checking algorithm. The calculus uses a finer separation of types into universes than XML and enforces the phase distinction using a nonstandard equational theory for module and signature expressions. While unusual from a type-theoretic point of view, the nonstandard equational theory arises naturally from the well-known Grothendieck construction on an indexed category.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/eugeniomoggi/" title="Eugenio Moggi" uri="https://www.jonmsterling.com/eugeniomoggi/" display-uri="eugeniomoggi" type="local">Eugenio Moggi</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1989</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/moggi-1989/</fr:uri>
            <fr:display-uri>moggi-1989</fr:display-uri>
            <fr:route>/moggi-1989/</fr:route>
            <fr:title text="A category-theoretic account of program modules">A category-theoretic account of program modules</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1007/BFb0018347</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The type-theoretic explanation of modules proposed to date (for programming languages like ML) is unsatisfactory, in that it fails to reflect the distinction between compile-time, when type-expressions are evaluated, and run-time, when value-expressions are evaluated. This paper proposes a new explanation based on “programming languages as indexed categories” and illustrates, as an application, how ML should be extended to support higher order modules. The paper also outlines a methodology for a modular approach to programming languages, where programming languages (of a certain kind) are identified with objects in a 2-category and features are viewed as 2-categorical notions.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/permartinl%C3%B6f/" title="Per Martin-Löf" uri="https://www.jonmsterling.com/permartinlöf/" display-uri="permartinlöf" type="local">Per Martin-Löf</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1982</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/martin-loef-1982/</fr:uri>
            <fr:display-uri>martin-loef-1982</fr:display-uri>
            <fr:route>/martin-loef-1982/</fr:route>
            <fr:title text="Constructive mathematics and computer programming">Constructive mathematics and computer programming</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1016/S0049-237X(09)70189-2</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This chapter discusses that relating constructive mathematics to computer programming seems to be beneficial. Among the benefits to be derived by constructive mathematics from its association with computer programming, one is that you see immediately why you cannot rely upon the law of excluded middle: its uninhibited use would lead to programs that one did not know how to execute. By choosing to program in a formal language for constructive mathematics, like the theory of types, one gets access to the conceptual apparatus of pure mathematics, neglecting those parts that depend critically on the law of excluded middle, whereas even the best high level programming languages so far designed are wholly inadequate as mathematical languages. The virtue of a machine code is that a program written in it can be directly read and executed by the machine. The distinction between low and high level programming languages is of course relative to the available hardware. It may well be possible to turn what is now regarded as a high level programming language into machine code by the invention of new hardware.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/peterfreyd/" title="Peter Freyd" uri="https://www.jonmsterling.com/peterfreyd/" display-uri="peterfreyd" type="local">Peter Freyd</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1978</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/freyd-1978/</fr:uri>
            <fr:display-uri>freyd-1978</fr:display-uri>
            <fr:route>/freyd-1978/</fr:route>
            <fr:title text="On proving that 1 is an indecomposable projective in various free categories">On proving that 1 is an indecomposable projective in various free categories</fr:title>
            <fr:taxon>Reference</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Unpublished manuscript.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/alexandergrothendieck/" title="Alexander Grothendieck" uri="https://www.jonmsterling.com/alexandergrothendieck/" display-uri="alexandergrothendieck" type="local">Alexander Grothendieck</fr:link>
              </fr:author>
              <fr:author>Jean-Louis Verdier</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1972</fr:year>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sga-4/</fr:uri>
            <fr:display-uri>sga-4</fr:display-uri>
            <fr:route>/sga-4/</fr:route>
            <fr:title text="Théorie des topos et cohomologie étale des schémas (SGA 4)">Théorie des topos et cohomologie étale des schémas (SGA 4)</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1007/BFb0081551</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>William W. Tait</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1967</fr:year>
              <fr:month>6</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/tait-1967/</fr:uri>
            <fr:display-uri>tait-1967</fr:display-uri>
            <fr:route>/tait-1967/</fr:route>
            <fr:title text="Intensional interpretations of functionals of finite type I">Intensional interpretations of functionals of finite type I</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.2307/2271658</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>Georg Wilhelm Friedrich Hegel</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1812</fr:year>
              <fr:month>1</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/hegel-sol/</fr:uri>
            <fr:display-uri>hegel-sol</fr:display-uri>
            <fr:route>/hegel-sol/</fr:route>
            <fr:title text="Wissenschaft der Logik">Wissenschaft der Logik</fr:title>
            <fr:taxon>Reference</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
