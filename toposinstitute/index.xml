<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors />
    <fr:uri>https://www.jonmsterling.com/toposinstitute/</fr:uri>
    <fr:display-uri>toposinstitute</fr:display-uri>
    <fr:route>/toposinstitute/</fr:route>
    <fr:title text="Topos Institute">Topos Institute</fr:title>
    <fr:taxon>Institution</fr:taxon>
    <fr:meta name="external">https://topos.institute/</fr:meta>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:blockquote><html:p>We shape technology for public benefit by advancing sciences of connection and integration.</html:p>
  <html:p>Our goal is a world where the systems that surround us benefit us all.</html:p></html:blockquote>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>9</fr:month>
              <fr:day>28</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/sterling-2023-topos-colloquium/</fr:uri>
            <fr:display-uri>sterling-2023-topos-colloquium</fr:display-uri>
            <fr:route>/sterling-2023-topos-colloquium/</fr:route>
            <fr:title text="Synthetic domains in the 21st century">Synthetic domains in the 21st century</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="external">https://topos.site/topos-colloquium/</fr:meta>
            <fr:meta name="venue"><fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link> Colloquium</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>It is easy to teach a student how to give a naïve denotational semantics to a typed lambda calculus without recursion, and then use it to reason about the equational theory: a type might as well be a set, and a program might as well be a function, and equational adequacy at base type is established using a logical relation between the initial model and the category of sets. Adding any non-trivial feature to this language (e.g. general recursion, polymorphism, state, etc.) immediately increases the difficulty beyond the facility of a beginner: to add recursion, one must replace sets and functions with domains and continuous maps, and to accommodate polymorphism and state, one must pass to increasingly inaccessible variations on this basic picture.</html:p>
            <html:p>The dream of the 1990s was to find a category that behaves like SET in which even general recursive and effectful programming languages could be given naïve denotational semantics, where types are interpreted as “sets” and programs are interpreted as a “functions”, without needing to check any arduous technical conditions like continuity. The benefit of this synthetic domain theory is not only that it looks “easy” for beginners, as more expert-level constructions like powerdomains or even domain equations for recursively defined semantic worlds become simple and direct. Although there have been starts and stops, the dream of synthetic domain theory is alive and well in the 21st Century. Today’s synthetic domain theory is, however, both more modular and more powerful than ever before, and has yielded significant results in programming language semantics including <fr:link href="/sterling-gratzer-birkedal-2022/" title="Denotational semantics of general store and polymorphism" uri="https://www.jonmsterling.com/sterling-gratzer-birkedal-2022/" display-uri="sterling-gratzer-birkedal-2022" type="local">simple denotational semantics</fr:link> for an state of the art programming language with higher-order polymorphism, dependent types, recursive types, general reference types, and first-class module packages that can be stored in the heap.</html:p>
            <html:p>In this talk, I will explain some important classical results in synthetic domain theory as well as more recent results that illustrate the potential impact of “naïve denotational semantics” on the life of a workaday computer scientist.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/robertharper/" title="Robert Harper" uri="https://www.jonmsterling.com/robertharper/" display-uri="robertharper" type="local">Robert Harper</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2021</fr:year>
              <fr:month>12</fr:month>
              <fr:day>9</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/harper-2021-topos-institute/</fr:uri>
            <fr:display-uri>harper-2021-topos-institute</fr:display-uri>
            <fr:route>/harper-2021-topos-institute/</fr:route>
            <fr:title text="Phase distinctions in type theory">Phase distinctions in type theory</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="video">https://www.youtube.com/watch?v=7DYkyB1Rm3I</fr:meta>
            <fr:meta name="venue"><fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link> Colloquium</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>(Joint work with <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link> and <fr:link href="/yueniu/" title="Yue Niu" uri="https://www.jonmsterling.com/yueniu/" display-uri="yueniu" type="local">Yue Niu</fr:link>)</html:p>
            <html:p>The informal phase distinction between compile-time and run-time in programming languages is formally manifested by the distinction between kinds, which classify types, and types, which classify code. The distinction underpins standard programming methodology whereby code is first type-checked for consistency before being compiled for execution. When used effectively, types help eliminate bugs before they occur.</html:p>
            <html:p>Program modules, in even the most rudimentary form, threaten the distinction, comprising as they do both types and programs in a single unit. Matters worsen when considerating “open” modules, with free module variables standing for its imports. To maintain the separation in their presence it is necessary to limit the dependency of types, the static parts of a module, to their imported types. Such restrictions are fundamental for using dependent types to express modular structure, as originally suggested by MacQueen.</html:p>
            <html:p>To address this question <fr:link href="/moggi-1989/" title="A category-theoretic account of program modules" uri="https://www.jonmsterling.com/moggi-1989/" display-uri="moggi-1989" type="local">Moggi</fr:link> gave an “analytic” formulation of program modules in which modules are explicitly separated into their static and dynamic components using tools from category theory. Recent work by Dreyer, Rossberg, and Russo develops this approach fully in their account of ML-like module systems. In this talk we consider instead a “synthetic” formulation using a proposition to segregate the static from the dynamic, in particular to define static equivalence to manage type sharing and type dependency.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/brendanfong/</fr:uri>
            <fr:display-uri>brendanfong</fr:display-uri>
            <fr:route>/brendanfong/</fr:route>
            <fr:title text="Brendan Fong">Brendan Fong</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="institution">
              <fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link>
            </fr:meta>
            <fr:meta name="position">Chief Executive</fr:meta>
            <fr:meta name="external">http://brendanfong.com/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/danascott/</fr:uri>
            <fr:display-uri>danascott</fr:display-uri>
            <fr:route>/danascott/</fr:route>
            <fr:title text="Dana Scott">Dana Scott</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="institution"><fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link>; <fr:link href="/cmu/" title="Carnegie Mellon University" uri="https://www.jonmsterling.com/cmu/" display-uri="cmu" type="local">Carnegie Mellon University</fr:link></fr:meta>
            <fr:meta name="position">Senior Advisor; Emeritus Hillman Huniversity Professor of Computer Science, Philosophy, and Mathematical Logic</fr:meta>
            <fr:meta name="external">http://www.cs.cmu.edu/~scott/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/kristopherbrown/</fr:uri>
            <fr:display-uri>kristopherbrown</fr:display-uri>
            <fr:route>/kristopherbrown/</fr:route>
            <fr:title text="Kristopher Brown">Kristopher Brown</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="institution">
              <fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link>
            </fr:meta>
            <fr:meta name="position">Research Software Engineer</fr:meta>
            <fr:meta name="external">https://www.krisb.org/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/owenlynch/</fr:uri>
            <fr:display-uri>owenlynch</fr:display-uri>
            <fr:route>/owenlynch/</fr:route>
            <fr:title text="Owen Lynch">Owen Lynch</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="institution">
              <fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link>
            </fr:meta>
            <fr:meta name="position">Research Software Engineer</fr:meta>
            <fr:meta name="external">https://owenlynch.org/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:uri>https://www.jonmsterling.com/timhosgood/</fr:uri>
            <fr:display-uri>timhosgood</fr:display-uri>
            <fr:route>/timhosgood/</fr:route>
            <fr:title text="Tim Hosgood">Tim Hosgood</fr:title>
            <fr:taxon>Person</fr:taxon>
            <fr:meta name="institution">
              <fr:link href="/toposinstitute/" title="Topos Institute" uri="https://www.jonmsterling.com/toposinstitute/" display-uri="toposinstitute" type="local">Topos Institute</fr:link>
            </fr:meta>
            <fr:meta name="position">Director of Operations</fr:meta>
            <fr:meta name="external">https://thosgood.com/</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter />
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
