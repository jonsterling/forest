<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>1</fr:month>
      <fr:day>19</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-000N/</fr:uri>
    <fr:display-uri>jms-000N</fr:display-uri>
    <fr:route>/jms-000N/</fr:route>
    <fr:title text="Category theory vs. type theory">Category theory vs. type theory</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p><html:strong>Category theory</html:strong> is the language that is best equipped to express external statements and arguments, because category theory is explicit about the “domain of definition” of a given (generalized) element. In contrast, <html:strong>type theory</html:strong> is the language of internal mathematics; in type theory one works naïvely with “elements” <fr:tex display="inline"><![CDATA[x:A]]></fr:tex>, and the constraints of the language ensure that everything you do is compatible with these formal elements being realized by <html:em>generalized</html:em> elements <fr:tex display="inline"><![CDATA[x:I\to  A]]></fr:tex>.</html:p>
    <html:p>Many aspects of synthetic mathematics are best realized in the internal / type theoretic manner, as it is natural for many objects to vary over a “domain of definition”; for instance, in computer science, a program <fr:tex display="inline"><![CDATA[\Gamma \vdash  M : A]]></fr:tex> can be thought of as a generalized element <fr:tex display="inline"><![CDATA[M:\Gamma \to  A]]></fr:tex>, but it is often useful to speak simply of “elements of type <fr:tex display="inline"><![CDATA[A]]></fr:tex>” without intending to make any assumptions about whether these “elements” are closed or not.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>1</fr:month>
              <fr:day>19</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-000K/</fr:uri>
            <fr:display-uri>jms-000K</fr:display-uri>
            <fr:route>/jms-000K/</fr:route>
            <fr:title text="The relationship between internal and external language">The relationship between internal and external language</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>The development of axiomatic set theory followed by the discovery of <html:em>sheaves</html:em> and <html:em>forcing</html:em> has led to a new style of synthetic mathematics that differs somewhat from <fr:link href="/jms-000L/" title="Euclid’s synthetic plane geometry" uri="https://www.jonmsterling.com/jms-000L/" display-uri="jms-000L" type="local">Euclid’s</fr:link>. In the new synthetic method, we start from a concrete domain concept (such as <html:strong>topological spaces</html:strong>, <html:strong>smooth manifolds</html:strong>, <html:strong>computational datatypes</html:strong>, <html:strong>homotopy types</html:strong>, etc.) and summon as if from the void a new kind of set theory in which instances of the original domain concept are treated <html:em>naïvely</html:em> as though they were just special sets.</html:p>
            <html:p>The advantage of this approach is that we can completely do away with the complexities of checking the well-definedness (e.g. continuity, computability, etc.) of <html:em>functions</html:em> between domain objects, because these become just ordinary functions between sets. For instance, in ordinary topology we must be careful to ensure that functions are continuous; a special case of this arises in computer science, where we must constantly check that a function between <html:em>domains</html:em> (e.g. directed-complete partial orders, <html:span style="white-space: nowrap"><fr:tex display="inline"><![CDATA[\omega -cpos]]></fr:tex></html:span>, Scott domains, etc.) preserves the appropriate directed suprema, an essentially bureaucratic task whose derilication can nonetheless lead to serious mistakes. Likewise in the context of theory of computation, we likewise have to check that a function between datatypes is tracked by a Turing machine.</html:p>
            <html:p>In contrast, when (spaces, domains, datatypes, etc.) are viewed synthetically as if they were simply sets, any function between them will do. Obviously this sounds too good to be true, so there must be something that we have to give up in return for this simplicity; indeed, we must give up in many cases the unrestricted use of <html:em>classical logic</html:em>, in particular the law of the excluded middle and the axiom of choice. Thus the “set theory” generated by a given domain concept must be in general an <html:strong>intuitionistic</html:strong> set theory.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000M/</fr:uri>
                <fr:display-uri>jms-000M</fr:display-uri>
                <fr:route>/jms-000M/</fr:route>
                <fr:title text="Well-pointedness vs. function extensionality">Well-pointedness vs. function extensionality</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>One of the consequences of passing to an intuitionistic set theory is that we must deal with distinctions that did not have significance in the classical setting, such as the <html:strong>failure of well-pointedness</html:strong>. In classical set theory, well-pointedness means that a function <fr:tex display="inline"><![CDATA[f : A \to  B]]></fr:tex> is completely determined by its behavior on global elements <fr:tex display="inline"><![CDATA[x\in  A]]></fr:tex> (i.e. functions <fr:tex display="inline"><![CDATA[x : 1\to  A]]></fr:tex>), whereas in intuitionistic set theory this need not hold (indeed, well-pointedness in this sense implies the law of the excluded middle).</html:p>
                <html:p>In an intuitionistic setting, we must instead consider the composition of <fr:tex display="inline"><![CDATA[f : A \to  B]]></fr:tex> with <html:em>arbitrary</html:em> functions <fr:tex display="inline"><![CDATA[a : I \to  A]]></fr:tex> in order to fully characterize its behavior. (In some cases, the domains <fr:tex display="inline"><![CDATA[I]]></fr:tex> of these functions that we must probe by can be drawn from a more restricted class (or even a set) of distinguished set.) In such a setting, therefore, it is convenient to think of a function <fr:tex display="inline"><![CDATA[a : I \to  A]]></fr:tex> as a <html:strong>generalized element</html:strong> of <fr:tex display="inline"><![CDATA[A]]></fr:tex>; then we are saying that <fr:tex display="inline"><![CDATA[f : A \to  B]]></fr:tex> is determined by its behavior on not only global elements but also generalized elements.</html:p>
                <html:p>The new significance of generalized elements in intuitionistic set theories gives rise to a distinction between two kinds of language: <html:strong>internal</html:strong> and <html:strong>external</html:strong> language. External language is just ordinary mathematics, where we are explicit about the domains of generalized elements; external language thus allows us to distinguish between a global element and a parameterized element. In contrast, internal language expresses only that which applies to arbitrary generalized elements; internal statements can always be translated mechanically to external ones by explicitly reparameterizing all variable elements as generalized elements (this is called Kripke-Joyal semantics).</html:p>
                <html:p>For example, even though the external statement of well-pointedness may not hold, the internal one does hold because its externalization is trivial:</html:p>
                <html:blockquote>
                  <html:p><html:strong>Internal:</html:strong> for any functions <fr:tex display="inline"><![CDATA[f,g:A\to  B]]></fr:tex>, if for all <fr:tex display="inline"><![CDATA[x:A]]></fr:tex> we have <fr:tex display="inline"><![CDATA[fx=gx]]></fr:tex>, then <fr:tex display="inline"><![CDATA[f=g]]></fr:tex>.</html:p>
                </html:blockquote>
                <html:blockquote>
                  <html:p><html:strong>Externalization:</html:strong> for any set <fr:tex display="inline"><![CDATA[I]]></fr:tex> and functions <fr:tex display="inline"><![CDATA[f,g:I\times  A \to  B]]></fr:tex>, if for all <fr:tex display="inline"><![CDATA[i:J\to  I]]></fr:tex> and <fr:tex display="inline"><![CDATA[a:J\to  A]]></fr:tex> we have <fr:tex display="inline"><![CDATA[f \circ  {\mathopen {}\left \langle i,a\right \rangle \mathclose {}} = g\circ {\mathopen {}\left \langle i,a\right \rangle \mathclose {}}]]></fr:tex>, then <fr:tex display="inline"><![CDATA[f=g]]></fr:tex>.</html:p>
                </html:blockquote>
                <html:p>The two statements above are nothing more than the (equivalent) internal and external formulations of the <html:strong>function extensionality</html:strong> principle, which is always true in any adequate foundation for mathematics. If the internal statement is read directly as if it were external already, it would be exactly the statement of <html:strong>well-pointedness</html:strong>, which is much stronger than function extensionality.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>1</fr:month>
                  <fr:day>19</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-000N/</fr:uri>
                <fr:display-uri>jms-000N</fr:display-uri>
                <fr:route>/jms-000N/</fr:route>
                <fr:title text="Category theory vs. type theory">Category theory vs. type theory</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p><html:strong>Category theory</html:strong> is the language that is best equipped to express external statements and arguments, because category theory is explicit about the “domain of definition” of a given (generalized) element. In contrast, <html:strong>type theory</html:strong> is the language of internal mathematics; in type theory one works naïvely with “elements” <fr:tex display="inline"><![CDATA[x:A]]></fr:tex>, and the constraints of the language ensure that everything you do is compatible with these formal elements being realized by <html:em>generalized</html:em> elements <fr:tex display="inline"><![CDATA[x:I\to  A]]></fr:tex>.</html:p>
                <html:p>Many aspects of synthetic mathematics are best realized in the internal / type theoretic manner, as it is natural for many objects to vary over a “domain of definition”; for instance, in computer science, a program <fr:tex display="inline"><![CDATA[\Gamma \vdash  M : A]]></fr:tex> can be thought of as a generalized element <fr:tex display="inline"><![CDATA[M:\Gamma \to  A]]></fr:tex>, but it is often useful to speak simply of “elements of type <fr:tex display="inline"><![CDATA[A]]></fr:tex>” without intending to make any assumptions about whether these “elements” are closed or not.</html:p>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
