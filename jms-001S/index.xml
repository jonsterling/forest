<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2023</fr:year>
      <fr:month>2</fr:month>
      <fr:day>14</fr:day>
    </fr:date>
    <fr:uri>https://www.jonmsterling.com/jms-001S/</fr:uri>
    <fr:display-uri>jms-001S</fr:display-uri>
    <fr:route>/jms-001S/</fr:route>
    <fr:title text="Pointed dcpo">Pointed dcpo</fr:title>
    <fr:taxon>Definition</fr:taxon>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>A dcpo is called <html:em>pointed</html:em> when it has a bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> under the information order.</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001W/</fr:uri>
            <fr:display-uri>jms-001W</fr:display-uri>
            <fr:route>/jms-001W/</fr:route>
            <fr:title text="Pointed dcpos and lift-algebras">Pointed dcpos and lift-algebras</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001S/</fr:uri>
                <fr:display-uri>jms-001S</fr:display-uri>
                <fr:route>/jms-001S/</fr:route>
                <fr:title text="Pointed dcpo">Pointed dcpo</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>A dcpo is called <html:em>pointed</html:em> when it has a bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> under the information order.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001U/</fr:uri>
                <fr:display-uri>jms-001U</fr:display-uri>
                <fr:route>/jms-001U/</fr:route>
                <fr:title text="Suprema of semidirected subsets in pointed dcpos">Suprema of semidirected subsets in pointed dcpos</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>A dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> if and only if it is closed under suprema of semidirected subsets.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is closed under suprema of semidirected subsets. In particular, we may consider the supremum <fr:tex display="inline"><![CDATA[\bigsqcup {\mathopen {}\left \{\right \}\mathclose {}}]]></fr:tex> of the empty set. This is evidently the bottom element, using the universal property of the supremum.</html:p>

  <html:p>Conversely, suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is pointed and let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be semidirected. We may replace <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> by the directed subset <fr:tex display="inline"><![CDATA[I' = I\cup  {\mathopen {}\left \{\bot \right \}\mathclose {}}]]></fr:tex>; the inclusion <fr:tex display="inline"><![CDATA[I\subseteq  I']]></fr:tex> is clearly cofinal, so the supremum of <fr:tex display="inline"><![CDATA[I']]></fr:tex> is also the supremum of <fr:tex display="inline"><![CDATA[I]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001T/</fr:uri>
                <fr:display-uri>jms-001T</fr:display-uri>
                <fr:route>/jms-001T/</fr:route>
                <fr:title text="Pointed dcpos are lift-algebras">Pointed dcpos are lift-algebras</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo carries a (unique) <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra structure.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The algebra structure is unique if it exists because <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex> is a Kock–Zöberlein monad, i.e. a monad for which the structure maps of algebras are left adjoint to the unit in the order-enrichment. Therefore, it suffices to show that there merely exists an algebra structure <fr:tex display="inline"><![CDATA[{\mathsf {L}{A}}\xrightarrow {{\alpha }}{A}]]></fr:tex> for any <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>

  <html:p>We define the structure map <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> to take <fr:tex display="inline"><![CDATA[u\in \mathsf {L}{A}]]></fr:tex> to the <fr:link href="/jms-001U/" title="Suprema of semidirected subsets in pointed dcpos" uri="https://www.jonmsterling.com/jms-001U/" display-uri="jms-001U" type="local">supremum of the semidirected subset</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{x\in  A \mid  u = \eta _Ax\right \}\mathclose {}}]]></fr:tex>, so we may write <fr:tex display="inline"><![CDATA[\alpha  u = \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>. It is not difficult to see that this assignment is continuous.</html:p>

  <html:p>The unit law for the algebra is trivial. The multiplication law is verified as follows:</html:p>

  <fr:tex display="block"><![CDATA[\alpha {\mathopen {}\left (\mathsf {L}{\alpha } {\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  = \alpha {\mathopen {}\left (\phi , \alpha  u\right )\mathclose {}}
  =
  \bigsqcup _{p:u{\downarrow }}
  \bigsqcup _{q:u[p]{\downarrow }}
  u[p][q]
  = \alpha {\mathopen {}\left (\mu _A{\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001V/</fr:uri>
                <fr:display-uri>jms-001V</fr:display-uri>
                <fr:route>/jms-001V/</fr:route>
                <fr:title text="Lift-algebras are pointed">Lift-algebras are pointed</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> be a <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra; then the underlying dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>To define the bottom element of <fr:tex display="inline"><![CDATA[A]]></fr:tex>, we choose <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[n\in  A]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  n]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> is a Kock–Zöberlein monad and thus we have <fr:tex display="inline"><![CDATA[\alpha \dashv \eta _{A}]]></fr:tex>, it is equivalent to observe that <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  \eta _{A}n]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001X/</fr:uri>
                <fr:display-uri>jms-001X</fr:display-uri>
                <fr:route>/jms-001X/</fr:route>
                <fr:title text="Bottom-preserving maps vs. algebra morphisms">Bottom-preserving maps vs. algebra morphisms</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{\mathopen {}\left (B,\beta \right )\mathclose {}}]]></fr:tex> be two <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras; then a morphism of dcpos <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> is a homomorphism of algebras if and only if it preserves the <fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">bottom element</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>It is clear that a homomorphism of algebras must preserve the bottom element. On the other hand, suppose that <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> preserves the bottom element to check that the following diagram commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="a12c1f3a32a1b3f57c1bd9b0cbcdb3e3"><fr:resource-content><html:img src="/a12c1f3a32a1b3f57c1bd9b0cbcdb3e3.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = TA,
      ne = TB,
      sw = A,
      se = B,
      north = Tf,
      south = f,
      west = \alpha ,
      east = \beta ,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Because both composites preserve the bottom element, it is enough to observe that they both take <fr:tex display="inline"><![CDATA[u\in  TA]]></fr:tex> to the supremum of the following <html:em>semi</html:em>directed subset:</html:p>

  <fr:tex display="block"><![CDATA[{\mathopen {}\left \{n\in  B\mid  \exists  m:A. u=\eta _{A}m \land  n=fm\right \}\mathclose {}}]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001Y/</fr:uri>
                <fr:display-uri>jms-001Y</fr:display-uri>
                <fr:route>/jms-001Y/</fr:route>
                <fr:title text="Monadicity of pointed dcpos">Monadicity of pointed dcpos</fr:title>
                <fr:taxon>Corollary</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>The category of <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras and homomorphisms is (canonically) equivalent to the category of <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> and bottom-preserving morphisms of dcpos. It follows that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos are <html:em>monadic</html:em> over dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Having a bottom element and being an algebra are both <html:em>properties</html:em> of dcpos, because these structures are uniquely determined. Therefore, we will argue that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> with bottom-preserving morphisms form the same <html:em>subcategory</html:em> of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}]]></fr:tex> as the category of algebras with algebra-preserving maps. We have already seen that pointed structure and algebra structure are interchangeable:</html:p>

  <html:ol><html:li><fr:link href="/jms-001T/" title="Pointed dcpos are lift-algebras" uri="https://www.jonmsterling.com/jms-001T/" display-uri="jms-001T" type="local">Pointed dcpos are lift-algebras</fr:link></html:li>
    <html:li><fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">Lift-algebras are pointed</fr:link></html:li></html:ol>


  <html:p>To finish, we recall that a morphism of dcpos <fr:link href="/jms-001X/" title="Bottom-preserving maps vs. algebra morphisms" uri="https://www.jonmsterling.com/jms-001X/" display-uri="jms-001X" type="local">preserves algebra structure if and only if it preserves the bottom element</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <html:p>By virtue of the <fr:link href="/jms-001Y/" title="Monadicity of pointed dcpos" uri="https://www.jonmsterling.com/jms-001Y/" display-uri="jms-001Y" type="local">monadicity result</fr:link>, we will refer to <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos and <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras interchangeably.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001R/</fr:uri>
                <fr:display-uri>jms-001R</fr:display-uri>
                <fr:route>/jms-001R/</fr:route>
                <fr:title text="Cocompleteness of lift-algebras">Cocompleteness of lift-algebras</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>We will deduce the closure of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under connected colimits using <fr:link href="/jms-002U/" title="Results in constructive monad theory" uri="https://www.jonmsterling.com/jms-002U/" display-uri="jms-002U" type="local">general results about monads</fr:link>. Then we use the results of <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link> to <fr:link href="/jms-005G/" title="The category of lift-algebras is cocomplete" uri="https://www.jonmsterling.com/jms-005G/" display-uri="jms-005G" type="local">deduce</fr:link> the cocompleteness of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex>. <html:mark>Note that the proof establishing that the lift monad preserves connected colimits has an error in it. I have a fix for it, suggested by <fr:link href="/ohadkammar/" title="Ohad Kammar" uri="https://www.jonmsterling.com/ohadkammar/" display-uri="ohadkammar" type="local">Ohad Kammar</fr:link>, but I haven't written it down yet here.</html:mark></html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>8</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001D/</fr:uri>
                    <fr:display-uri>jms-001D</fr:display-uri>
                    <fr:route>/jms-001D/</fr:route>
                    <fr:title text="Lifting as a co-comma construction">Lifting as a co-comma construction</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>For any dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>, the following is a co-comma square in the posetal 2-category of dcpos, where <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> takes a dcpo to its <html:em>lift</html:em> or <html:em>Scott-open partial map classifier</html:em>.</html:p>
 
  
  <html:figure><fr:resource hash="0b33979e8323ca58b43bb7f762d8e0b5"><fr:resource-content><html:img src="/0b33979e8323ca58b43bb7f762d8e0b5.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \SpliceDiagramSquare {
      nw = A,
      sw = A,
      ne = \mathbf {1}_{},
      se = \mathsf {L}{A},
      north = !_{A},
      east = \bot ,
      east/style = embedding,
      south/style = embedding,
      south = \eta _A,
      west/style = double,
    }
    \node  [between = nw and se] {$\sqsupseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix another lax square of the following form:</html:p>

  
 
  
  <html:figure><fr:resource hash="8bed4dbcbef36330f8096a7b4a0e14af"><fr:resource-content><html:img src="/8bed4dbcbef36330f8096a7b4a0e14af.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare {
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A},
        east = d_\bot ,
        south = d_A,
        west/style = double,
      }
      \node  [between = nw and se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must show that there exists a <html:em>unique</html:em> morphism <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> factoring the square above through <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{d_\bot \sqsubseteq  d_A\right \}\mathclose {}}]]></fr:tex> as follows:</html:p>

  
 
  
  <html:figure><fr:resource hash="a466ed161a36af5f98013c1dd2a44cee"><fr:resource-content><html:img src="/a466ed161a36af5f98013c1dd2a44cee.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A},
        north = !_{A},
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _A,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$d_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$d_A$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !d$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We will define <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> to take <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex> to the least upper bound of the directed subset <fr:tex display="inline"><![CDATA[U = {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{d_A a\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\subseteq  D]]></fr:tex>. As this assignment evidently has the correct factorization property, it remains just to check that it is continuous. Letting <fr:tex display="inline"><![CDATA[V]]></fr:tex> be a directed subset of <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>, we compute:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d\bigsqcup  V & = \bigsqcup \,{\mathopen {}\left (
      {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup 
      {\mathopen {}\left \{d_Aa\mid  \bigsqcup  V = \eta _A a\right \}\mathclose {}}
    \right )\mathclose {}}
    \\
                & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  \eta _Aa\in  V\right \}\mathclose {}}\right )\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{\bigsqcup  {\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}} \mid  a^{?}\in  V\right \}\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{da^{?}\mid  a^{?}\in  V\right \}\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For uniqueness, suppose that we have two morphisms <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d,d'}D]]></fr:tex> factoring our square in the sense described above and fix <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex>:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d a^{?} & = d\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d'\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d'\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'a^{?}
  \end {aligned}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>8</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001F/</fr:uri>
                    <fr:display-uri>jms-001F</fr:display-uri>
                    <fr:route>/jms-001F/</fr:route>
                    <fr:title text="Lifting preserves connected colimits">Lifting preserves connected colimits</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex> be a diagram of dcpos indexed in a connected category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>. Then the lifting endofunctor <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> on dcpos preserves the colimit of <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet \xrightarrow {\iota _\bullet }{\mathopen {}\left \{A_\infty \right \}\mathclose {}}]]></fr:tex> be a universal cocone; we must show that <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> is universal as well, i.e. show any cocone <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {d_\bullet }{\mathopen {}\left \{D\right \}\mathclose {}}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> in the following sense:</html:p>

  
 
  
  <html:figure><fr:resource hash="4fd9a1490d281cbc24b652123bac4ff4"><fr:resource-content><html:img src="/4fd9a1490d281cbc24b652123bac4ff4.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [exists,->] (ne) to node[right] {$\exists !{\mathopen {}\left \{d_\infty \right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the <fr:link href="/jms-001D/" title="Lifting as a co-comma construction" uri="https://www.jonmsterling.com/jms-001D/" display-uri="jms-001D" type="local">universal property of <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> as a co-comma dcpo</fr:link>, we may define <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }\xrightarrow {d_\infty }D]]></fr:tex> to be the universal map determined by a certain lax square in the following configuration:</html:p>

  
 
  
  <html:figure><fr:resource hash="756d18c413e345dee58f06695c582131"><fr:resource-content><html:img src="/756d18c413e345dee58f06695c582131.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A_\infty },
        east = {h_\bot },
        east/style = {exists,->},
        south/style = {exists,->},
        south = {h_{A_\infty }},
        west/style = double,
      }
      \node [between = sq/nw and sq/se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>First we define <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{h_\bot }}{D}]]></fr:tex> to be the element <fr:tex display="inline"><![CDATA[d_i\bot ]]></fr:tex> determined by an <html:em>arbitrary</html:em> object <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex>. To see that this is well-defined, fix <fr:tex display="inline"><![CDATA[i,j\in  \mathcal {I}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[d_i\bot =d_j\bot ]]></fr:tex>. As <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex> is connected, we may proceed by induction on a zigzag <fr:tex display="inline"><![CDATA[i\leadsto  j\in  \mathcal {I}]]></fr:tex>; ultimately, this amounts to checking that for any span <fr:tex display="inline"><![CDATA[i\leftarrow  k \rightarrow  j]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[d_i\bot =d_k\bot =d_j\bot ]]></fr:tex>. This follows from the strictness of lifted morphisms as well as the naturality of the cocone <fr:tex display="inline"><![CDATA[d_\bullet ]]></fr:tex>.</html:p>

  <html:p>Next we define <fr:tex display="inline"><![CDATA[{A_\infty }\xrightarrow {{h_{A_\infty }}}{D}]]></fr:tex> using the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="5a4977e222292b9bffcdd38beea7dd93"><fr:resource-content><html:img src="/5a4977e222292b9bffcdd38beea7dd93.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = A_\bullet ,
      sw = \mathsf {L}{A_\bullet },
      ne = {\mathopen {}\left \{A_\infty \right \}\mathclose {}},
      se = {\mathopen {}\left \{D\right \}\mathclose {}},
      west/style = embedding,
      west = \eta _{A_\bullet },
      north = \iota _\bullet ,
      south = d_\bullet ,
      east/style = {exists,->},
      east = \exists !{\mathopen {}\left \{h_{A_\infty }\right \}\mathclose {}},
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>To arrange <fr:tex display="inline"><![CDATA[h_{A_\infty }]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_\bot ]]></fr:tex> into the desired lax square, we must check that for all <fr:tex display="inline"><![CDATA[a_\infty :A_\infty ]]></fr:tex> we have <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }a_\infty ]]></fr:tex>. Fixing arbitrary <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }\iota _{i}a]]></fr:tex>. As <fr:tex display="inline"><![CDATA[h_\bot =d_i\bot ]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_{A_\infty }\iota _ia = d_i\eta _{A_i}a]]></fr:tex>, our goal follows directly from the monotonicity of <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_i}}\xrightarrow {{d_i}}{D}]]></fr:tex>.</html:p>

  <html:p><html:mark>The reasoning above is not correct, we do not know that we can restrict attention to <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>. This is indeed the case, but need to make it explicit.</html:mark></html:p>

  <html:p>Thus we have the desired lax square and a unique morphism <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{h}}{D}]]></fr:tex> factoring it through the co-comma square that defines <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="7cb13a9c50b1f1e22ae054dd0587dc91"><fr:resource-content><html:img src="/7cb13a9c50b1f1e22ae054dd0587dc91.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A_\infty },
        north = !_{A_\infty },
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _{A_\infty },
        width = 2.5cm,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$h_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$h_{A_\infty }$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !h$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Our goal is to show that we may choose the universal map <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{d_\infty }}{D}]]></fr:tex> corresponding to the cocone <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> to be the morphism <fr:tex display="inline"><![CDATA[h]]></fr:tex> defined above. First we must prove that the following triangle commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="d803bf48a41518517c81554b8bf81852"><fr:resource-content><html:img src="/d803bf48a41518517c81554b8bf81852.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the universal property of the co-comma squares for each <fr:tex display="inline"><![CDATA[\mathsf {L}{A_i}]]></fr:tex>, it suffices to check that two diagrams commute:</html:p>
  <html:ol><html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="a7e2afefaf975f34a17b894fa9991765"><fr:resource-content><html:img src="/a7e2afefaf975f34a17b894fa9991765.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {${\mathopen {}\left \{\mathbf {1}_{}\right \}\mathclose {}}$};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\bot $} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting using the strictness of lifted morphisms, this amounts to the established fact that <fr:tex display="inline"><![CDATA[h\bot  = h_\bot ]]></fr:tex>.</html:p></html:li>

    <html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="fddc455f17cd3f5ddbc90bc089731c90"><fr:resource-content><html:img src="/fddc455f17cd3f5ddbc90bc089731c90.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\eta _{A_\bullet }$} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting with established equations, it suffices to observe that the outer diagram below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="f2f99c5cb6ff34b8755f764313e0c992"><fr:resource-content><html:img src="/f2f99c5cb6ff34b8755f764313e0c992.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [below = of nww] (sww) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \node [right = 2.5cm of nww] (nw) {$LA_\bullet $};
          \node [right = 2.5cm of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->,gray] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->,gray] (nw) to node[upright desc,] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding,gray] (nww) to node[upright desc,] {$\eta _{A_\bullet }$} (nw);
          \draw [->] (nww) to node[left] {$\iota _{\bullet }$} (sww);
          \draw [->] (sww) to node[below] {$h_{A_\infty }$} (se);
          \node [above = of nw] (nnw) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \draw [->] (nww) to node[sloped,above] {$\iota _\bullet $} (nnw);
          \draw [->] (nnw) to node[sloped,above] {${\mathopen {}\left \{\eta _{A_\infty }\right \}\mathclose {}}$} (ne);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure></html:li>

    <html:p>Finally, we must check that any two morphisms <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{k,k'}}{D}]]></fr:tex> factoring <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> through <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{\mathsf {L}{\iota _\bullet }}}{{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}}]]></fr:tex> are equal. To that end, we will use the universal property of the co-comma square defining <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> once more to reduce this to checking that <fr:tex display="inline"><![CDATA[k,k']]></fr:tex> agree on <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> and on <fr:tex display="inline"><![CDATA[\eta _{A_\bullet }]]></fr:tex>. The former follows directly from the strictness of <fr:tex display="inline"><![CDATA[\mathsf {L}{\iota _\bullet }]]></fr:tex>, as we have <fr:tex display="inline"><![CDATA[k\bot  = k{\mathopen {}\left (\mathsf {L} \iota _\bullet \bot \right )\mathclose {}}=d_\bullet \bot ]]></fr:tex>. For the latter, we must check that <fr:tex display="inline"><![CDATA[k\circ  \eta _{A_\infty }=k'\circ  \eta _{A_\infty }]]></fr:tex>; by the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[k\circ \eta _{A_\infty }\circ  \iota _\bullet  = k'\circ \eta _{A_\infty }\circ \iota _\bullet ]]></fr:tex>. By naturality of the unit, these are both equal to <fr:tex display="inline"><![CDATA[d_\bullet \circ  \eta _{A_\bullet }]]></fr:tex>.</html:p></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>12</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001L/</fr:uri>
                    <fr:display-uri>jms-001L</fr:display-uri>
                    <fr:route>/jms-001L/</fr:route>
                    <fr:title text="Connected colimits of lift-algebras">Connected colimits of lift-algebras</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> be the lifting monad on dcpos; the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> is closed under connected colimits, and these colimits are <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">created</fr:link> by the forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the following facts:</html:p>
  <html:ol><html:li>The category of dcpos is (even constructively) <fr:link href="/jung-moshier-vickers-2008/" title="Presenting dcpos and dcpo algebras" uri="https://www.jonmsterling.com/jung-moshier-vickers-2008/" display-uri="jung-moshier-vickers-2008" type="local">known to be cocomplete</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">Lifting preserves connected colimits</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001K/" title="Creation of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001K/" display-uri="jms-001K" type="local">The forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex> creates whatever colimits <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> preserves</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>5</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-005F/</fr:uri>
                    <fr:display-uri>jms-005F</fr:display-uri>
                    <fr:route>/jms-005F/</fr:route>
                    <fr:title text="Coproducts of lift-algebras">Coproducts of lift-algebras</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos has all small coproducts.</html:p><html:p>This is the first part of Corollary 2 of Linton's <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Coequalizers in categories of algebras</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The coproduct of lift-algebras is computed as a reflexive coequalizer, whose existence we have <fr:link href="/jms-001L/" title="Connected colimits of lift-algebras" uri="https://www.jonmsterling.com/jms-001L/" display-uri="jms-001L" type="local">already established</fr:link>. Given an index set <fr:tex display="inline"><![CDATA[I]]></fr:tex> and a diagram <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex>, the colimit of the following reflexive pair is the coproduct of <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex> as shown by <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link>:</html:p>
  
 
  
  <html:figure><fr:resource hash="8c54957660ade9f9bef9650c25a07c4d"><fr:resource-content><html:img src="/8c54957660ade9f9bef9650c25a07c4d.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (0) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {L}\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 4.5cm of 0] (1) {$\mathsf {F}^{\mathbb {L}}\mathsf {L}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 3cm of 1] (2) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \draw [->] (0) to node[above] {$\mathsf {F}^{\mathbb {L}}{\mathopen {}\left  [i\mid  \mathsf {L}\,\mathsf {in}_{i}\right  ]\mathclose {}}$} (1);
      \draw [->] (1) to node[above] {$\epsilon $} (2);
      \draw [->,bend right=30] (0) to node[below] {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\alpha _{X_\bullet }}$} (2);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 

</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>5</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-005G/</fr:uri>
                    <fr:display-uri>jms-005G</fr:display-uri>
                    <fr:route>/jms-005G/</fr:route>
                    <fr:title text="The category of lift-algebras is cocomplete">The category of lift-algebras is cocomplete</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos is cocomplete.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows because <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under <fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">connected colimits</fr:link> and <fr:link href="/jms-005F/" title="Coproducts of lift-algebras" uri="https://www.jonmsterling.com/jms-005F/" display-uri="jms-005F" type="local">coproducts</fr:link></html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>21</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002X/</fr:uri>
            <fr:display-uri>jms-002X</fr:display-uri>
            <fr:route>/jms-002X/</fr:route>
            <fr:title text="Positivity and the strictly-below relation">Positivity and the strictly-below relation</fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>It follows from our <fr:link href="/jms-002T/" title="Characterization of positivity in terms of partial elements" uri="https://www.jonmsterling.com/jms-002T/" display-uri="jms-002T" type="local">characterization</fr:link> of <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity</fr:link> in terms of partial elements that an element <fr:tex display="inline"><![CDATA[a: A]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> if and only if it is <fr:link href="/jms-002W/" title="The strictly-below relation" uri="https://www.jonmsterling.com/jms-002W/" display-uri="jms-002W" type="local">strictly above</fr:link> the bottom element, i.e. <fr:tex display="inline"><![CDATA[\bot \sqsubset  a]]></fr:tex>.</html:p>
            <html:p>(See also Proposition 6.2.12 of <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong’s thesis</fr:link>.)</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>21</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002Y/</fr:uri>
            <fr:display-uri>jms-002Y</fr:display-uri>
            <fr:route>/jms-002Y/</fr:route>
            <fr:title text="Way-below vs. positivity">Way-below vs. positivity</fr:title>
            <fr:taxon>Warning</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>At first glance, the definitions of the <fr:link href="/jms-002V/" title="The way-below relation" uri="https://www.jonmsterling.com/jms-002V/" display-uri="jms-002V" type="local">way-below relation</fr:link> and <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity</fr:link> appear very similar:</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>21</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-002V/</fr:uri>
                <fr:display-uri>jms-002V</fr:display-uri>
                <fr:route>/jms-002V/</fr:route>
                <fr:title text="The way-below relation">The way-below relation</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>Let <fr:tex display="inline"><![CDATA[x,y:D]]></fr:tex> be two elements of a dcpo <fr:tex display="inline"><![CDATA[D]]></fr:tex>; we say that <fr:tex display="inline"><![CDATA[x]]></fr:tex> is <html:em>way below</html:em> <fr:tex display="inline"><![CDATA[y]]></fr:tex>, written <fr:tex display="inline"><![CDATA[x\ll  y]]></fr:tex>, when for any directed subset <fr:tex display="inline"><![CDATA[I\subseteq  D]]></fr:tex> such that <fr:tex display="inline"><![CDATA[y\sqsubseteq  \bigsqcup {I}]]></fr:tex>, there exists <fr:tex display="inline"><![CDATA[z\in  I]]></fr:tex> such that <fr:tex display="inline"><![CDATA[x\sqsubseteq  z]]></fr:tex>.</html:p>
                <html:p>(Adapted from <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong’s thesis</fr:link>.)</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001M/</fr:uri>
                <fr:display-uri>jms-001M</fr:display-uri>
                <fr:route>/jms-001M/</fr:route>
                <fr:title text="The positive elements of a pointed dcpo">The positive elements of a pointed dcpo</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>An element <fr:tex display="inline"><![CDATA[u]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dpco <fr:tex display="inline"><![CDATA[A]]></fr:tex> is called <html:em>positive</html:em> when for any semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, if <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> then <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited. We will write <fr:tex display="inline"><![CDATA[\mathsf {pos}\,{u}]]></fr:tex> to mean that <fr:tex display="inline"><![CDATA[u]]></fr:tex> is a positive element.</html:p>
                <html:p>(This is adapted from <fr:link href="/johnstone-1984/" title="Open locales and exponentiation" uri="https://www.jonmsterling.com/johnstone-1984/" display-uri="johnstone-1984" type="local">Johnstone</fr:link>’s definition of positive elements of frames to the case of dcpos by <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong</fr:link>.)</html:p>
              </fr:mainmatter>
            </fr:tree>
            <html:p>One is tempted to assert “an element <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> if and only if <fr:tex display="inline"><![CDATA[\bot \ll  a]]></fr:tex>”, but note that positivity involves a semidirected subset whereas <fr:link href="/jms-002V/" title="The way-below relation" uri="https://www.jonmsterling.com/jms-002V/" display-uri="jms-002V" type="local">way-below</fr:link> involves a <html:em>directed</html:em> subset. Indeed, we always have <fr:tex display="inline"><![CDATA[\bot \ll  a]]></fr:tex>.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>21</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002T/</fr:uri>
            <fr:display-uri>jms-002T</fr:display-uri>
            <fr:route>/jms-002T/</fr:route>
            <fr:title text="Characterization of positivity in terms of partial elements">Characterization of positivity in terms of partial elements</fr:title>
            <fr:taxon>Theorem</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then an element <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> if and only if for any partial element <fr:tex display="inline"><![CDATA[u: LA]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Therefore, we first suppose that any <fr:tex display="inline"><![CDATA[u: LA]]></fr:tex> is defined supposing <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[a]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>. Fixing a semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {I}]]></fr:tex>, we must show that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.
  We consider the partial element <fr:tex display="inline"><![CDATA[u={\mathopen {}\left (\exists  i\in  I. \top , \lambda \_.\bigsqcup {I}\right )\mathclose {}}:LA]]></fr:tex>, and observe that <fr:tex display="inline"><![CDATA[\bigsqcup {I}=\bigsqcup _{i\in  I} \bigsqcup {I}=\bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, and so we have <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex> and thus it follows that <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex> and so <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.</html:p>

  <html:p>Conversely, if <fr:tex display="inline"><![CDATA[a]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>, it follows that any partial element <fr:tex display="inline"><![CDATA[u]]></fr:tex> is defined when <fr:tex display="inline"><![CDATA[a\sqsubseteq \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>, because the subset <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{y\mid  y=a\land  u{\downarrow }\right \}\mathclose {}}]]></fr:tex> is semidirected.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>21</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002S/</fr:uri>
            <fr:display-uri>jms-002S</fr:display-uri>
            <fr:route>/jms-002S/</fr:route>
            <fr:title text="The two notions of positivity coincide for pointed dcpos">The two notions of positivity coincide for pointed dcpos</fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then an element <fr:tex display="inline"><![CDATA[x:A]]></fr:tex> is a <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive element of the pointed dcpo</fr:link> if and only if <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{x}}{A}]]></fr:tex> is a <fr:link href="/jms-002R/" title="Positive elements in a dominion" uri="https://www.jonmsterling.com/jms-002R/" display-uri="jms-002R" type="local">positive element in the dominion</fr:link> <fr:tex display="inline"><![CDATA[\mathcal {O}]]></fr:tex> of Scott-open immersions of dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>21</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We first observe that the <fr:link href="/jms-002R/" title="Positive elements in a dominion" uri="https://www.jonmsterling.com/jms-002R/" display-uri="jms-002R" type="local">latter condition</fr:link> is equivalent to the following:</html:p>
  <html:blockquote>For any <fr:tex display="inline"><![CDATA[u\in  LA]]></fr:tex>, if <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p: u{\downarrow }}u[p]]]></fr:tex> then <fr:tex display="inline"><![CDATA[u{\downarrow }=\top ]]></fr:tex>.</html:blockquote>

  <html:p>This follows from the <fr:link href="https://github.com/jonsterling/coq-domains/blob/main/theories/Path.v" type="external">(constructive) characterization</fr:link> of the <fr:link href="/jms-002Q/" title="Paths in a dominion" uri="https://www.jonmsterling.com/jms-002Q/" display-uri="jms-002Q" type="local">path</fr:link> order in dcpos. Therefore, our result follows from our <fr:link href="/jms-002T/" title="Characterization of positivity in terms of partial elements" uri="https://www.jonmsterling.com/jms-002T/" display-uri="jms-002T" type="local">earlier characterization</fr:link> of positive elements of a pointed dcpo in terms of partial elements.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002N/</fr:uri>
            <fr:display-uri>jms-002N</fr:display-uri>
            <fr:route>/jms-002N/</fr:route>
            <fr:title text="Positively generated elements are non-negatively generated">Positively generated elements are non-negatively generated</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[a]]></fr:tex> be a <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated element</fr:link> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[a]]></fr:tex> is also <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We must check that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup _{p:\lnot {\mathopen {}\left (a = \bot \right )\mathclose {}}}a]]></fr:tex>. By assumption, it suffices to check that <fr:tex display="inline"><![CDATA[\bigsqcup _{p:\mathsf {pos}\,a}a\sqsubseteq \bigsqcup _{p:\lnot {\mathopen {}\left (a=\bot \right )\mathclose {}}}a]]></fr:tex>, which follows because <fr:link href="/jms-002H/" title="The bottom element is not positive" uri="https://www.jonmsterling.com/jms-002H/" display-uri="jms-002H" type="local">the bottom element is not positive</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002B/</fr:uri>
            <fr:display-uri>jms-002B</fr:display-uri>
            <fr:route>/jms-002B/</fr:route>
            <fr:title text="Liftedness = positive generation">Liftedness = positive generation</fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is lifted if and only if it is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from two existing lemmas:</html:p>

  <html:ol><html:li><fr:link href="/jms-0025/" title="Lifted dcpos are positively generated" uri="https://www.jonmsterling.com/jms-0025/" display-uri="jms-0025" type="local">Lifted dcpos (free algebras) are positively generated</fr:link>.</html:li>
    <html:li><fr:link href="/jms-002A/" title="Positively generated pointed dcpos are free" uri="https://www.jonmsterling.com/jms-002A/" display-uri="jms-002A" type="local">Positively generated pointed dcpos are free</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-002A/</fr:uri>
            <fr:display-uri>jms-002A</fr:display-uri>
            <fr:route>/jms-002A/</fr:route>
            <fr:title text="Positively generated pointed dcpos are free">Positively generated pointed dcpos are free</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is canonically <html:em>free</html:em> on its <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo of positive elements</fr:link> <fr:tex display="inline"><![CDATA[A^+]]></fr:tex>. More specifically, the embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv {A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> <fr:link href="/jms-0020/" title="Pointed dcpos with open positivity predicates are almost free" uri="https://www.jonmsterling.com/jms-0020/" display-uri="jms-0020" type="local">given by</fr:link> the <fr:link href="/jms-0021/" title="The “purification” map" uri="https://www.jonmsterling.com/jms-0021/" display-uri="jms-0021" type="local">purification map</fr:link> is an isomorphism of dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>First, we recall that the embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv \mathsf {purify}_A]]></fr:tex> <fr:link href="/jms-0020/" title="Pointed dcpos with open positivity predicates are almost free" uri="https://www.jonmsterling.com/jms-0020/" display-uri="jms-0020" type="local">exists</fr:link> because <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link> by <fr:link href="/jms-0027/" title="Positively generated dcpos have open positivity predicates" uri="https://www.jonmsterling.com/jms-0027/" display-uri="jms-0027" type="local">virtue of</fr:link> its <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positive generation</fr:link>. Therefore, the statement of this lemma is well-formed.</html:p>

  <html:p>Because <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv \mathsf {purify}_A]]></fr:tex> is an embedding-projection pair, it remains only to check that <fr:tex display="inline"><![CDATA[\mathsf {purify}_A;\mathsf {L}{\iota ^+};\alpha _A]]></fr:tex> is an <html:em>inflation</html:em>, i.e. for all <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> we must have <fr:tex display="inline"><![CDATA[a \sqsubseteq  \alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\mathsf {purify}_Aa\right )\mathclose {}}\right )\mathclose {}}]]></fr:tex>. As the latter is equal to <fr:tex display="inline"><![CDATA[\bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>, the inflation condition follows from our assumption that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0029/</fr:uri>
            <fr:display-uri>jms-0029</fr:display-uri>
            <fr:route>/jms-0029/</fr:route>
            <fr:title text="Positivity is upward-closed">Positivity is upward-closed</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[i\sqsubseteq  j]]></fr:tex> in a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[i]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>; then <fr:tex display="inline"><![CDATA[j]]></fr:tex> is <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Fixing semidirected <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[j\sqsubseteq  \bigsqcup {J}]]></fr:tex>, we must show that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited. This follows from our assumption that <fr:tex display="inline"><![CDATA[i]]></fr:tex> is positive becuase <fr:tex display="inline"><![CDATA[i\sqsubseteq  j\sqsubseteq  \bigsqcup {J}]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0028/</fr:uri>
            <fr:display-uri>jms-0028</fr:display-uri>
            <fr:route>/jms-0028/</fr:route>
            <fr:title text="The positive part of a semidirected subset is semidirected">The positive part of a semidirected subset is semidirected</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be a semidirected subset of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>; then the intersection <fr:tex display="inline"><![CDATA[I \cap  A^+]]></fr:tex> is semidirected, where <fr:tex display="inline"><![CDATA[A^+]]></fr:tex> is the <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo spanned by positive elements</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[i,j]]></fr:tex> be two <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> elements of <fr:tex display="inline"><![CDATA[I]]></fr:tex>; we must show that there exists a positive element <fr:tex display="inline"><![CDATA[k\in  I]]></fr:tex> such that <fr:tex display="inline"><![CDATA[i\sqsubseteq  k]]></fr:tex> and <fr:tex display="inline"><![CDATA[j\sqsubseteq  k]]></fr:tex>. This follows immediately from the directedness of <fr:tex display="inline"><![CDATA[I]]></fr:tex> and <fr:link href="/jms-0029/" title="Positivity is upward-closed" uri="https://www.jonmsterling.com/jms-0029/" display-uri="jms-0029" type="local">the fact that positivity is monotone</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0027/</fr:uri>
            <fr:display-uri>jms-0027</fr:display-uri>
            <fr:route>/jms-0027/</fr:route>
            <fr:title text="Positively generated dcpos have open positivity predicates">Positively generated dcpos have open positivity predicates</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be a directed subset such that <fr:tex display="inline"><![CDATA[\bigsqcup {I}]]></fr:tex> is positive; we must find a positive element of <fr:tex display="inline"><![CDATA[I]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link> we know that <fr:tex display="inline"><![CDATA[\bigsqcup {I} \sqsubseteq  \bigsqcup {\mathopen {}\left (I\cap  A^+\right )\mathclose {}}]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\bigsqcup {I}]]></fr:tex> is positive and <fr:tex display="inline"><![CDATA[I\cap  A^+]]></fr:tex> <fr:link href="/jms-0028/" title="The positive part of a semidirected subset is semidirected" uri="https://www.jonmsterling.com/jms-0028/" display-uri="jms-0028" type="local">is semidirected</fr:link>, it follows that the latter is inhabited.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0026/</fr:uri>
            <fr:display-uri>jms-0026</fr:display-uri>
            <fr:route>/jms-0026/</fr:route>
            <fr:title text="Non-negatively generated basis yields positive generation">Non-negatively generated basis yields positive generation</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> continuous dcpo presented by a basis <fr:tex display="inline"><![CDATA[B\subseteq  A]]></fr:tex> such that each element of <fr:tex display="inline"><![CDATA[B]]></fr:tex> is <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link> in <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Then <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-0023/" title="Positively generated dcpos" uri="https://www.jonmsterling.com/jms-0023/" display-uri="jms-0023" type="local">positively generated</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We must show that for any <fr:tex display="inline"><![CDATA[a\in  A]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[a \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>. Let <fr:tex display="inline"><![CDATA[B_a]]></fr:tex> be the subset <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{b \in  B \mid  b\ll  a\right \}\mathclose {}}]]></fr:tex>. By assumption, it suffices to check that <fr:tex display="inline"><![CDATA[\bigsqcup  B_a \sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[b\in  B_a]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[b\sqsubseteq  \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>.</html:p>

  <html:p>As <fr:tex display="inline"><![CDATA[b]]></fr:tex> is assumed to be <fr:link href="/jms-002J/" title="Non-negatively generated elements" uri="https://www.jonmsterling.com/jms-002J/" display-uri="jms-002J" type="local">non-negatively generated</fr:link>, we have <fr:tex display="inline"><![CDATA[b=\bigsqcup _{p:\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}}b]]></fr:tex> so to check <fr:tex display="inline"><![CDATA[b\sqsubseteq \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex> it suffices to check that <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}]]></fr:tex> implies that <fr:tex display="inline"><![CDATA[a]]></fr:tex> is positive. We fix semidirected <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {J} = \bigsqcup {\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  J\right )\mathclose {}}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited. We recall that <fr:tex display="inline"><![CDATA[b\ll  a]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\sqsubseteq  \bigsqcup {\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  J\right )\mathclose {}}]]></fr:tex>, so it follows by the definition of the <fr:link href="/jms-002V/" title="The way-below relation" uri="https://www.jonmsterling.com/jms-002V/" display-uri="jms-002V" type="local">way-below relation</fr:link> that either <fr:tex display="inline"><![CDATA[b\sqsubseteq  \bot ]]></fr:tex> or there exists <fr:tex display="inline"><![CDATA[j\in  J]]></fr:tex> such that <fr:tex display="inline"><![CDATA[b\sqsubseteq  j]]></fr:tex>. The first case is contradictory by our assumption that <fr:tex display="inline"><![CDATA[\lnot {\mathopen {}\left (b=\bot \right )\mathclose {}}]]></fr:tex>, and the second case verifies that <fr:tex display="inline"><![CDATA[J]]></fr:tex> is inhabited, so <fr:tex display="inline"><![CDATA[a]]></fr:tex> is positive.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0023/</fr:uri>
            <fr:display-uri>jms-0023</fr:display-uri>
            <fr:route>/jms-0023/</fr:route>
            <fr:title text="Positively generated dcpos">Positively generated dcpos</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>When a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> satisfies either of the following equivalent conditions, we will refer to it as <html:em>positively generated</html:em>.</html:p><html:ol><html:li>Every element <fr:tex display="inline"><![CDATA[a: A]]></fr:tex> is <fr:link href="/jms-002F/" title="Positively generated elements" uri="https://www.jonmsterling.com/jms-002F/" display-uri="jms-002F" type="local">positively generated</fr:link>, i.e. we have <fr:tex display="inline"><![CDATA[a = \bigsqcup _{p:\mathsf {pos}\,a}a]]></fr:tex>.</html:li>
  <html:li>For any semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[\bigsqcup  I = \bigsqcup  {\mathopen {}\left \{a\in  I \mid  \mathsf {pos}\,a\right \}\mathclose {}}]]></fr:tex>.</html:li></html:ol>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>(2) implies (1) by setting <fr:tex display="inline"><![CDATA[I = {\mathopen {}\left \{a\right \}\mathclose {}}]]></fr:tex>. Conversely, assume that each element is the supremum of its positive part and fix a semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>. We compute:</html:p>

  <fr:tex display="block"><![CDATA[\bigsqcup {\mathopen {}\left \{a \in  I \mid  \mathsf {pos}\,a\right \}\mathclose {}}
  =
  \bigsqcup _{a\in  {\mathopen {}\left \{a \in  I\mid  \mathsf {pos}\,a\right \}\mathclose {}}}a
  =
  \bigsqcup _{a\in  I}\bigsqcup _{p\in  \mathsf {pos}\,a} a
  =
  \bigsqcup _{a\in  I} a
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>16</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0022/</fr:uri>
            <fr:display-uri>jms-0022</fr:display-uri>
            <fr:route>/jms-0022/</fr:route>
            <fr:title text="Open positivity predicate">Open positivity predicate</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>We say that a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <html:em>open positivity predicate</html:em> if and only if any of the following equivalent conditions hold:</html:p>
            <html:ol><html:li>The positivity predicate <fr:tex display="inline"><![CDATA[{\Gamma  A}\xrightarrow {{\mathsf {pos}}}{\Omega }]]></fr:tex> tracks a continuous morphism of dcpos <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {pos}}}{\Sigma }]]></fr:tex>.</html:li>

  <html:li>The embedding <fr:tex display="inline"><![CDATA[{A^+}\xrightarrow {{\iota ^+}}{A}]]></fr:tex> is a Scott-open immersion.</html:li>
  <html:li>For a directed subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, if <fr:tex display="inline"><![CDATA[\bigsqcup {A}]]></fr:tex> is positive then there exists an element <fr:tex display="inline"><![CDATA[a\in  I]]></fr:tex> that is positive in <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:li></html:ol>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0021/</fr:uri>
            <fr:display-uri>jms-0021</fr:display-uri>
            <fr:route>/jms-0021/</fr:route>
            <fr:title text="The “purification” map">The “purification” map</fr:title>
            <fr:taxon>Construction</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo with an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>; we define the “purification” map <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> into the lift of the <fr:link href="/jms-001P/" title="The subdcpo spanned by positive elements" uri="https://www.jonmsterling.com/jms-001P/" display-uri="jms-001P" type="local">subdcpo of positive elements</fr:link> to send <fr:tex display="inline"><![CDATA[a\in  A]]></fr:tex> to the partial element <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {pos}\,{a},\lambda  p. a\right )\mathclose {}}]]></fr:tex>; we note:</html:p>
            <fr:tex display="block"><![CDATA[ \mathsf {purify}_Aa = {\mathopen {}\left (\mathsf {pos}\,{a},\lambda  p. a\right )\mathclose {}} = \bigsqcup _{p:\mathsf {pos}\,a}\eta _Aa]]></fr:tex>
            <html:p>The mapping defined above  is continuous because we have assumed that <fr:tex display="inline"><![CDATA[A]]></fr:tex> has an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>, so its domain of definition defines a Scott-open subdcpo of <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link>
              </fr:author>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-0020/</fr:uri>
            <fr:display-uri>jms-0020</fr:display-uri>
            <fr:route>/jms-0020/</fr:route>
            <fr:title text="Pointed dcpos with open positivity predicates are almost free">Pointed dcpos with open positivity predicates are almost free</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo with an <fr:link href="/jms-0022/" title="Open positivity predicate" uri="https://www.jonmsterling.com/jms-0022/" display-uri="jms-0022" type="local">open positivity predicate</fr:link>; then the <fr:link href="/jms-0021/" title="The “purification” map" uri="https://www.jonmsterling.com/jms-0021/" display-uri="jms-0021" type="local">purification map</fr:link> <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{\mathsf {purify}_A}}{\mathsf {L}{A^+}}]]></fr:tex> is the projection part of an embedding-projection pair <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\mathsf {L}{\iota ^+};\alpha _A\right )\mathclose {}}\dashv  \mathsf {purify}_A]]></fr:tex>.</html:p>
 
  
  <html:figure><fr:resource hash="5df958f6003a31c2a0eae7def6a479ed"><fr:resource-content><html:img src="/5df958f6003a31c2a0eae7def6a479ed.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \node  (nw) {$\mathsf {L}{A^+}$};
    \node [right = 2.5cm of nw] (ne) {$A$};
    \node [below = of ne] (se) {$\mathsf {L}{A^+}$};
    \draw [>->] (nw) to node[above] {$\mathsf {L}{\iota ^+};\alpha _A$} (ne);
    \draw [->>] (ne) to node[right] {$\mathsf {purify}_A$} (se);
    \draw [double] (nw) to node[sloped,below] {$1_{\mathsf {L}{A^+}}$} (se);
  \end {tikzpicture}
  \qquad 
  \begin {tikzpicture}[diagram]
    \node  (nw) {$A$};
    \node [below = of nw] (sw) {$\mathsf {L}{A^+}$};
    \node [right = 2.5cm of sw] (se) {$A$};
    \draw [->>] (nw) to node[left] {$\mathsf {purify}_A$} (sw);
    \draw [>->] (sw) to node[below] {$\mathsf {L}{\iota ^+};\alpha _A$} (se);
    \draw [double] (nw) to node[sloped,above] (idn) {$1_{A}$} (se);
    \node [between = sw and idn] {$\sqsubseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/tomdejong/" title="Tom de Jong" uri="https://www.jonmsterling.com/tomdejong/" display-uri="tomdejong" type="local">Tom de Jong</fr:link></fr:author><fr:author><fr:link href="/martinescardo/" title="Martín Hötzel Escardó" uri="https://www.jonmsterling.com/martinescardo/" display-uri="martinescardo" type="local">Martín Hötzel Escardó</fr:link></fr:author><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}: \mathsf {L}{A^+}]]></fr:tex> and compute explicitly using the fact that <fr:tex display="inline"><![CDATA[\mathsf {purify}_A]]></fr:tex> preserves the bottom element and therefore preserves semidirected subsets:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    \mathsf {purify}_A{\mathopen {}\left (\alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}\right )\mathclose {}}\right )\mathclose {}} & =
    \mathsf {purify}_A{\mathopen {}\left (\alpha _A{\mathopen {}\left (\phi ,a^+\right )\mathclose {}}\right )\mathclose {}}
    \\
                                                              & = \mathsf {purify}_A\bigsqcup _{p:\phi } a^+p
    \\
                                                              & = \bigsqcup _{p:\phi } \mathsf {purify}_A{\mathopen {}\left (a^+p\right )\mathclose {}}
    \\
                                                              & = \bigsqcup _{p:\phi } \bigsqcup _{q:\mathsf {pos}{\mathopen {}\left (a^+p\right )\mathclose {}}} a^+p
    \\
                                                              & =
    \bigsqcup _{p:\phi } a^+p
    \\
                                                              & =
    {\mathopen {}\left (\phi ,a^+\right )\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For the deflation, we fix <fr:tex display="inline"><![CDATA[a:A]]></fr:tex> and observe that
  <fr:tex display="inline"><![CDATA[
  \alpha _A{\mathopen {}\left (\mathsf {L}{\iota ^+}{\mathopen {}\left (\mathsf {purify}_A a\right )\mathclose {}}\right )\mathclose {}} =
  \bigsqcup _{p:\mathsf {pos}\,a} a
  ]]></fr:tex> which is evidently below <fr:tex display="inline"><![CDATA[a]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001Y/</fr:uri>
            <fr:display-uri>jms-001Y</fr:display-uri>
            <fr:route>/jms-001Y/</fr:route>
            <fr:title text="Monadicity of pointed dcpos">Monadicity of pointed dcpos</fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>The category of <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras and homomorphisms is (canonically) equivalent to the category of <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> and bottom-preserving morphisms of dcpos. It follows that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos are <html:em>monadic</html:em> over dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Having a bottom element and being an algebra are both <html:em>properties</html:em> of dcpos, because these structures are uniquely determined. Therefore, we will argue that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> with bottom-preserving morphisms form the same <html:em>subcategory</html:em> of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}]]></fr:tex> as the category of algebras with algebra-preserving maps. We have already seen that pointed structure and algebra structure are interchangeable:</html:p>

  <html:ol><html:li><fr:link href="/jms-001T/" title="Pointed dcpos are lift-algebras" uri="https://www.jonmsterling.com/jms-001T/" display-uri="jms-001T" type="local">Pointed dcpos are lift-algebras</fr:link></html:li>
    <html:li><fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">Lift-algebras are pointed</fr:link></html:li></html:ol>


  <html:p>To finish, we recall that a morphism of dcpos <fr:link href="/jms-001X/" title="Bottom-preserving maps vs. algebra morphisms" uri="https://www.jonmsterling.com/jms-001X/" display-uri="jms-001X" type="local">preserves algebra structure if and only if it preserves the bottom element</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001W/</fr:uri>
            <fr:display-uri>jms-001W</fr:display-uri>
            <fr:route>/jms-001W/</fr:route>
            <fr:title text="Pointed dcpos and lift-algebras">Pointed dcpos and lift-algebras</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001S/</fr:uri>
                <fr:display-uri>jms-001S</fr:display-uri>
                <fr:route>/jms-001S/</fr:route>
                <fr:title text="Pointed dcpo">Pointed dcpo</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>A dcpo is called <html:em>pointed</html:em> when it has a bottom element <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> under the information order.</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001U/</fr:uri>
                <fr:display-uri>jms-001U</fr:display-uri>
                <fr:route>/jms-001U/</fr:route>
                <fr:title text="Suprema of semidirected subsets in pointed dcpos">Suprema of semidirected subsets in pointed dcpos</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>A dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> if and only if it is closed under suprema of semidirected subsets.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is closed under suprema of semidirected subsets. In particular, we may consider the supremum <fr:tex display="inline"><![CDATA[\bigsqcup {\mathopen {}\left \{\right \}\mathclose {}}]]></fr:tex> of the empty set. This is evidently the bottom element, using the universal property of the supremum.</html:p>

  <html:p>Conversely, suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is pointed and let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be semidirected. We may replace <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> by the directed subset <fr:tex display="inline"><![CDATA[I' = I\cup  {\mathopen {}\left \{\bot \right \}\mathclose {}}]]></fr:tex>; the inclusion <fr:tex display="inline"><![CDATA[I\subseteq  I']]></fr:tex> is clearly cofinal, so the supremum of <fr:tex display="inline"><![CDATA[I']]></fr:tex> is also the supremum of <fr:tex display="inline"><![CDATA[I]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001T/</fr:uri>
                <fr:display-uri>jms-001T</fr:display-uri>
                <fr:route>/jms-001T/</fr:route>
                <fr:title text="Pointed dcpos are lift-algebras">Pointed dcpos are lift-algebras</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo carries a (unique) <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra structure.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The algebra structure is unique if it exists because <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex> is a Kock–Zöberlein monad, i.e. a monad for which the structure maps of algebras are left adjoint to the unit in the order-enrichment. Therefore, it suffices to show that there merely exists an algebra structure <fr:tex display="inline"><![CDATA[{\mathsf {L}{A}}\xrightarrow {{\alpha }}{A}]]></fr:tex> for any <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>

  <html:p>We define the structure map <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> to take <fr:tex display="inline"><![CDATA[u\in \mathsf {L}{A}]]></fr:tex> to the <fr:link href="/jms-001U/" title="Suprema of semidirected subsets in pointed dcpos" uri="https://www.jonmsterling.com/jms-001U/" display-uri="jms-001U" type="local">supremum of the semidirected subset</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{x\in  A \mid  u = \eta _Ax\right \}\mathclose {}}]]></fr:tex>, so we may write <fr:tex display="inline"><![CDATA[\alpha  u = \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>. It is not difficult to see that this assignment is continuous.</html:p>

  <html:p>The unit law for the algebra is trivial. The multiplication law is verified as follows:</html:p>

  <fr:tex display="block"><![CDATA[\alpha {\mathopen {}\left (\mathsf {L}{\alpha } {\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  = \alpha {\mathopen {}\left (\phi , \alpha  u\right )\mathclose {}}
  =
  \bigsqcup _{p:u{\downarrow }}
  \bigsqcup _{q:u[p]{\downarrow }}
  u[p][q]
  = \alpha {\mathopen {}\left (\mu _A{\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001V/</fr:uri>
                <fr:display-uri>jms-001V</fr:display-uri>
                <fr:route>/jms-001V/</fr:route>
                <fr:title text="Lift-algebras are pointed">Lift-algebras are pointed</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> be a <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra; then the underlying dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>To define the bottom element of <fr:tex display="inline"><![CDATA[A]]></fr:tex>, we choose <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[n\in  A]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  n]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> is a Kock–Zöberlein monad and thus we have <fr:tex display="inline"><![CDATA[\alpha \dashv \eta _{A}]]></fr:tex>, it is equivalent to observe that <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  \eta _{A}n]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001X/</fr:uri>
                <fr:display-uri>jms-001X</fr:display-uri>
                <fr:route>/jms-001X/</fr:route>
                <fr:title text="Bottom-preserving maps vs. algebra morphisms">Bottom-preserving maps vs. algebra morphisms</fr:title>
                <fr:taxon>Lemma</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> and <fr:tex display="inline"><![CDATA[{\mathopen {}\left (B,\beta \right )\mathclose {}}]]></fr:tex> be two <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras; then a morphism of dcpos <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> is a homomorphism of algebras if and only if it preserves the <fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">bottom element</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>It is clear that a homomorphism of algebras must preserve the bottom element. On the other hand, suppose that <fr:tex display="inline"><![CDATA[{A}\xrightarrow {{f}}{B}]]></fr:tex> preserves the bottom element to check that the following diagram commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="a12c1f3a32a1b3f57c1bd9b0cbcdb3e3"><fr:resource-content><html:img src="/a12c1f3a32a1b3f57c1bd9b0cbcdb3e3.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = TA,
      ne = TB,
      sw = A,
      se = B,
      north = Tf,
      south = f,
      west = \alpha ,
      east = \beta ,
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Because both composites preserve the bottom element, it is enough to observe that they both take <fr:tex display="inline"><![CDATA[u\in  TA]]></fr:tex> to the supremum of the following <html:em>semi</html:em>directed subset:</html:p>

  <fr:tex display="block"><![CDATA[{\mathopen {}\left \{n\in  B\mid  \exists  m:A. u=\eta _{A}m \land  n=fm\right \}\mathclose {}}]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001Y/</fr:uri>
                <fr:display-uri>jms-001Y</fr:display-uri>
                <fr:route>/jms-001Y/</fr:route>
                <fr:title text="Monadicity of pointed dcpos">Monadicity of pointed dcpos</fr:title>
                <fr:taxon>Corollary</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>The category of <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras and homomorphisms is (canonically) equivalent to the category of <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> and bottom-preserving morphisms of dcpos. It follows that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos are <html:em>monadic</html:em> over dcpos.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Having a bottom element and being an algebra are both <html:em>properties</html:em> of dcpos, because these structures are uniquely determined. Therefore, we will argue that <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed dcpos</fr:link> with bottom-preserving morphisms form the same <html:em>subcategory</html:em> of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}]]></fr:tex> as the category of algebras with algebra-preserving maps. We have already seen that pointed structure and algebra structure are interchangeable:</html:p>

  <html:ol><html:li><fr:link href="/jms-001T/" title="Pointed dcpos are lift-algebras" uri="https://www.jonmsterling.com/jms-001T/" display-uri="jms-001T" type="local">Pointed dcpos are lift-algebras</fr:link></html:li>
    <html:li><fr:link href="/jms-001V/" title="Lift-algebras are pointed" uri="https://www.jonmsterling.com/jms-001V/" display-uri="jms-001V" type="local">Lift-algebras are pointed</fr:link></html:li></html:ol>


  <html:p>To finish, we recall that a morphism of dcpos <fr:link href="/jms-001X/" title="Bottom-preserving maps vs. algebra morphisms" uri="https://www.jonmsterling.com/jms-001X/" display-uri="jms-001X" type="local">preserves algebra structure if and only if it preserves the bottom element</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
            </fr:tree>
            <html:p>By virtue of the <fr:link href="/jms-001Y/" title="Monadicity of pointed dcpos" uri="https://www.jonmsterling.com/jms-001Y/" display-uri="jms-001Y" type="local">monadicity result</fr:link>, we will refer to <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpos and <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebras interchangeably.</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2023</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>14</fr:day>
                </fr:date>
                <fr:uri>https://www.jonmsterling.com/jms-001R/</fr:uri>
                <fr:display-uri>jms-001R</fr:display-uri>
                <fr:route>/jms-001R/</fr:route>
                <fr:title text="Cocompleteness of lift-algebras">Cocompleteness of lift-algebras</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>We will deduce the closure of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under connected colimits using <fr:link href="/jms-002U/" title="Results in constructive monad theory" uri="https://www.jonmsterling.com/jms-002U/" display-uri="jms-002U" type="local">general results about monads</fr:link>. Then we use the results of <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link> to <fr:link href="/jms-005G/" title="The category of lift-algebras is cocomplete" uri="https://www.jonmsterling.com/jms-005G/" display-uri="jms-005G" type="local">deduce</fr:link> the cocompleteness of <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex>. <html:mark>Note that the proof establishing that the lift monad preserves connected colimits has an error in it. I have a fix for it, suggested by <fr:link href="/ohadkammar/" title="Ohad Kammar" uri="https://www.jonmsterling.com/ohadkammar/" display-uri="ohadkammar" type="local">Ohad Kammar</fr:link>, but I haven't written it down yet here.</html:mark></html:p>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>8</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001D/</fr:uri>
                    <fr:display-uri>jms-001D</fr:display-uri>
                    <fr:route>/jms-001D/</fr:route>
                    <fr:title text="Lifting as a co-comma construction">Lifting as a co-comma construction</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>For any dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>, the following is a co-comma square in the posetal 2-category of dcpos, where <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> takes a dcpo to its <html:em>lift</html:em> or <html:em>Scott-open partial map classifier</html:em>.</html:p>
 
  
  <html:figure><fr:resource hash="0b33979e8323ca58b43bb7f762d8e0b5"><fr:resource-content><html:img src="/0b33979e8323ca58b43bb7f762d8e0b5.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
  \begin {tikzpicture}[diagram]
    \SpliceDiagramSquare {
      nw = A,
      sw = A,
      ne = \mathbf {1}_{},
      se = \mathsf {L}{A},
      north = !_{A},
      east = \bot ,
      east/style = embedding,
      south/style = embedding,
      south = \eta _A,
      west/style = double,
    }
    \node  [between = nw and se] {$\sqsupseteq $};
  \end {tikzpicture}
]]></fr:resource-source></fr:resource></html:figure>
 

 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>We fix another lax square of the following form:</html:p>

  
 
  
  <html:figure><fr:resource hash="8bed4dbcbef36330f8096a7b4a0e14af"><fr:resource-content><html:img src="/8bed4dbcbef36330f8096a7b4a0e14af.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare {
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A},
        east = d_\bot ,
        south = d_A,
        west/style = double,
      }
      \node  [between = nw and se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We must show that there exists a <html:em>unique</html:em> morphism <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> factoring the square above through <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{d_\bot \sqsubseteq  d_A\right \}\mathclose {}}]]></fr:tex> as follows:</html:p>

  
 
  
  <html:figure><fr:resource hash="a466ed161a36af5f98013c1dd2a44cee"><fr:resource-content><html:img src="/a466ed161a36af5f98013c1dd2a44cee.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A,
        sw = A,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A},
        north = !_{A},
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _A,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$d_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$d_A$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !d$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>We will define <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d}D]]></fr:tex> to take <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex> to the least upper bound of the directed subset <fr:tex display="inline"><![CDATA[U = {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{d_A a\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\subseteq  D]]></fr:tex>. As this assignment evidently has the correct factorization property, it remains just to check that it is continuous. Letting <fr:tex display="inline"><![CDATA[V]]></fr:tex> be a directed subset of <fr:tex display="inline"><![CDATA[\mathsf {L}{A}]]></fr:tex>, we compute:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d\bigsqcup  V & = \bigsqcup \,{\mathopen {}\left (
      {\mathopen {}\left \{d_\bot \right \}\mathclose {}}\cup 
      {\mathopen {}\left \{d_Aa\mid  \bigsqcup  V = \eta _A a\right \}\mathclose {}}
    \right )\mathclose {}}
    \\
                & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  \eta _Aa\in  V\right \}\mathclose {}}\right )\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{\bigsqcup  {\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}} \mid  a^{?}\in  V\right \}\mathclose {}}
    \\
                & = \bigsqcup {\mathopen {}\left \{da^{?}\mid  a^{?}\in  V\right \}\mathclose {}}
  \end {aligned}
  ]]></fr:tex>


  <html:p>For uniqueness, suppose that we have two morphisms <fr:tex display="inline"><![CDATA[\mathsf {L}{A}\xrightarrow {d,d'}D]]></fr:tex> factoring our square in the sense described above and fix <fr:tex display="inline"><![CDATA[a^{?}:\mathsf {L}{A}]]></fr:tex>:</html:p>

  <fr:tex display="block"><![CDATA[\begin {aligned}
    d a^{?} & = d\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}}\cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d_\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d_Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = \bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{d'\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{d'\,{\mathopen {}\left (\eta _Aa\right )\mathclose {}}\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'\bigsqcup \,{\mathopen {}\left ({\mathopen {}\left \{\bot \right \}\mathclose {}} \cup  {\mathopen {}\left \{\eta _Aa\mid  a^{?}=\eta _Aa\right \}\mathclose {}}\right )\mathclose {}}
    \\
              & = d'a^{?}
  \end {aligned}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>8</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001F/</fr:uri>
                    <fr:display-uri>jms-001F</fr:display-uri>
                    <fr:route>/jms-001F/</fr:route>
                    <fr:title text="Lifting preserves connected colimits">Lifting preserves connected colimits</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex> be a diagram of dcpos indexed in a connected category <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>. Then the lifting endofunctor <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> on dcpos preserves the colimit of <fr:tex display="inline"><![CDATA[A_\bullet ]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>8</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[A_\bullet \xrightarrow {\iota _\bullet }{\mathopen {}\left \{A_\infty \right \}\mathclose {}}]]></fr:tex> be a universal cocone; we must show that <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> is universal as well, i.e. show any cocone <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {d_\bullet }{\mathopen {}\left \{D\right \}\mathclose {}}]]></fr:tex> factors uniquely through <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\bullet }\xrightarrow {\mathsf {L}{\iota _\bullet }}{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}]]></fr:tex> in the following sense:</html:p>

  
 
  
  <html:figure><fr:resource hash="4fd9a1490d281cbc24b652123bac4ff4"><fr:resource-content><html:img src="/4fd9a1490d281cbc24b652123bac4ff4.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [exists,->] (ne) to node[right] {$\exists !{\mathopen {}\left \{d_\infty \right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the <fr:link href="/jms-001D/" title="Lifting as a co-comma construction" uri="https://www.jonmsterling.com/jms-001D/" display-uri="jms-001D" type="local">universal property of <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> as a co-comma dcpo</fr:link>, we may define <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }\xrightarrow {d_\infty }D]]></fr:tex> to be the universal map determined by a certain lax square in the following configuration:</html:p>

  
 
  
  <html:figure><fr:resource hash="756d18c413e345dee58f06695c582131"><fr:resource-content><html:img src="/756d18c413e345dee58f06695c582131.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = D,
        north = !_{A_\infty },
        east = {h_\bot },
        east/style = {exists,->},
        south/style = {exists,->},
        south = {h_{A_\infty }},
        west/style = double,
      }
      \node [between = sq/nw and sq/se] {$\sqsupseteq $};
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>First we define <fr:tex display="inline"><![CDATA[{\mathbf {1}_{}}\xrightarrow {{h_\bot }}{D}]]></fr:tex> to be the element <fr:tex display="inline"><![CDATA[d_i\bot ]]></fr:tex> determined by an <html:em>arbitrary</html:em> object <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex>. To see that this is well-defined, fix <fr:tex display="inline"><![CDATA[i,j\in  \mathcal {I}]]></fr:tex> to check that <fr:tex display="inline"><![CDATA[d_i\bot =d_j\bot ]]></fr:tex>. As <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex> is connected, we may proceed by induction on a zigzag <fr:tex display="inline"><![CDATA[i\leadsto  j\in  \mathcal {I}]]></fr:tex>; ultimately, this amounts to checking that for any span <fr:tex display="inline"><![CDATA[i\leftarrow  k \rightarrow  j]]></fr:tex> in <fr:tex display="inline"><![CDATA[\mathcal {I}]]></fr:tex>, we have <fr:tex display="inline"><![CDATA[d_i\bot =d_k\bot =d_j\bot ]]></fr:tex>. This follows from the strictness of lifted morphisms as well as the naturality of the cocone <fr:tex display="inline"><![CDATA[d_\bullet ]]></fr:tex>.</html:p>

  <html:p>Next we define <fr:tex display="inline"><![CDATA[{A_\infty }\xrightarrow {{h_{A_\infty }}}{D}]]></fr:tex> using the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="5a4977e222292b9bffcdd38beea7dd93"><fr:resource-content><html:img src="/5a4977e222292b9bffcdd38beea7dd93.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \DiagramSquare {
      nw = A_\bullet ,
      sw = \mathsf {L}{A_\bullet },
      ne = {\mathopen {}\left \{A_\infty \right \}\mathclose {}},
      se = {\mathopen {}\left \{D\right \}\mathclose {}},
      west/style = embedding,
      west = \eta _{A_\bullet },
      north = \iota _\bullet ,
      south = d_\bullet ,
      east/style = {exists,->},
      east = \exists !{\mathopen {}\left \{h_{A_\infty }\right \}\mathclose {}},
    }
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>To arrange <fr:tex display="inline"><![CDATA[h_{A_\infty }]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_\bot ]]></fr:tex> into the desired lax square, we must check that for all <fr:tex display="inline"><![CDATA[a_\infty :A_\infty ]]></fr:tex> we have <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }a_\infty ]]></fr:tex>. Fixing arbitrary <fr:tex display="inline"><![CDATA[i\in  \mathcal {I}]]></fr:tex> and <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[h_\bot  \sqsubseteq  h_{A_\infty }\iota _{i}a]]></fr:tex>. As <fr:tex display="inline"><![CDATA[h_\bot =d_i\bot ]]></fr:tex> and <fr:tex display="inline"><![CDATA[h_{A_\infty }\iota _ia = d_i\eta _{A_i}a]]></fr:tex>, our goal follows directly from the monotonicity of <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_i}}\xrightarrow {{d_i}}{D}]]></fr:tex>.</html:p>

  <html:p><html:mark>The reasoning above is not correct, we do not know that we can restrict attention to <fr:tex display="inline"><![CDATA[a\in  A_i]]></fr:tex>. This is indeed the case, but need to make it explicit.</html:mark></html:p>

  <html:p>Thus we have the desired lax square and a unique morphism <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{h}}{D}]]></fr:tex> factoring it through the co-comma square that defines <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex>:</html:p>

  
 
  
  <html:figure><fr:resource hash="7cb13a9c50b1f1e22ae054dd0587dc91"><fr:resource-content><html:img src="/7cb13a9c50b1f1e22ae054dd0587dc91.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \SpliceDiagramSquare <sq/>{
        nw = A_\infty ,
        sw = A_\infty ,
        ne = \mathbf {1}_{},
        se = \mathsf {L}{A_\infty },
        north = !_{A_\infty },
        east = \bot ,
        east/style = embedding,
        south/style = embedding,
        south = \eta _{A_\infty },
        width = 2.5cm,
        west/style = double,
        east/node/style = upright desc,
        south/node/style = upright desc,
      }
      \node  [between = sq/nw and sq/se] {$\sqsupseteq $};
      \node  (se) [below right = of sq/se] {$D$};
      \draw [->,bend left=30] (sq/ne) to node[right] {$h_\bot $} (se);
      \draw [->,bend right=30] (sq/sw) to node[sloped,below] {$h_{A_\infty }$} (se);
      \draw [->,exists] (sq/se) to node[desc] {$\exists !h$} (se);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Our goal is to show that we may choose the universal map <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{d_\infty }}{D}]]></fr:tex> corresponding to the cocone <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> to be the morphism <fr:tex display="inline"><![CDATA[h]]></fr:tex> defined above. First we must prove that the following triangle commutes:</html:p>

  
 
  
  <html:figure><fr:resource hash="d803bf48a41518517c81554b8bf81852"><fr:resource-content><html:img src="/d803bf48a41518517c81554b8bf81852.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (nw) {$LA_\bullet $};
      \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
      \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
      \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
      \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
      \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 


  <html:p>Using the universal property of the co-comma squares for each <fr:tex display="inline"><![CDATA[\mathsf {L}{A_i}]]></fr:tex>, it suffices to check that two diagrams commute:</html:p>
  <html:ol><html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="a7e2afefaf975f34a17b894fa9991765"><fr:resource-content><html:img src="/a7e2afefaf975f34a17b894fa9991765.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {${\mathopen {}\left \{\mathbf {1}_{}\right \}\mathclose {}}$};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\bot $} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting using the strictness of lifted morphisms, this amounts to the established fact that <fr:tex display="inline"><![CDATA[h\bot  = h_\bot ]]></fr:tex>.</html:p></html:li>

    <html:li><html:p>We must check that the outer triangle below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="fddc455f17cd3f5ddbc90bc089731c90"><fr:resource-content><html:img src="/fddc455f17cd3f5ddbc90bc089731c90.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [right = of nww] (nw) {$LA_\bullet $};
          \node [right = of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->] (nw) to node[above] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding] (nww) to node[above] {$\eta _{A_\bullet }$} (nw);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure>
 


      <html:p>Rewriting with established equations, it suffices to observe that the outer diagram below commutes:</html:p>

      
 
  
  <html:figure><fr:resource hash="f2f99c5cb6ff34b8755f764313e0c992"><fr:resource-content><html:img src="/f2f99c5cb6ff34b8755f764313e0c992.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
        \begin {tikzpicture}[diagram]
          \node  (nww) {$A_\bullet $};
          \node [below = of nww] (sww) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \node [right = 2.5cm of nww] (nw) {$LA_\bullet $};
          \node [right = 2.5cm of nw] (ne) {${\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}$};
          \node [below = of ne] (se) {${\mathopen {}\left \{D\right \}\mathclose {}}$};
          \draw [->] (ne) to node[right] {${\mathopen {}\left \{h\right \}\mathclose {}}$} (se);
          \draw [->,gray] (nw) to node[sloped,below] {$d_\bullet $} (se);
          \draw [->,gray] (nw) to node[upright desc,] {$\mathsf {L}{\iota _\bullet }$} (ne);
          \draw [embedding,gray] (nww) to node[upright desc,] {$\eta _{A_\bullet }$} (nw);
          \draw [->] (nww) to node[left] {$\iota _{\bullet }$} (sww);
          \draw [->] (sww) to node[below] {$h_{A_\infty }$} (se);
          \node [above = of nw] (nnw) {${\mathopen {}\left \{A_\infty \right \}\mathclose {}}$};
          \draw [->] (nww) to node[sloped,above] {$\iota _\bullet $} (nnw);
          \draw [->] (nnw) to node[sloped,above] {${\mathopen {}\left \{\eta _{A_\infty }\right \}\mathclose {}}$} (ne);
        \end {tikzpicture}
      ]]></fr:resource-source></fr:resource></html:figure></html:li>

    <html:p>Finally, we must check that any two morphisms <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\infty }}\xrightarrow {{k,k'}}{D}]]></fr:tex> factoring <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{d_\bullet }}{{\mathopen {}\left \{D\right \}\mathclose {}}}]]></fr:tex> through <fr:tex display="inline"><![CDATA[{\mathsf {L}{A_\bullet }}\xrightarrow {{\mathsf {L}{\iota _\bullet }}}{{\mathopen {}\left \{\mathsf {L}{A_\infty }\right \}\mathclose {}}}]]></fr:tex> are equal. To that end, we will use the universal property of the co-comma square defining <fr:tex display="inline"><![CDATA[\mathsf {L}{A_\infty }]]></fr:tex> once more to reduce this to checking that <fr:tex display="inline"><![CDATA[k,k']]></fr:tex> agree on <fr:tex display="inline"><![CDATA[\bot ]]></fr:tex> and on <fr:tex display="inline"><![CDATA[\eta _{A_\bullet }]]></fr:tex>. The former follows directly from the strictness of <fr:tex display="inline"><![CDATA[\mathsf {L}{\iota _\bullet }]]></fr:tex>, as we have <fr:tex display="inline"><![CDATA[k\bot  = k{\mathopen {}\left (\mathsf {L} \iota _\bullet \bot \right )\mathclose {}}=d_\bullet \bot ]]></fr:tex>. For the latter, we must check that <fr:tex display="inline"><![CDATA[k\circ  \eta _{A_\infty }=k'\circ  \eta _{A_\infty }]]></fr:tex>; by the universal property of the colimiting cocone <fr:tex display="inline"><![CDATA[{A_\bullet }\xrightarrow {{\iota _\bullet }}{A_\infty }]]></fr:tex>, it suffices to check that <fr:tex display="inline"><![CDATA[k\circ \eta _{A_\infty }\circ  \iota _\bullet  = k'\circ \eta _{A_\infty }\circ \iota _\bullet ]]></fr:tex>. By naturality of the unit, these are both equal to <fr:tex display="inline"><![CDATA[d_\bullet \circ  \eta _{A_\bullet }]]></fr:tex>.</html:p></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>2</fr:month>
                      <fr:day>12</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-001L/</fr:uri>
                    <fr:display-uri>jms-001L</fr:display-uri>
                    <fr:route>/jms-001L/</fr:route>
                    <fr:title text="Connected colimits of lift-algebras">Connected colimits of lift-algebras</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> be the lifting monad on dcpos; the Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> is closed under connected colimits, and these colimits are <fr:link href="/jms-001H/" title="Creation of (co)limits" uri="https://www.jonmsterling.com/jms-001H/" display-uri="jms-001H" type="local">created</fr:link> by the forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>12</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the following facts:</html:p>
  <html:ol><html:li>The category of dcpos is (even constructively) <fr:link href="/jung-moshier-vickers-2008/" title="Presenting dcpos and dcpo algebras" uri="https://www.jonmsterling.com/jung-moshier-vickers-2008/" display-uri="jung-moshier-vickers-2008" type="local">known to be cocomplete</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">Lifting preserves connected colimits</fr:link>.</html:li>
    <html:li><fr:link href="/jms-001K/" title="Creation of colimits by the forgetful functor" uri="https://www.jonmsterling.com/jms-001K/" display-uri="jms-001K" type="local">The forgetful functor <fr:tex display="inline"><![CDATA[{\mathsf {dcpo}^{\mathbb {L}}}\xrightarrow {{\mathsf {U}^{\mathbb {L}}}}{\mathsf {dcpo}}]]></fr:tex> creates whatever colimits <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> preserves</fr:link>.</html:li></html:ol>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>5</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-005F/</fr:uri>
                    <fr:display-uri>jms-005F</fr:display-uri>
                    <fr:route>/jms-005F/</fr:route>
                    <fr:title text="Coproducts of lift-algebras">Coproducts of lift-algebras</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos has all small coproducts.</html:p><html:p>This is the first part of Corollary 2 of Linton's <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Coequalizers in categories of algebras</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The coproduct of lift-algebras is computed as a reflexive coequalizer, whose existence we have <fr:link href="/jms-001L/" title="Connected colimits of lift-algebras" uri="https://www.jonmsterling.com/jms-001L/" display-uri="jms-001L" type="local">already established</fr:link>. Given an index set <fr:tex display="inline"><![CDATA[I]]></fr:tex> and a diagram <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex>, the colimit of the following reflexive pair is the coproduct of <fr:tex display="inline"><![CDATA[{I}\xrightarrow {{X_{\bullet }}}{\mathsf {dcpo}^{\mathbb {L}}}]]></fr:tex> as shown by <fr:link href="/linton-1969-coequalizers/" title="Coequalizers in categories of algebras" uri="https://www.jonmsterling.com/linton-1969-coequalizers/" display-uri="linton-1969-coequalizers" type="local">Linton</fr:link>:</html:p>
  
 
  
  <html:figure><fr:resource hash="8c54957660ade9f9bef9650c25a07c4d"><fr:resource-content><html:img src="/8c54957660ade9f9bef9650c25a07c4d.svg" /></fr:resource-content><fr:resource-source type="latex" part="preamble"><![CDATA[
   
  \RequirePackage{tikz}
 \RequirePackage{amsmath}
 \usetikzlibrary{backgrounds, intersections, calc, spath3, fit}

 \definecolor{catccolor}{RGB}{255,244,138}
 \tikzstyle{dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
 \tikzstyle{catc}=[catccolor!60]
 \tikzstyle{catd}=[orange!40]
 \tikzstyle{cate}=[red!40]
 \tikzstyle{catf}=[blue!10]
 \tikzstyle{catg}=[green!25]


 \tikzstyle{blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
 \tikzstyle{white halo}=[fill=white, opacity=0.7, rounded corners]

 \NewDocumentCommand\CreateRect{D<>{} m m}{
   \path
     coordinate (#1nw)
     ++(#2,-#3) coordinate (#1se)
     coordinate (#1sw) at (#1se -| #1nw)
     coordinate (#1ne) at (#1nw -| #1se)
   ;

   \path[spath/save = #1north] (#1nw) to (#1ne);
   \path[spath/save = #1west] (#1nw) to (#1sw);
   \path[spath/save = #1east] (#1ne) to (#1se);
   \path[spath/save = #1south] (#1sw) to (#1se);
 }

   
  \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd}
 \usetikzlibrary{matrix,arrows}
 \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
 \usetikzlibrary{decorations.pathreplacing}
 \usetikzlibrary{decorations.pathmorphing}
 \usetikzlibrary{decorations.markings}

 \tikzset{
   desc/.style={sloped, fill=white,inner sep=2pt},
   upright desc/.style={fill=white,inner sep=2pt},
   pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pullback 45/.style = {
     append after command={
       \pgfextra{
         \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   ne pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   sw pullback/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   dotted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   muted pullback/.style = {
     append after command={
       \pgfextra{
         \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
       }
     }
   },
   pushout/.style = {
     append after command={
       \pgfextra{
         \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
       }
     }
   },
   between/.style args={#1 and #2}{
     at = ($(#1)!0.5!(#2)$)
   },
   diagram/.style = {
     on grid,
     node distance=2cm,
     commutative diagrams/every diagram,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
     }
   },
   fibration/.style = {
     -{Triangle[open]}
   },
   etale/.style = {
     -{Triangle[open]}
   },
   etale cover/.style= {
     >={Triangle[open]},->.>
   },
   opfibration/.style = {
     -{Triangle}
   },
   lies over/.style = {
     |-{Triangle[open]}
   },
   op lies over/.style = {
     |-{Triangle}
   },
   embedding/.style = {
     {right hook}->
   },
   open immersion/.style = {
     {right hook}-{Triangle[open]}
   },
   closed immersion/.style = {
     {right hook}-{Triangle}
   },
   closed immersion*/.style = {
     {left hook}-{Triangle}
   },
   embedding*/.style = {
     {left hook}->
   },
   open immersion*/.style = {
     {left hook}-{Triangle[open]}
   },
   exists/.style = {
     densely dashed
   },
 }

 \newlength{\dontworryaboutit}

 \tikzset{
   inline diagram/.style = {
     commutative diagrams/every diagram,
     commutative diagrams/cramped,
     line width = .5pt,
     every node/.append style = {
       commutative diagrams/every cell,
       anchor = base,
       inner sep = 0pt
     },
     every path/.append style = {
       outer xsep = 2pt
     }
   }
 }

 \tikzset{
   square/nw/.style = {},
   square/ne/.style = {},
   square/se/.style = {},
   square/sw/.style = {},
   square/north/.style = {->},
   square/south/.style = {->},
   square/west/.style = {->},
   square/east/.style = {->},
   square/north/node/.style = {above},
   square/south/node/.style = {below},
   square/west/node/.style = {left},
   square/east/node/.style = {right},
 }

 \ExplSyntaxOn

 \bool_new:N \l_jon_glue_west

 \keys_define:nn { jon-tikz/diagram } {
   nw .tl_set:N = \l_jon_tikz_diagram_nw,
   sw .tl_set:N = \l_jon_tikz_diagram_sw,
   ne .tl_set:N = \l_jon_tikz_diagram_ne,
   se .tl_set:N = \l_jon_tikz_diagram_se,

   width .tl_set:N = \l_jon_tikz_diagram_width,
   height .tl_set:N = \l_jon_tikz_diagram_height,

   north .tl_set:N = \l_jon_tikz_diagram_north,
   south .tl_set:N = \l_jon_tikz_diagram_south,
   west .tl_set:N = \l_jon_tikz_diagram_west,
   east .tl_set:N = \l_jon_tikz_diagram_east,

   nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
   sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
   ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
   se/style .code:n = {\tikzset{square/se/.style = {#1}}},

   glue .choice:,
   glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

   glue~target .tl_set:N = \l_jon_tikz_glue_target,

   north/style .code:n = {\tikzset{square/north/.style = {#1}}},
   north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
   south/style .code:n = {\tikzset{square/south/.style = {#1}}},
   south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
   west/style .code:n = {\tikzset{square/west/.style = {#1}}},
   west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
   east/style .code:n = {\tikzset{square/east/.style = {#1}}},
   east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

   draft .meta:n = {
     nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
     sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
     se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
     ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
     north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
     south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
     west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
     east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
   }
 }

 \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
 \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


 \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
   \texttt{\textcolor{red}{#1}}
 }

 \keys_set:nn { jon-tikz/diagram } {
   glue~target = {},
 }


 \cs_new:Nn \__jon_tikz_render_square:nn {
   \group_begin:
   \keys_set:nn {jon-tikz/diagram} {#2}
   \bool_if:nTF \l_jon_glue_west {
     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   } {
     \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
     \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
     \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);

     \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
     \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
     \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
     \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
     \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
   }
   \group_end:
 }

 \NewDocumentCommand\SpliceDiagramSquare{D<>{}m}{
   \__jon_tikz_render_square:nn {#1} {#2}
 }


 \NewDocumentCommand\DiagramSquare{D<>{}O{}m}{
   \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
     \__jon_tikz_render_square:nn {#1} {#3}
   \end{tikzpicture}
 }

 \ExplSyntaxOff

  ]]></fr:resource-source><fr:resource-source type="latex" part="body"><![CDATA[
    \begin {tikzpicture}[diagram]
      \node  (0) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {L}\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 4.5cm of 0] (1) {$\mathsf {F}^{\mathbb {L}}\mathsf {L}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \node [right = 3cm of 1] (2) {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\mathsf {U}^{\mathbb {L}}X_{\bullet }}$};
      \draw [->] (0) to node[above] {$\mathsf {F}^{\mathbb {L}}{\mathopen {}\left  [i\mid  \mathsf {L}\,\mathsf {in}_{i}\right  ]\mathclose {}}$} (1);
      \draw [->] (1) to node[above] {$\epsilon $} (2);
      \draw [->,bend right=30] (0) to node[below] {$\mathsf {F}^{\mathbb {L}}\coprod _{I}{\alpha _{X_\bullet }}$} (2);
    \end {tikzpicture}
  ]]></fr:resource-source></fr:resource></html:figure>
 

</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
                <fr:tree show-metadata="false">
                  <fr:frontmatter>
                    <fr:authors>
                      <fr:author>
                        <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
                      </fr:author>
                    </fr:authors>
                    <fr:date>
                      <fr:year>2023</fr:year>
                      <fr:month>5</fr:month>
                      <fr:day>20</fr:day>
                    </fr:date>
                    <fr:uri>https://www.jonmsterling.com/jms-005G/</fr:uri>
                    <fr:display-uri>jms-005G</fr:display-uri>
                    <fr:route>/jms-005G/</fr:route>
                    <fr:title text="The category of lift-algebras is cocomplete">The category of lift-algebras is cocomplete</fr:title>
                    <fr:taxon>Lemma</fr:taxon>
                  </fr:frontmatter>
                  <fr:mainmatter><html:p>The Eilenberg–Moore category <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> for the lifting monad <fr:tex display="inline"><![CDATA[\mathbb {L}={\mathopen {}\left (\mathsf {L},\eta ,\mu \right )\mathclose {}}]]></fr:tex> on dcpos is cocomplete.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>5</fr:month><fr:day>20</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows because <fr:tex display="inline"><![CDATA[\mathsf {dcpo}^{\mathbb {L}}]]></fr:tex> under <fr:link href="/jms-001F/" title="Lifting preserves connected colimits" uri="https://www.jonmsterling.com/jms-001F/" display-uri="jms-001F" type="local">connected colimits</fr:link> and <fr:link href="/jms-005F/" title="Coproducts of lift-algebras" uri="https://www.jonmsterling.com/jms-005F/" display-uri="jms-005F" type="local">coproducts</fr:link></html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
                </fr:tree>
              </fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001V/</fr:uri>
            <fr:display-uri>jms-001V</fr:display-uri>
            <fr:route>/jms-001V/</fr:route>
            <fr:title text="Lift-algebras are pointed">Lift-algebras are pointed</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[{\mathopen {}\left (A,\alpha \right )\mathclose {}}]]></fr:tex> be a <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra; then the underlying dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link>.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>To define the bottom element of <fr:tex display="inline"><![CDATA[A]]></fr:tex>, we choose <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}]]></fr:tex>. Fixing <fr:tex display="inline"><![CDATA[n\in  A]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[\alpha {\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  n]]></fr:tex>. Because <fr:tex display="inline"><![CDATA[\mathsf {L}]]></fr:tex> is a Kock–Zöberlein monad and thus we have <fr:tex display="inline"><![CDATA[\alpha \dashv \eta _{A}]]></fr:tex>, it is equivalent to observe that <fr:tex display="inline"><![CDATA[{\mathopen {}\left (\bot , \lambda \_.\star \right )\mathclose {}}\sqsubseteq  \eta _{A}n]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001U/</fr:uri>
            <fr:display-uri>jms-001U</fr:display-uri>
            <fr:route>/jms-001U/</fr:route>
            <fr:title text="Suprema of semidirected subsets in pointed dcpos">Suprema of semidirected subsets in pointed dcpos</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>A dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex> is <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> if and only if it is closed under suprema of semidirected subsets.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is closed under suprema of semidirected subsets. In particular, we may consider the supremum <fr:tex display="inline"><![CDATA[\bigsqcup {\mathopen {}\left \{\right \}\mathclose {}}]]></fr:tex> of the empty set. This is evidently the bottom element, using the universal property of the supremum.</html:p>

  <html:p>Conversely, suppose that <fr:tex display="inline"><![CDATA[A]]></fr:tex> is pointed and let <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> be semidirected. We may replace <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> by the directed subset <fr:tex display="inline"><![CDATA[I' = I\cup  {\mathopen {}\left \{\bot \right \}\mathclose {}}]]></fr:tex>; the inclusion <fr:tex display="inline"><![CDATA[I\subseteq  I']]></fr:tex> is clearly cofinal, so the supremum of <fr:tex display="inline"><![CDATA[I']]></fr:tex> is also the supremum of <fr:tex display="inline"><![CDATA[I]]></fr:tex>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001T/</fr:uri>
            <fr:display-uri>jms-001T</fr:display-uri>
            <fr:route>/jms-001T/</fr:route>
            <fr:title text="Pointed dcpos are lift-algebras">Pointed dcpos are lift-algebras</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>A <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo carries a (unique) <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex>-algebra structure.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>The algebra structure is unique if it exists because <fr:tex display="inline"><![CDATA[\mathbb {L}]]></fr:tex> is a Kock–Zöberlein monad, i.e. a monad for which the structure maps of algebras are left adjoint to the unit in the order-enrichment. Therefore, it suffices to show that there merely exists an algebra structure <fr:tex display="inline"><![CDATA[{\mathsf {L}{A}}\xrightarrow {{\alpha }}{A}]]></fr:tex> for any <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo <fr:tex display="inline"><![CDATA[A]]></fr:tex>.</html:p>

  <html:p>We define the structure map <fr:tex display="inline"><![CDATA[\alpha ]]></fr:tex> to take <fr:tex display="inline"><![CDATA[u\in \mathsf {L}{A}]]></fr:tex> to the <fr:link href="/jms-001U/" title="Suprema of semidirected subsets in pointed dcpos" uri="https://www.jonmsterling.com/jms-001U/" display-uri="jms-001U" type="local">supremum of the semidirected subset</fr:link> <fr:tex display="inline"><![CDATA[{\mathopen {}\left \{x\in  A \mid  u = \eta _Ax\right \}\mathclose {}}]]></fr:tex>, so we may write <fr:tex display="inline"><![CDATA[\alpha  u = \bigsqcup _{p:u{\downarrow }}u[p]]]></fr:tex>. It is not difficult to see that this assignment is continuous.</html:p>

  <html:p>The unit law for the algebra is trivial. The multiplication law is verified as follows:</html:p>

  <fr:tex display="block"><![CDATA[\alpha {\mathopen {}\left (\mathsf {L}{\alpha } {\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  = \alpha {\mathopen {}\left (\phi , \alpha  u\right )\mathclose {}}
  =
  \bigsqcup _{p:u{\downarrow }}
  \bigsqcup _{q:u[p]{\downarrow }}
  u[p][q]
  = \alpha {\mathopen {}\left (\mu _A{\mathopen {}\left (\phi ,u\right )\mathclose {}}\right )\mathclose {}}
  ]]></fr:tex>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001P/</fr:uri>
            <fr:display-uri>jms-001P</fr:display-uri>
            <fr:route>/jms-001P/</fr:route>
            <fr:title text="The subdcpo spanned by positive elements">The subdcpo spanned by positive elements</fr:title>
            <fr:taxon>Corollary</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; then the subposet <fr:tex display="inline"><![CDATA[A^+\subseteq  A]]></fr:tex> spanned by <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positive</fr:link> is a dcpo.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>This follows from the <fr:link href="/jms-001O/" title="Closure of positivity under directed suprema" uri="https://www.jonmsterling.com/jms-001O/" display-uri="jms-001O" type="local">closure of positive elements in an algebra under directed suprema</fr:link>.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001O/</fr:uri>
            <fr:display-uri>jms-001O</fr:display-uri>
            <fr:route>/jms-001O/</fr:route>
            <fr:title text="Closure of positivity under directed suprema">Closure of positivity under directed suprema</fr:title>
            <fr:taxon>Lemma</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter><html:p>Let <fr:tex display="inline"><![CDATA[A]]></fr:tex> be a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dcpo; the <fr:link href="/jms-001M/" title="The positive elements of a pointed dcpo" uri="https://www.jonmsterling.com/jms-001M/" display-uri="jms-001M" type="local">positivity predicate</fr:link> <fr:tex display="inline"><![CDATA[{\Gamma  A}\xrightarrow {{\mathsf {pos}}}{\Omega }]]></fr:tex> is closed under directed suprema.</html:p>
 
   
   <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link></fr:author></fr:authors><fr:date><fr:year>2023</fr:year><fr:month>2</fr:month><fr:day>14</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>Let <fr:tex display="inline"><![CDATA[J\subseteq  A]]></fr:tex> be a directed subset such that every <fr:tex display="inline"><![CDATA[u\in  J]]></fr:tex> is positive; we must show that <fr:tex display="inline"><![CDATA[\bigsqcup {J}]]></fr:tex> is positive. Fixing a subdirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[\bigsqcup {J}\sqsubseteq  \bigsqcup  I]]></fr:tex>, we must check that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited. The inequality <fr:tex display="inline"><![CDATA[\bigsqcup {J}\sqsubseteq  \bigsqcup  I]]></fr:tex> holds if and only if <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> for all <fr:tex display="inline"><![CDATA[u\in  u]]></fr:tex>; as <fr:tex display="inline"><![CDATA[J]]></fr:tex> is directed, we therefore have some positive <fr:tex display="inline"><![CDATA[u\in  A]]></fr:tex> such that <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> from which it follows that <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited.</html:p>
</fr:mainmatter></fr:tree>
 
</fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/jonmsterling/" title="Jon Sterling" uri="https://www.jonmsterling.com/jonmsterling/" display-uri="jonmsterling" type="local">Jon Sterling</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2023</fr:year>
              <fr:month>2</fr:month>
              <fr:day>14</fr:day>
            </fr:date>
            <fr:uri>https://www.jonmsterling.com/jms-001M/</fr:uri>
            <fr:display-uri>jms-001M</fr:display-uri>
            <fr:route>/jms-001M/</fr:route>
            <fr:title text="The positive elements of a pointed dcpo">The positive elements of a pointed dcpo</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>An element <fr:tex display="inline"><![CDATA[u]]></fr:tex> of a <fr:link href="/jms-001S/" title="Pointed dcpo" uri="https://www.jonmsterling.com/jms-001S/" display-uri="jms-001S" type="local">pointed</fr:link> dpco <fr:tex display="inline"><![CDATA[A]]></fr:tex> is called <html:em>positive</html:em> when for any semidirected subset <fr:tex display="inline"><![CDATA[I\subseteq  A]]></fr:tex>, if <fr:tex display="inline"><![CDATA[u\sqsubseteq  \bigsqcup {I}]]></fr:tex> then <fr:tex display="inline"><![CDATA[I]]></fr:tex> is inhabited. We will write <fr:tex display="inline"><![CDATA[\mathsf {pos}\,{u}]]></fr:tex> to mean that <fr:tex display="inline"><![CDATA[u]]></fr:tex> is a positive element.</html:p>
            <html:p>(This is adapted from <fr:link href="/johnstone-1984/" title="Open locales and exponentiation" uri="https://www.jonmsterling.com/johnstone-1984/" display-uri="johnstone-1984" type="local">Johnstone</fr:link>’s definition of positive elements of frames to the case of dcpos by <fr:link href="/dejong-2023-thesis/" title="Domain theory in constructive and predicative univalent foundations" uri="https://www.jonmsterling.com/dejong-2023-thesis/" display-uri="dejong-2023-thesis" type="local">Tom de Jong</fr:link>.)</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
