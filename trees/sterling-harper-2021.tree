\title{Logical Relations as Types: Proof-Relevant Parametricity for Program Modules}
\date{2021-12-01}
\taxon{reference}
\author{jonmsterling}
\author{Robert Harper}
\meta{doi}{10.1145/3474834}



\p{The theory of program modules is of interest to language designers not only for its practical importance to programming, but also because it lies at the nexus of three fundamental concerns in language design: the \em{phase distinction}, \em{computational effects}, and \em{type abstraction}. We contribute a fresh “synthetic” take on program modules that treats modules as the fundamental constructs, in which the usual suspects of prior module calculi (kinds, constructors, dynamic programs) are rendered as derived notions in terms of a modal type-theoretic account of the phase distinction. We simplify the account of type abstraction (embodied in the generativity of module functors) through a \em{lax modality} that encapsulates computational effects, placing \em{projectibility} of module expressions on a type-theoretic basis.}

\p{Our main result is a (significant) proof-relevant and phase-sensitive generalization of the Reynolds abstraction theorem for a calculus of program modules, based on a new kind of logical relation called a \em{parametricity structure}. Parametricity structures generalize the proof-irrelevant relations of classical parametricity to proof-\em{relevant} families, where there may be non-trivial evidence witnessing the relatedness of two programs—simplifying the metatheory of strong sums over the collection of types, for although there can be no “relation classifying relations,” one easily accommodates a “family classifying small families.”}

\p{Using the insight that logical relations/parametricity is itself a form of phase distinction between the syntactic and the semantic, we contribute a new synthetic approach to phase separated parametricity based on the slogan \em{logical relations as types}, by iterating our modal account of the phase distinction. We axiomatize a dependent type theory of parametricity structures using two pairs of complementary modalities (syntactic, semantic) and (static, dynamic), substantiated using the topos theoretic \em{Artin gluing} construction. Then, to construct a simulation between two implementations of an abstract type, one simply programs a third implementation whose type component carries the representation invariant.}