\title{from an outline to a plain text referee report}
\author{jonmsterling}
\date{2023-08-31}

\p{Although we have seen how pleasant it is to use an outliner like [Bike](jms-0085) to draft a referee report, but we obviously cannot submit a \code{.bike} file to a conference reviewing website or a journal editor. Most conference reviewing systems accept plain text or Markdown responses, and so our goal will be to convert a [Bike](jms-0085) outline into reasonably formatted Markdown.}

\p{It happens that [Bike](jms-0085)’s underlying format is HTML, so one idea would be to use [Pandoc](jms-008D) to process this HTML into Markdown. This would work, except that [Bike](jms-0085)’s model is sufficiently structured that it must make deeply idiosyncratic use of HTML tags, as can be seen from the [listing](jms-008G) below.}

\scope{
  \put\transclude/expanded{false}
  \transclude{jms-008G}
}


\p{The Markdown that would result from postprocessing a [Bike](jms-0085) outline directly with [Pandoc](jms-008D) would be deeply unsuitable for submission. We will, however, use a version of this idea: first we will preprocess the [Bike](jms-0085) format into more conventional (unstructured) HTML using XSLT 2.0, and then we will use [Pandoc](jms-008D) to convert this into Markdown.}

\scope{
  \put\transclude/title{system requirements}
  \transclude{jms-008E}
}

\p{With the [system requirements](jms-008E) out of the way, we can proceed to prepare an XSLT stylesheet that will convert [Bike](jms-0085)’s idiosyncratic use of HTML tags to more conventional HTML that can be processed into Markdown by [Pandoc](jms-008D). The stylesheet \code{bike-to-html.xsl} is described and explained in the [listing](jms-0087) below.}

\scope{
  \put\transclude/metadata{true}
  \transclude{jms-0087}
}

\p{Next, we can use Saxon to convert a [Bike](jms-0087) outline to standard HTML using the [stylesheet above](jms-0087).}

\pre{cat review.bike | saxon -xsl:bike-to-html.xsl - > review.html}

\p{Go ahead and open the resulting HTML file in a text editor and a browser to see the results.}

\scope{
  \put\transclude/expanded{false}
  \transclude{jms-008F}
}

\p{Next, we will process this HTML file using [Pandoc](jms-008D); unfortunately, [Pandoc](jms-008D) leaves behind a lot of garbage character escapes that are \em{not} suitable for submission anywhere, so we must filter those out using \code{sed}.}

\pre{\startverb%
cat review.html | pandoc -f html -t markdown-raw_html-native_divs-native_spans-fenced_divs-bracketed_spans-smart | sed 's/\\//g'
\stopverb}

\scope{
  \put\transclude/expanded{false}
  \transclude{jms-008H}
}
\p{We can group these tasks into a one-liner as follows:}

\pre{\startverb%
cat review.bike | saxon -xsl:bike-to-html.xsl - | pandoc -f html -t markdown-raw_html-native_divs-native_spans-fenced_divs-bracketed_spans-smart | sed 's/\\//g'
\stopverb}

