\title{Between abstraction and composition...}
\date{2021-11-1}
\taxon{reference}

\author{jonmsterling}
\tag{seminar}
\tag{stc}


\meta{slides}{https://www.jonmsterling.com/slides/sterling-2021-logsem.pdf}

\meta{venue}{Logic and Semantics Seminar, Aarhus University}
\p{The fundamental contradiction of programming and program verification can be located in the tension between abstraction and composition. We make programs more abstract in order to prevent bad interactions between components; on the other side of the coin, we impede the composition of components when we abstract them. Modern programming practice evinces many distinct levels of abstraction that must be considered at the same time â€” for instance, compilers break module boundaries during linking, complexity analysis breaks the abstraction of extensional equivalence, and logical relations proofs break the abstraction of closure under substitution. What is needed to meet this challenge is linguistic tools that smoothly interpolate between these different levels of abstraction. Building on [my doctoral dissertation](sterling-2021-thesis) and [joint work with Bob Harper](sterling-harper-2021), I introduce a new plan for modal programming languages and logics that treat the transition between different abstraction levels as a first-class notion.}
