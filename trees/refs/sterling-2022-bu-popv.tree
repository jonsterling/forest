\title{Intrinsic semantics of termination-insensitive noninterference}
\date{2022-4-26}
\taxon{reference}

\author{jonmsterling}
\tag{seminar}
\tag{invited}
\tag{stc}


\meta{slides}{https://www.jonmsterling.com/slides/sterling-2022-bu-popv.pdf}

\meta{venue}{Boston University POPV Seminar}
\p{Security-typed programming languages aim to control the flow of high-security information to low security clients. Starting with Abadi et al.'s dependency core calculus, the denotational semantics of such languages has been dominated by an \strong{extrinsic} approach in which an existing insecure model of computation (e.g. ordinary domains) is restricted by a logical relation of "indistinguishability" to prevent low-security outputs from depending on high-security inputs (noninterference). Thus in the extrinsic approach, security properties are bolted onto an insecure model by brute force, as it were. A more refined information flow policy called termination-insensitive noninterference allows high-security bits to be leaked through termination channels but not through return values; unfortunately, the adaptation of the extrinsic/relational semantics to this more relaxed policy is incompatible with the transitivity of the logical relation, contradicting the intuition of "indistinguishability".}\p{In contrast, an \strong{intrinsic} semantics of security typing would involve a new computational model that evinces secure information flow and noninterference properties directly without any post hoc restriction by a logical relation. We contribute the first such intrinsic semantics of security typing in this sense by considering sheaves of dcpos on a space of abstract behaviors on which security classes arise as open/closed partitions; the security monads then arise as the \em{closed modalities} of topos theory that restrict a sheaf to its component over a closed subspace.}\p{An advantage of our intrinsic semantics is that termination-insensitive noninterference arises automatically from our computational model, namely the fact that the Sierpi≈Ñski domain is not a constant sheaf; a further advantage is that our semantics is an instance of standard domain theoretic denotational semantics, albeit over a richer category of domains.}\p{Preprint: \a{\href{https://www.jonmsterling.com/abstracts.html#sterling-harper:2022}Sheaf semantics of termination-insensitive noninterference}}\p{(j.w.w. \span{\class{person}\a{\href{http://cs.cmu.edu/~rwh/}R. Harper}})}
