\title{Higher order functions and Brouwer’s Thesis}
\date{2021-5-19}
\taxon{reference}

\author{jonmsterling}
\tag{refereed}
\meta{bibtex}{\startverb%
@article{sterling-2021-bhfs,
  author = {Sterling, Jonathan},
  publisher = {Cambridge University Press},
  date = {2021},
  doi = {10.1017/S0956796821000095},
  eprint = {1608.03814},
  eprintclass = {math.LO},
  eprinttype = {arXiv},
  journaltitle = {Journal of Functional Programming},
  note = {\emph{Bob Harper Festschrift Collection}},
  pages = {e11},
  title = {Higher order functions and Brouwer's thesis},
  volume = {31},
}\stopverb}

\import{base-macros}

\meta{artifact}{http://www.jonmsterling.com/agda-effectful-forcing/index.html}

\meta{doi}{10.1017/S0956796821000095}
\meta{venue}{Journal of Functional Programming, [Bob Harper](robertharper) Festschrift Collection}

\let\Nat{#{\mathbb{N}}}

\p{Extending Martín Escardó’s effectful forcing technique, we give a new proof of a well-known result: Brouwer’s monotone bar theorem holds for any bar that can be realized by a functional of type #{\prn{\Nat\to\Nat}\to\Nat} in Gödel’s System T. Effectful forcing is an elementary alternative to standard sheaf-theoretic forcing arguments, using ideas from programming languages, including computational effects, monads, the algebra interpretation of call-by-name λ-calculus, and logical relations. Our argument proceeds by interpreting System T programs as well-founded dialogue trees whose nodes branch on a query to an oracle of type #{\Nat\to\Nat}, lifted to higher type along a call-by-name translation. To connect this interpretation to the bar theorem, we then show that Brouwer’s famous "mental constructions" of barhood constitute an invariant form of these dialogue trees in which queries to the oracle are made maximally and in order.}
