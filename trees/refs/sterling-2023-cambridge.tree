\title{Crossing boundaries in program semantics}
\date{2023-2-9}
\taxon{reference}

\author{jonmsterling}
\tag{seminar}
\tag{typesynth}


\meta{slides}{https://www.jonmsterling.com/slides/sterling-2023-cambridge.pdf}

\meta{venue}{Cambridge Computer Laboratory, University of Cambridge}
\p{The great semanticist John Reynolds famously wrote in 1983 that “type structure is a syntactic
discipline for enforcing levels of abstraction”. If the last twenty years of programming language
semantics and verification have taught us anything, it is that we also need a syntactic discipline
for breaking abstraction — in other words, a way to glue together programs and verifications that
cut across abstraction barriers.}\p{In programming language semantics and verification, the problem of combining multiple levels of
abstraction arises when choosing a “level of detail” at which to view program execution:
for instance, one could look at program execution as a detailed operational process of
discrete steps evincing the cost or complexity of an algorithm, or one could think of
it more abstractly as a black box that only sends inputs to outputs. The difficulty is
that in practice, verifications tend to cut across this barrier between complexity
and functional correctness: for instance, complexity bounds often depend on the
functional correctness of subroutines, and the existence of such a bound implies
termination (a correctness property).}\p{For this reason, it is crucial to develop integrated logical foundations for \strong{soundly} reasoning
using multiple models of execution at the same time, even when they expose different facets of
a program's meaning. For the past three years, my research program has been to uncover and
exploit the basic “laws of motion” governing all such abstraction barriers, which has led
to the solution of a few significant open problems in homotopy type theory and modal type
theory, as well as some preliminary applications to security and cost analysis.}
