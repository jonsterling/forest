\import{jms-0075}
\title{equational higher-order separation logic for higher-order store}
\author{jonmsterling}
\date{2023-08-15}

\p{In collaboration with my colleagues [Frederik Ljerbjerg Aagaard](flaagaard) and [Professor Lars Birkedal](larsbirkedal), I have developed a [guarded higher-order separation logic called TULIP](aagaard-sterling-birkedal-2023) over the \TypeSynth [denotational model of higher-order store](sterling-gratzer-birkedal-2022). This logic represents a significant step forward in the march toward simple, abstract, and compositional reasoning about higher-order stateful programs. Prior program logics (such as Iris and the Verified Software Toolchain) interact with computer programs only indirectly, by verifying properties of a specific “transition function” that simulates the steps that a (highly idealized) computer would take when executing a program; this style is called “operational”. Unfortunately, the important structural properties of programs are highly unnatural to express at the level of transition steps, and as such, existing operationally-based program logics impose a great deal of bureaucracy by forcing those verifying programs to manually mediate the mismatch between the viewpoint of the machine (which cannot see program structure), and the viewpoint of the programmer (which is entirely based on program structure). An equational, or "denotationally-based", program logic like [TULIP](aagaard-sterling-birkedal-2023) instead treats programs directly without needing to pass through an encoding in terms of machine transitions. An immediate benefit of the equational approach is that program equivalences can be glued together directly in any context, a kind of practical compositionality that is unique to equational and denotationally-based program logics. Our development of the [TULIP](aagaard-sterling-birkedal-2023) logic is a strong first step in this direction.}
