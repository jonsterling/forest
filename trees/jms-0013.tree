\title{chapter 4: Tait's method of computability}
\date{2023-01-19T19:38:43-05:00}
\author{jonmsterling}

\import{base-macros}
\def\TpBool{\Con{bool}}


\p{It is simple enough to verify \strong{negative} properties of a formal system, e.g. the non-derivability of a given assertion #{\Phi}: find a mathematical object that models all the rules of the formal system and yet refutes #{\Phi}. In contrast, it is much harder to verify any non-trivial \strong{positive} property of a formal system (such as canonicity, normalization, decidability, etc.). To handle such results, new techniques were needed — and delivered in the late 1960s by Tait, Martin-Löf and others under the name of Tait’s method of computability or logical predicates. Since its inception, Tait’s method has been the primary tool for verifying positive properties of logics, programming languages, and type theories. Early on, [Freyd](freyd-1978) noticed that the logical predicates arguments can be rephrased as model constructions that glue together geometrical objects corresponding to \em{syntax} (object) and \em{set theory} (meta), setting the stage for this thesis. Thus despite appearances, both positive and negative properties can both be proved using semantic methods.}

\p{In the subsequent development of the computability method for applications in computer science, \em{indexed} variants of the logical predicates have proved to be fundamental and a number of variations on indexed logical predicates have appeared including the Kripke logical predicates of [Jung and Tiuryn](jung-tiuryn-1993) and the much more sophisticated \em{Grothendieck} logical predicates of [Fiore and Simpson](fiore-simpson-1999) as well as [Altenkirch, Dybjer, Hofmann, and Scott](altenkirch-dybjer-hofmann-scott-2001). This chapter points out that all of these forms of indexing arise in the same way from what is referred to as a \strong{figure shape}, a continuous map into the classifying space of “Henkin models” of a given theory. Then the (Kripke, Grothendieck, etc.) logical predicates model is presented much more simply as the Artin gluing of this morphism’s inverse image.}

\p{An explicit proof of canonicity for the simply typed #{\lambda}-calculus motivates the abstraction and axiomatization of the geometry of figure shapes and their gluings as a new language for syntactic metatheory, namely \strong{synthetic Tait computability}. The idea of synthetic Tait computability is to treat both object-level notions (e.g. the collection of terms of type #{\TpBool}) and meta-level notions (e.g. a normal form of a given term) in the same language by means of a pair of lex idempotent modalities. One strength of this presentation is that both object-level and meta-level notions can be treated using higher-order abstract syntax (HOAS) in the sense of [Hofmann](hofmann-1999), which greatly simplifies the manipulation of variables.}

\p{The first demonstration of the power and modularity of synthetic Tait
  computability is a new a proof of the canonicity property for Martin-Löf type theory. Unlike traditional proofs of canonicity via non-synthetic Tait computability, the synthetic version is completely modular and broken up into general-purpose lemmas that are stated at a high level of abstraction and can be reused in proofs of \em{different properties} for \em{different type theories}. (Indeed, some of the constructions isolated in this chapter are used off the shelf in [Chapter 7](jms-0014) to prove normalization for cubical type theory.) The modularization of syntactic metatheory is one of the main contributions of this dissertation.}