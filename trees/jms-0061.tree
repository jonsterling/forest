\title{TypeSynth: synthetic methods in program verification}
\author{jonmsterling}
\import{jms-005X}
\meta{doi}{10.3030/101065303}
\date{2022}
\taxon{fellowship}

\table{
  \let\row[k][v]{
    \tr{\td{\b{\k}:}\td{\v}}
  }

  \row{Beneficiary}{[Jonathan Sterling](jonmsterling)}
  \row{Award}{[Marie Skłodowska-Curie Actions Postdoctoral Fellowship](https://marie-sklodowska-curie-actions.ec.europa.eu/actions/postdoctoral-fellowships)}
  \row{Funder}{[European Commission, Horizon Europe Framework Programme (HORIZON)](https://ec.europa.eu/info/research-and-innovation/funding/funding-opportunities/funding-programmes-and-open-calls/horizon-europe_en)}
  \row{Host}{[Aarhus University, Center for Basic Research in Program Verification](https://cpv.au.dk/)}
  \row{Years}{2022–2024}
  \row{Amount}{214,934.4 EUR}
}

\p{\b{Abstract.} Software systems mediate a growing proportion of human activity, e.g. communication, transport, medicine, industrial and agricultural production, etc. As a result, it is urgent to understand and better control both the correctness and security properties of these increasingly complex software systems. The diversity of verification requirements speaks to a need for models of program execution that smoothly interpolate between many different levels of abstraction.}

\p{Models of program execution vary in expressiveness along the spectrum of possible programming languages and specification logics. At one extreme, dependent type theory is a language for mathematically-inspired functional programming that is sufficiently expressive to serve as its own specification logic. Dependent type theory has struggled, however, to incorporate several computational effects that are common in every-day programming languages, such as state and concurrency. Languages that support these features require very sophisticated specification logics due to the myriad details that must be surfaced in their semantic models.}

\p{In the context of dependent type theory, I have recently developed a new technique called [Synthetic Tait Computability](jms-005T) or [STC](jms-005T) that smoothly combines multiple levels of abstraction into a single language. Inspired by sophisticated mathematical techniques invented in topos theory and category theory for entirely different purposes, [STC](jms-005T) enables low-level details (even down to execution steps) to be manipulated in a simpler and more abstract way than ever before, making them easier to control mathematically. Perhaps more importantly, the [STC](jms-005T) method makes it possible to import ideas and techniques from other mathematical fields that are comparatively more developed than programming languages.}

\p{The goal of the \b{TypeSynth} project is to extend the successful [STC](jms-005T) approach to a wider class of programming models, in particular programming languages with effects.}

\put\transclude/expanded{false}
\make-topic-bibliography{typesynth}
